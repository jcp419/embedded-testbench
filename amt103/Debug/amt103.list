
amt103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dcc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b4  08006f70  08006f70  00016f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007424  08007424  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007424  08007424  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007424  08007424  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007424  08007424  00017424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007428  08007428  00017428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800742c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000194  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000370  20000370  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010653  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f23  00000000  00000000  0003085f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca8  00000000  00000000  00032788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218af  00000000  00000000  00034020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fba3  00000000  00000000  000558cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb696  00000000  00000000  00065472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00130b08  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004710  00000000  00000000  00130b5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006f54 	.word	0x08006f54

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006f54 	.word	0x08006f54

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	b097      	sub	sp, #92	; 0x5c
 8000bbc:	af02      	add	r7, sp, #8
int main(void)
 8000bbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bc2:	63bb      	str	r3, [r7, #56]	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc4:	f000 fc1e 	bl	8001404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc8:	f000 f89e 	bl	8000d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bcc:	f000 f9aa 	bl	8000f24 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000bd0:	f000 f8f2 	bl	8000db8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000bd4:	f000 f946 	bl	8000e64 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bd8:	f000 f974 	bl	8000ec4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bdc:	213c      	movs	r1, #60	; 0x3c
 8000bde:	4841      	ldr	r0, [pc, #260]	; (8000ce4 <main+0x12c>)
 8000be0:	f002 fb6a 	bl	80032b8 <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t quad_enc_value = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  uint16_t quad_enc_raw_last = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
  uint16_t quad_enc_raw_now = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  float current_angle = 0;
 8000bf6:	f04f 0300 	mov.w	r3, #0
 8000bfa:	643b      	str	r3, [r7, #64]	; 0x40
  float quad_cpr = 8192.0;
 8000bfc:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
	   * Datasheet: https://www.cuidevices.com/product/resource/amt10.pdf
	   * Device is AMT103 2048 N4000.
	   *
	   */

		quad_enc_raw_now = TIM3->CNT;
 8000c02:	4b39      	ldr	r3, [pc, #228]	; (8000ce8 <main+0x130>)
 8000c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c06:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		quad_enc_value = (int16_t)(quad_enc_raw_now - quad_enc_raw_last) + quad_enc_value;
 8000c0a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000c0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b29a      	uxth	r2, r3
 8000c16:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c1a:	4413      	add	r3, r2
 8000c1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		quad_enc_raw_last = quad_enc_raw_now;
 8000c20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

//		current_angle = (((float)(quad_enc_value % 4096)) / 4096 * 360);
		current_angle = (((float)(quad_enc_value)) / 4096 * 360);
 8000c28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8000c2c:	ee07 3a90 	vmov	s15, r3
 8000c30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c34:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8000cec <main+0x134>
 8000c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c3c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000cf0 <main+0x138>
 8000c40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c44:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		printf("Quad val: %u, quad now: %u, quad last: %u, current_angle: %f \r\n", quad_enc_value, quad_enc_raw_now, quad_enc_raw_last, current_angle);
 8000c48:	f8b7 404e 	ldrh.w	r4, [r7, #78]	; 0x4e
 8000c4c:	f8b7 5046 	ldrh.w	r5, [r7, #70]	; 0x46
 8000c50:	f8b7 604c 	ldrh.w	r6, [r7, #76]	; 0x4c
 8000c54:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000c56:	f7ff fc7f 	bl	8000558 <__aeabi_f2d>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	e9cd 2300 	strd	r2, r3, [sp]
 8000c62:	4633      	mov	r3, r6
 8000c64:	462a      	mov	r2, r5
 8000c66:	4621      	mov	r1, r4
 8000c68:	4822      	ldr	r0, [pc, #136]	; (8000cf4 <main+0x13c>)
 8000c6a:	f003 ff31 	bl	8004ad0 <iprintf>

		char string[50] = "";
 8000c6e:	2300      	movs	r3, #0
 8000c70:	607b      	str	r3, [r7, #4]
 8000c72:	f107 0308 	add.w	r3, r7, #8
 8000c76:	222e      	movs	r2, #46	; 0x2e
 8000c78:	2100      	movs	r1, #0
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f003 fab6 	bl	80041ec <memset>

		sprintf((char *)string, "Quad val is %u, quad now is %u, quad last is%u,\r\n", quad_enc_value, quad_enc_raw_now, quad_enc_raw_last);
 8000c80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8000c84:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8000c88:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8000c8c:	1d38      	adds	r0, r7, #4
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	460b      	mov	r3, r1
 8000c92:	4919      	ldr	r1, [pc, #100]	; (8000cf8 <main+0x140>)
 8000c94:	f003 ff34 	bl	8004b00 <siprintf>
		HAL_Delay(100);
 8000c98:	2064      	movs	r0, #100	; 0x64
 8000c9a:	f000 fc19 	bl	80014d0 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart1, (uint8_t *)string, sizeof(string));
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2232      	movs	r2, #50	; 0x32
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4815      	ldr	r0, [pc, #84]	; (8000cfc <main+0x144>)
 8000ca6:	f002 fdc7 	bl	8003838 <HAL_UART_Transmit_IT>
		HAL_Delay(15);
 8000caa:	200f      	movs	r0, #15
 8000cac:	f000 fc10 	bl	80014d0 <HAL_Delay>

	  	if(index_hit == 1){
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <main+0x148>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d1a4      	bne.n	8000c02 <main+0x4a>
	  		printf("Index Hit == 1 \n\r");
 8000cb8:	4812      	ldr	r0, [pc, #72]	; (8000d04 <main+0x14c>)
 8000cba:	f003 ff09 	bl	8004ad0 <iprintf>
	  		index_hit = 0;
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <main+0x148>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
	  		quad_enc_value = (45.0/360) * 4096;
 8000cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	  		for(int i = 0; i < 1000; i++);
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd0:	e002      	b.n	8000cd8 <main+0x120>
 8000cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cde:	dbf8      	blt.n	8000cd2 <main+0x11a>
  {
 8000ce0:	e78f      	b.n	8000c02 <main+0x4a>
 8000ce2:	bf00      	nop
 8000ce4:	20000208 	.word	0x20000208
 8000ce8:	40000400 	.word	0x40000400
 8000cec:	45800000 	.word	0x45800000
 8000cf0:	43b40000 	.word	0x43b40000
 8000cf4:	08006f70 	.word	0x08006f70
 8000cf8:	08006fb0 	.word	0x08006fb0
 8000cfc:	20000254 	.word	0x20000254
 8000d00:	200001f8 	.word	0x200001f8
 8000d04:	08006fe4 	.word	0x08006fe4

08000d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0a6      	sub	sp, #152	; 0x98
 8000d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d12:	2228      	movs	r2, #40	; 0x28
 8000d14:	2100      	movs	r1, #0
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fa68 	bl	80041ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d1c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
 8000d2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2258      	movs	r2, #88	; 0x58
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 fa5a 	bl	80041ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d40:	2310      	movs	r3, #16
 8000d42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 fea1 	bl	8001a98 <HAL_RCC_OscConfig>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d5c:	f000 f934 	bl	8000fc8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d60:	230f      	movs	r3, #15
 8000d62:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d64:	2300      	movs	r3, #0
 8000d66:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d74:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f001 fda2 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d86:	f000 f91f 	bl	8000fc8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <SystemClock_Config+0xac>)
 8000d8c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000d96:	2300      	movs	r3, #0
 8000d98:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 ffc7 	bl	8002d30 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000da8:	f000 f90e 	bl	8000fc8 <Error_Handler>
  }
}
 8000dac:	bf00      	nop
 8000dae:	3798      	adds	r7, #152	; 0x98
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	00200003 	.word	0x00200003

08000db8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	; 0x30
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dbe:	f107 030c 	add.w	r3, r7, #12
 8000dc2:	2224      	movs	r2, #36	; 0x24
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f003 fa10 	bl	80041ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dcc:	463b      	mov	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd6:	4b21      	ldr	r3, [pc, #132]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000dd8:	4a21      	ldr	r2, [pc, #132]	; (8000e60 <MX_TIM3_Init+0xa8>)
 8000dda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de2:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000de8:	4b1c      	ldr	r3, [pc, #112]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df0:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df6:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e14:	2301      	movs	r3, #1
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 8000e1c:	2308      	movs	r3, #8
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	4619      	mov	r1, r3
 8000e26:	480d      	ldr	r0, [pc, #52]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000e28:	f002 f9a0 	bl	800316c <HAL_TIM_Encoder_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000e32:	f000 f8c9 	bl	8000fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3e:	463b      	mov	r3, r7
 8000e40:	4619      	mov	r1, r3
 8000e42:	4806      	ldr	r0, [pc, #24]	; (8000e5c <MX_TIM3_Init+0xa4>)
 8000e44:	f002 fb8a 	bl	800355c <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e4e:	f000 f8bb 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	3730      	adds	r7, #48	; 0x30
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000208 	.word	0x20000208
 8000e60:	40000400 	.word	0x40000400

08000e64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e6a:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <MX_USART1_UART_Init+0x5c>)
 8000e6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000e6e:	4b13      	ldr	r3, [pc, #76]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e70:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e82:	4b0e      	ldr	r3, [pc, #56]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea6:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_USART1_UART_Init+0x58>)
 8000ea8:	f002 fbe4 	bl	8003674 <HAL_UART_Init>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eb2:	f000 f889 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000254 	.word	0x20000254
 8000ec0:	40013800 	.word	0x40013800

08000ec4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eca:	4a15      	ldr	r2, [pc, #84]	; (8000f20 <MX_USART2_UART_Init+0x5c>)
 8000ecc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000edc:	4b0f      	ldr	r3, [pc, #60]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000eea:	220c      	movs	r2, #12
 8000eec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <MX_USART2_UART_Init+0x58>)
 8000f08:	f002 fbb4 	bl	8003674 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f12:	f000 f859 	bl	8000fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200002d8 	.word	0x200002d8
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_GPIO_Init+0x78>)
 8000f3c:	695b      	ldr	r3, [r3, #20]
 8000f3e:	4a17      	ldr	r2, [pc, #92]	; (8000f9c <MX_GPIO_Init+0x78>)
 8000f40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f44:	6153      	str	r3, [r2, #20]
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_GPIO_Init+0x78>)
 8000f48:	695b      	ldr	r3, [r3, #20]
 8000f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_GPIO_Init+0x78>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <MX_GPIO_Init+0x78>)
 8000f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f5c:	6153      	str	r3, [r2, #20]
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_GPIO_Init+0x78>)
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <MX_GPIO_Init+0x7c>)
 8000f80:	f000 fbdc 	bl	800173c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2006      	movs	r0, #6
 8000f8a:	f000 fba0 	bl	80016ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f8e:	2006      	movs	r0, #6
 8000f90:	f000 fbb9 	bl	8001706 <HAL_NVIC_EnableIRQ>

}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000800 	.word	0x48000800

08000fa4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000fac:	1d39      	adds	r1, r7, #4
 8000fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <__io_putchar+0x20>)
 8000fb6:	f002 fbab 	bl	8003710 <HAL_UART_Transmit>
  return ch;
 8000fba:	687b      	ldr	r3, [r7, #4]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200002d8 	.word	0x200002d8

08000fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fcc:	b672      	cpsid	i
}
 8000fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <Error_Handler+0x8>
	...

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <HAL_MspInit+0x44>)
 8000fdc:	699b      	ldr	r3, [r3, #24]
 8000fde:	4a0e      	ldr	r2, [pc, #56]	; (8001018 <HAL_MspInit+0x44>)
 8000fe0:	f043 0301 	orr.w	r3, r3, #1
 8000fe4:	6193      	str	r3, [r2, #24]
 8000fe6:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <HAL_MspInit+0x44>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b09      	ldr	r3, [pc, #36]	; (8001018 <HAL_MspInit+0x44>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a08      	ldr	r2, [pc, #32]	; (8001018 <HAL_MspInit+0x44>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_MspInit+0x44>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000

0800101c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08a      	sub	sp, #40	; 0x28
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a17      	ldr	r2, [pc, #92]	; (8001098 <HAL_TIM_Encoder_MspInit+0x7c>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d128      	bne.n	8001090 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_TIM_Encoder_MspInit+0x80>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_TIM_Encoder_MspInit+0x80>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_TIM_Encoder_MspInit+0x80>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_TIM_Encoder_MspInit+0x80>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_TIM_Encoder_MspInit+0x80>)
 800105c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001060:	6153      	str	r3, [r2, #20]
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_TIM_Encoder_MspInit+0x80>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800106e:	2350      	movs	r3, #80	; 0x50
 8001070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800107e:	2302      	movs	r3, #2
 8001080:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f000 fb56 	bl	800173c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40000400 	.word	0x40000400
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a2e      	ldr	r2, [pc, #184]	; (8001178 <HAL_UART_MspInit+0xd8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d128      	bne.n	8001114 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c2:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b2b      	ldr	r3, [pc, #172]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010dc:	695b      	ldr	r3, [r3, #20]
 80010de:	4a27      	ldr	r2, [pc, #156]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80010e4:	6153      	str	r3, [r2, #20]
 80010e6:	4b25      	ldr	r3, [pc, #148]	; (800117c <HAL_UART_MspInit+0xdc>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010f2:	2330      	movs	r3, #48	; 0x30
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fe:	2303      	movs	r3, #3
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001102:	2307      	movs	r3, #7
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	4619      	mov	r1, r3
 800110c:	481c      	ldr	r0, [pc, #112]	; (8001180 <HAL_UART_MspInit+0xe0>)
 800110e:	f000 fb15 	bl	800173c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001112:	e02d      	b.n	8001170 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1a      	ldr	r2, [pc, #104]	; (8001184 <HAL_UART_MspInit+0xe4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d128      	bne.n	8001170 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_UART_MspInit+0xdc>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a16      	ldr	r2, [pc, #88]	; (800117c <HAL_UART_MspInit+0xdc>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <HAL_UART_MspInit+0xdc>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_UART_MspInit+0xdc>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_UART_MspInit+0xdc>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <HAL_UART_MspInit+0xdc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800114e:	230c      	movs	r3, #12
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800115a:	2303      	movs	r3, #3
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115e:	2307      	movs	r3, #7
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 031c 	add.w	r3, r7, #28
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f000 fae6 	bl	800173c <HAL_GPIO_Init>
}
 8001170:	bf00      	nop
 8001172:	3730      	adds	r7, #48	; 0x30
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40013800 	.word	0x40013800
 800117c:	40021000 	.word	0x40021000
 8001180:	48000800 	.word	0x48000800
 8001184:	40004400 	.word	0x40004400

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d4:	f000 f95c 	bl	8001490 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}

080011dc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	extern int index_hit;
	index_hit = 1;
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <EXTI0_IRQHandler+0x1c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
	printf("Index Hit \n\r");
 80011e6:	4805      	ldr	r0, [pc, #20]	; (80011fc <EXTI0_IRQHandler+0x20>)
 80011e8:	f003 fc72 	bl	8004ad0 <iprintf>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f000 fc2f 	bl	8001a50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	08006ff8 	.word	0x08006ff8

08001200 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
	return 1;
 8001204:	2301      	movs	r3, #1
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_kill>:

int _kill(int pid, int sig)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800121a:	f002 ffbd 	bl	8004198 <__errno>
 800121e:	4603      	mov	r3, r0
 8001220:	2216      	movs	r2, #22
 8001222:	601a      	str	r2, [r3, #0]
	return -1;
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <_exit>:

void _exit (int status)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001238:	f04f 31ff 	mov.w	r1, #4294967295
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe7 	bl	8001210 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001242:	e7fe      	b.n	8001242 <_exit+0x12>

08001244 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e00a      	b.n	800126c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001256:	f3af 8000 	nop.w
 800125a:	4601      	mov	r1, r0
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1c5a      	adds	r2, r3, #1
 8001260:	60ba      	str	r2, [r7, #8]
 8001262:	b2ca      	uxtb	r2, r1
 8001264:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	3301      	adds	r3, #1
 800126a:	617b      	str	r3, [r7, #20]
 800126c:	697a      	ldr	r2, [r7, #20]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	dbf0      	blt.n	8001256 <_read+0x12>
	}

return len;
 8001274:	687b      	ldr	r3, [r7, #4]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	60f8      	str	r0, [r7, #12]
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128a:	2300      	movs	r3, #0
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	e009      	b.n	80012a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	1c5a      	adds	r2, r3, #1
 8001294:	60ba      	str	r2, [r7, #8]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fe83 	bl	8000fa4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	3301      	adds	r3, #1
 80012a2:	617b      	str	r3, [r7, #20]
 80012a4:	697a      	ldr	r2, [r7, #20]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	dbf1      	blt.n	8001290 <_write+0x12>
	}
	return len;
 80012ac:	687b      	ldr	r3, [r7, #4]
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <_close>:

int _close(int file)
{
 80012b6:	b480      	push	{r7}
 80012b8:	b083      	sub	sp, #12
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012de:	605a      	str	r2, [r3, #4]
	return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_isatty>:

int _isatty(int file)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	return 1;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001304:	b480      	push	{r7}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
	return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3714      	adds	r7, #20
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <_sbrk+0x5c>)
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <_sbrk+0x60>)
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001334:	4b13      	ldr	r3, [pc, #76]	; (8001384 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800133c:	4b11      	ldr	r3, [pc, #68]	; (8001384 <_sbrk+0x64>)
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <_sbrk+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <_sbrk+0x64>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	429a      	cmp	r2, r3
 800134e:	d207      	bcs.n	8001360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001350:	f002 ff22 	bl	8004198 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	220c      	movs	r2, #12
 8001358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e009      	b.n	8001374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001360:	4b08      	ldr	r3, [pc, #32]	; (8001384 <_sbrk+0x64>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001366:	4b07      	ldr	r3, [pc, #28]	; (8001384 <_sbrk+0x64>)
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <_sbrk+0x64>)
 8001370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001372:	68fb      	ldr	r3, [r7, #12]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	20010000 	.word	0x20010000
 8001380:	00000400 	.word	0x00000400
 8001384:	200001fc 	.word	0x200001fc
 8001388:	20000370 	.word	0x20000370

0800138c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <SystemInit+0x20>)
 8001392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <SystemInit+0x20>)
 8001398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800139c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b4:	480d      	ldr	r0, [pc, #52]	; (80013ec <LoopForever+0x6>)
  ldr r1, =_edata
 80013b6:	490e      	ldr	r1, [pc, #56]	; (80013f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013b8:	4a0e      	ldr	r2, [pc, #56]	; (80013f4 <LoopForever+0xe>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013bc:	e002      	b.n	80013c4 <LoopCopyDataInit>

080013be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013c2:	3304      	adds	r3, #4

080013c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c8:	d3f9      	bcc.n	80013be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ca:	4a0b      	ldr	r2, [pc, #44]	; (80013f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013cc:	4c0b      	ldr	r4, [pc, #44]	; (80013fc <LoopForever+0x16>)
  movs r3, #0
 80013ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013d0:	e001      	b.n	80013d6 <LoopFillZerobss>

080013d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d4:	3204      	adds	r2, #4

080013d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d8:	d3fb      	bcc.n	80013d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013da:	f7ff ffd7 	bl	800138c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013de:	f002 fee1 	bl	80041a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013e2:	f7ff fbe9 	bl	8000bb8 <main>

080013e6 <LoopForever>:

LoopForever:
    b LoopForever
 80013e6:	e7fe      	b.n	80013e6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80013e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80013f4:	0800742c 	.word	0x0800742c
  ldr r2, =_sbss
 80013f8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80013fc:	20000370 	.word	0x20000370

08001400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001400:	e7fe      	b.n	8001400 <ADC1_2_IRQHandler>
	...

08001404 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001408:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_Init+0x28>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a07      	ldr	r2, [pc, #28]	; (800142c <HAL_Init+0x28>)
 800140e:	f043 0310 	orr.w	r3, r3, #16
 8001412:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001414:	2003      	movs	r0, #3
 8001416:	f000 f94f 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141a:	200f      	movs	r0, #15
 800141c:	f000 f808 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001420:	f7ff fdd8 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b12      	ldr	r3, [pc, #72]	; (8001484 <HAL_InitTick+0x54>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x58>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4619      	mov	r1, r3
 8001442:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001446:	fbb3 f3f1 	udiv	r3, r3, r1
 800144a:	fbb2 f3f3 	udiv	r3, r2, r3
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f967 	bl	8001722 <HAL_SYSTICK_Config>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e00e      	b.n	800147c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d80a      	bhi.n	800147a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001464:	2200      	movs	r2, #0
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f000 f92f 	bl	80016ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001470:	4a06      	ldr	r2, [pc, #24]	; (800148c <HAL_InitTick+0x5c>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	e000      	b.n	800147c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000000 	.word	0x20000000
 8001488:	20000008 	.word	0x20000008
 800148c:	20000004 	.word	0x20000004

08001490 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_IncTick+0x20>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	461a      	mov	r2, r3
 800149a:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x24>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <HAL_IncTick+0x24>)
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000008 	.word	0x20000008
 80014b4:	2000035c 	.word	0x2000035c

080014b8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return uwTick;  
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <HAL_GetTick+0x14>)
 80014be:	681b      	ldr	r3, [r3, #0]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	2000035c 	.word	0x2000035c

080014d0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	f7ff ffee 	bl	80014b8 <HAL_GetTick>
 80014dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014e8:	d005      	beq.n	80014f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_Delay+0x44>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80014f6:	bf00      	nop
 80014f8:	f7ff ffde 	bl	80014b8 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	429a      	cmp	r2, r3
 8001506:	d8f7      	bhi.n	80014f8 <HAL_Delay+0x28>
  {
  }
}
 8001508:	bf00      	nop
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000008 	.word	0x20000008

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <__NVIC_EnableIRQ+0x38>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ff8e 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff29 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e0:	f7ff ff3e 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	6978      	ldr	r0, [r7, #20]
 80016ec:	f7ff ff8e 	bl	800160c <NVIC_EncodePriority>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff5d 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fe:	bf00      	nop
 8001700:	3718      	adds	r7, #24
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}

08001706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b082      	sub	sp, #8
 800170a:	af00      	add	r7, sp, #0
 800170c:	4603      	mov	r3, r0
 800170e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff ff31 	bl	800157c <__NVIC_EnableIRQ>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f7ff ffa2 	bl	8001674 <SysTick_Config>
 8001730:	4603      	mov	r3, r0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800174a:	e160      	b.n	8001a0e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 8152 	beq.w	8001a08 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x40>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0201 	and.w	r2, r3, #1
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d017      	beq.n	800181a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d123      	bne.n	800186e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4013      	ands	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	6939      	ldr	r1, [r7, #16]
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0203 	and.w	r2, r3, #3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80ac 	beq.w	8001a08 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	4b5e      	ldr	r3, [pc, #376]	; (8001a2c <HAL_GPIO_Init+0x2f0>)
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	4a5d      	ldr	r2, [pc, #372]	; (8001a2c <HAL_GPIO_Init+0x2f0>)
 80018b6:	f043 0301 	orr.w	r3, r3, #1
 80018ba:	6193      	str	r3, [r2, #24]
 80018bc:	4b5b      	ldr	r3, [pc, #364]	; (8001a2c <HAL_GPIO_Init+0x2f0>)
 80018be:	699b      	ldr	r3, [r3, #24]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018c8:	4a59      	ldr	r2, [pc, #356]	; (8001a30 <HAL_GPIO_Init+0x2f4>)
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	089b      	lsrs	r3, r3, #2
 80018ce:	3302      	adds	r3, #2
 80018d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	220f      	movs	r2, #15
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	43db      	mvns	r3, r3
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018f2:	d025      	beq.n	8001940 <HAL_GPIO_Init+0x204>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_GPIO_Init+0x2f8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d01f      	beq.n	800193c <HAL_GPIO_Init+0x200>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <HAL_GPIO_Init+0x2fc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d019      	beq.n	8001938 <HAL_GPIO_Init+0x1fc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_GPIO_Init+0x300>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d013      	beq.n	8001934 <HAL_GPIO_Init+0x1f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x304>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00d      	beq.n	8001930 <HAL_GPIO_Init+0x1f4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_GPIO_Init+0x308>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d007      	beq.n	800192c <HAL_GPIO_Init+0x1f0>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x30c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d101      	bne.n	8001928 <HAL_GPIO_Init+0x1ec>
 8001924:	2306      	movs	r3, #6
 8001926:	e00c      	b.n	8001942 <HAL_GPIO_Init+0x206>
 8001928:	2307      	movs	r3, #7
 800192a:	e00a      	b.n	8001942 <HAL_GPIO_Init+0x206>
 800192c:	2305      	movs	r3, #5
 800192e:	e008      	b.n	8001942 <HAL_GPIO_Init+0x206>
 8001930:	2304      	movs	r3, #4
 8001932:	e006      	b.n	8001942 <HAL_GPIO_Init+0x206>
 8001934:	2303      	movs	r3, #3
 8001936:	e004      	b.n	8001942 <HAL_GPIO_Init+0x206>
 8001938:	2302      	movs	r3, #2
 800193a:	e002      	b.n	8001942 <HAL_GPIO_Init+0x206>
 800193c:	2301      	movs	r3, #1
 800193e:	e000      	b.n	8001942 <HAL_GPIO_Init+0x206>
 8001940:	2300      	movs	r3, #0
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	f002 0203 	and.w	r2, r2, #3
 8001948:	0092      	lsls	r2, r2, #2
 800194a:	4093      	lsls	r3, r2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001952:	4937      	ldr	r1, [pc, #220]	; (8001a30 <HAL_GPIO_Init+0x2f4>)
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	089b      	lsrs	r3, r3, #2
 8001958:	3302      	adds	r3, #2
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001960:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <HAL_GPIO_Init+0x310>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	43db      	mvns	r3, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4013      	ands	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	4313      	orrs	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001984:	4a31      	ldr	r2, [pc, #196]	; (8001a4c <HAL_GPIO_Init+0x310>)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800198a:	4b30      	ldr	r3, [pc, #192]	; (8001a4c <HAL_GPIO_Init+0x310>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019ae:	4a27      	ldr	r2, [pc, #156]	; (8001a4c <HAL_GPIO_Init+0x310>)
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b4:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <HAL_GPIO_Init+0x310>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019d8:	4a1c      	ldr	r2, [pc, #112]	; (8001a4c <HAL_GPIO_Init+0x310>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019de:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_GPIO_Init+0x310>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a02:	4a12      	ldr	r2, [pc, #72]	; (8001a4c <HAL_GPIO_Init+0x310>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f47f ae97 	bne.w	800174c <HAL_GPIO_Init+0x10>
  }
}
 8001a1e:	bf00      	nop
 8001a20:	bf00      	nop
 8001a22:	371c      	adds	r7, #28
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000
 8001a34:	48000400 	.word	0x48000400
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	48000c00 	.word	0x48000c00
 8001a40:	48001000 	.word	0x48001000
 8001a44:	48001400 	.word	0x48001400
 8001a48:	48001800 	.word	0x48001800
 8001a4c:	40010400 	.word	0x40010400

08001a50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a5c:	695a      	ldr	r2, [r3, #20]
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	4013      	ands	r3, r2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d006      	beq.n	8001a74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a68:	88fb      	ldrh	r3, [r7, #6]
 8001a6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a6c:	88fb      	ldrh	r3, [r7, #6]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 f806 	bl	8001a80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010400 	.word	0x40010400

08001a80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	f000 bf01 	b.w	80028b4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 8160 	beq.w	8001d82 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ac2:	4bae      	ldr	r3, [pc, #696]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d00c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ace:	4bab      	ldr	r3, [pc, #684]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d159      	bne.n	8001b8e <HAL_RCC_OscConfig+0xf6>
 8001ada:	4ba8      	ldr	r3, [pc, #672]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae6:	d152      	bne.n	8001b8e <HAL_RCC_OscConfig+0xf6>
 8001ae8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aec:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001af4:	fa93 f3a3 	rbit	r3, r3
 8001af8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001afc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	fab3 f383 	clz	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	095b      	lsrs	r3, r3, #5
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d102      	bne.n	8001b1a <HAL_RCC_OscConfig+0x82>
 8001b14:	4b99      	ldr	r3, [pc, #612]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0xae>
 8001b1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b26:	fa93 f3a3 	rbit	r3, r3
 8001b2a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b32:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b36:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001b3a:	fa93 f3a3 	rbit	r3, r3
 8001b3e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b42:	4b8e      	ldr	r3, [pc, #568]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b4a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001b4e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001b52:	fa92 f2a2 	rbit	r2, r2
 8001b56:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001b5a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b5e:	fab2 f282 	clz	r2, r2
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	f042 0220 	orr.w	r2, r2, #32
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f002 021f 	and.w	r2, r2, #31
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	4013      	ands	r3, r2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	f000 8102 	beq.w	8001d80 <HAL_RCC_OscConfig+0x2e8>
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 80fc 	bne.w	8001d80 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	f000 be93 	b.w	80028b4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b8e:	1d3b      	adds	r3, r7, #4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x110>
 8001b9a:	4b78      	ldr	r3, [pc, #480]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a77      	ldr	r2, [pc, #476]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e030      	b.n	8001c0a <HAL_RCC_OscConfig+0x172>
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x134>
 8001bb2:	4b72      	ldr	r3, [pc, #456]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a71      	ldr	r2, [pc, #452]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b6f      	ldr	r3, [pc, #444]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a6e      	ldr	r2, [pc, #440]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bc4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e01e      	b.n	8001c0a <HAL_RCC_OscConfig+0x172>
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bd6:	d10c      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x15a>
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a67      	ldr	r2, [pc, #412]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bde:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]
 8001be4:	4b65      	ldr	r3, [pc, #404]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a64      	ldr	r2, [pc, #400]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e00b      	b.n	8001c0a <HAL_RCC_OscConfig+0x172>
 8001bf2:	4b62      	ldr	r3, [pc, #392]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a61      	ldr	r2, [pc, #388]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001bf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a5e      	ldr	r2, [pc, #376]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001c04:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c08:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d059      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fc50 	bl	80014b8 <HAL_GetTick>
 8001c18:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1c:	e00a      	b.n	8001c34 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c1e:	f7ff fc4b 	bl	80014b8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	; 0x64
 8001c2c:	d902      	bls.n	8001c34 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	f000 be40 	b.w	80028b4 <HAL_RCC_OscConfig+0xe1c>
 8001c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c38:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001c40:	fa93 f3a3 	rbit	r3, r3
 8001c44:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001c48:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	095b      	lsrs	r3, r3, #5
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <HAL_RCC_OscConfig+0x1ce>
 8001c60:	4b46      	ldr	r3, [pc, #280]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	e015      	b.n	8001c92 <HAL_RCC_OscConfig+0x1fa>
 8001c66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001c7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c7e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001c82:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c96:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001c9a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001c9e:	fa92 f2a2 	rbit	r2, r2
 8001ca2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001ca6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001caa:	fab2 f282 	clz	r2, r2
 8001cae:	b2d2      	uxtb	r2, r2
 8001cb0:	f042 0220 	orr.w	r2, r2, #32
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	f002 021f 	and.w	r2, r2, #31
 8001cba:	2101      	movs	r1, #1
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0ab      	beq.n	8001c1e <HAL_RCC_OscConfig+0x186>
 8001cc6:	e05c      	b.n	8001d82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fbf6 	bl	80014b8 <HAL_GetTick>
 8001ccc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd0:	e00a      	b.n	8001ce8 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fbf1 	bl	80014b8 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d902      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	f000 bde6 	b.w	80028b4 <HAL_RCC_OscConfig+0xe1c>
 8001ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cec:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001cf4:	fa93 f3a3 	rbit	r3, r3
 8001cf8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001cfc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d00:	fab3 f383 	clz	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	095b      	lsrs	r3, r3, #5
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d102      	bne.n	8001d1a <HAL_RCC_OscConfig+0x282>
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	e015      	b.n	8001d46 <HAL_RCC_OscConfig+0x2ae>
 8001d1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d1e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d22:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001d26:	fa93 f3a3 	rbit	r3, r3
 8001d2a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d32:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d36:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <HAL_RCC_OscConfig+0x2e4>)
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d4a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001d4e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001d52:	fa92 f2a2 	rbit	r2, r2
 8001d56:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001d5a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d5e:	fab2 f282 	clz	r2, r2
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	f042 0220 	orr.w	r2, r2, #32
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f002 021f 	and.w	r2, r2, #31
 8001d6e:	2101      	movs	r1, #1
 8001d70:	fa01 f202 	lsl.w	r2, r1, r2
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1ab      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x23a>
 8001d7a:	e002      	b.n	8001d82 <HAL_RCC_OscConfig+0x2ea>
 8001d7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f000 8170 	beq.w	8002072 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d92:	4bd0      	ldr	r3, [pc, #832]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 030c 	and.w	r3, r3, #12
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00c      	beq.n	8001db8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d9e:	4bcd      	ldr	r3, [pc, #820]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b08      	cmp	r3, #8
 8001da8:	d16d      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3ee>
 8001daa:	4bca      	ldr	r3, [pc, #808]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001db6:	d166      	bne.n	8001e86 <HAL_RCC_OscConfig+0x3ee>
 8001db8:	2302      	movs	r3, #2
 8001dba:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001dca:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dce:	fab3 f383 	clz	r3, r3
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	095b      	lsrs	r3, r3, #5
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d102      	bne.n	8001de8 <HAL_RCC_OscConfig+0x350>
 8001de2:	4bbc      	ldr	r3, [pc, #752]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	e013      	b.n	8001e10 <HAL_RCC_OscConfig+0x378>
 8001de8:	2302      	movs	r3, #2
 8001dea:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e00:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e04:	fa93 f3a3 	rbit	r3, r3
 8001e08:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e0c:	4bb1      	ldr	r3, [pc, #708]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e10:	2202      	movs	r2, #2
 8001e12:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001e16:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001e1a:	fa92 f2a2 	rbit	r2, r2
 8001e1e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001e22:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e26:	fab2 f282 	clz	r2, r2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f042 0220 	orr.w	r2, r2, #32
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f002 021f 	and.w	r2, r2, #31
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_RCC_OscConfig+0x3ba>
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d002      	beq.n	8001e52 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	f000 bd31 	b.w	80028b4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e52:	4ba0      	ldr	r3, [pc, #640]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e5a:	1d3b      	adds	r3, r7, #4
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	21f8      	movs	r1, #248	; 0xf8
 8001e62:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001e6a:	fa91 f1a1 	rbit	r1, r1
 8001e6e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001e72:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001e76:	fab1 f181 	clz	r1, r1
 8001e7a:	b2c9      	uxtb	r1, r1
 8001e7c:	408b      	lsls	r3, r1
 8001e7e:	4995      	ldr	r1, [pc, #596]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e84:	e0f5      	b.n	8002072 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e86:	1d3b      	adds	r3, r7, #4
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8085 	beq.w	8001f9c <HAL_RCC_OscConfig+0x504>
 8001e92:	2301      	movs	r3, #1
 8001e94:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001e9c:	fa93 f3a3 	rbit	r3, r3
 8001ea0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001ea4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	fab3 f383 	clz	r3, r3
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001eb2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	2301      	movs	r3, #1
 8001ebc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ebe:	f7ff fafb 	bl	80014b8 <HAL_GetTick>
 8001ec2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	e00a      	b.n	8001ede <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff faf6 	bl	80014b8 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d902      	bls.n	8001ede <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	f000 bceb 	b.w	80028b4 <HAL_RCC_OscConfig+0xe1c>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001ee8:	fa93 f3a3 	rbit	r3, r3
 8001eec:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001ef0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	095b      	lsrs	r3, r3, #5
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d102      	bne.n	8001f0e <HAL_RCC_OscConfig+0x476>
 8001f08:	4b72      	ldr	r3, [pc, #456]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	e013      	b.n	8001f36 <HAL_RCC_OscConfig+0x49e>
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f14:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001f20:	2302      	movs	r3, #2
 8001f22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f26:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001f2a:	fa93 f3a3 	rbit	r3, r3
 8001f2e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f32:	4b68      	ldr	r3, [pc, #416]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2202      	movs	r2, #2
 8001f38:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001f3c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001f40:	fa92 f2a2 	rbit	r2, r2
 8001f44:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001f48:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f4c:	fab2 f282 	clz	r2, r2
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f042 0220 	orr.w	r2, r2, #32
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	f002 021f 	and.w	r2, r2, #31
 8001f5c:	2101      	movs	r1, #1
 8001f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f62:	4013      	ands	r3, r2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0af      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f68:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f70:	1d3b      	adds	r3, r7, #4
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	21f8      	movs	r1, #248	; 0xf8
 8001f78:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001f80:	fa91 f1a1 	rbit	r1, r1
 8001f84:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001f88:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001f8c:	fab1 f181 	clz	r1, r1
 8001f90:	b2c9      	uxtb	r1, r1
 8001f92:	408b      	lsls	r3, r1
 8001f94:	494f      	ldr	r1, [pc, #316]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
 8001f9a:	e06a      	b.n	8002072 <HAL_RCC_OscConfig+0x5da>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001fa6:	fa93 f3a3 	rbit	r3, r3
 8001faa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001fae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fb2:	fab3 f383 	clz	r3, r3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fbc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7ff fa76 	bl	80014b8 <HAL_GetTick>
 8001fcc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff fa71 	bl	80014b8 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d902      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	f000 bc66 	b.w	80028b4 <HAL_RCC_OscConfig+0xe1c>
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ffa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	095b      	lsrs	r3, r3, #5
 8002006:	b2db      	uxtb	r3, r3
 8002008:	f043 0301 	orr.w	r3, r3, #1
 800200c:	b2db      	uxtb	r3, r3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d102      	bne.n	8002018 <HAL_RCC_OscConfig+0x580>
 8002012:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	e013      	b.n	8002040 <HAL_RCC_OscConfig+0x5a8>
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800202a:	2302      	movs	r3, #2
 800202c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002030:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002034:	fa93 f3a3 	rbit	r3, r3
 8002038:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800203c:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_RCC_OscConfig+0x63c>)
 800203e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002040:	2202      	movs	r2, #2
 8002042:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002046:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800204a:	fa92 f2a2 	rbit	r2, r2
 800204e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8002052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002056:	fab2 f282 	clz	r2, r2
 800205a:	b2d2      	uxtb	r2, r2
 800205c:	f042 0220 	orr.w	r2, r2, #32
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	f002 021f 	and.w	r2, r2, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f202 	lsl.w	r2, r1, r2
 800206c:	4013      	ands	r3, r2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1af      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002072:	1d3b      	adds	r3, r7, #4
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0308 	and.w	r3, r3, #8
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 80da 	beq.w	8002236 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695b      	ldr	r3, [r3, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d069      	beq.n	8002160 <HAL_RCC_OscConfig+0x6c8>
 800208c:	2301      	movs	r3, #1
 800208e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800209e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x640>)
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	461a      	mov	r2, r3
 80020b2:	2301      	movs	r3, #1
 80020b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b6:	f7ff f9ff 	bl	80014b8 <HAL_GetTick>
 80020ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020be:	e00d      	b.n	80020dc <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020c0:	f7ff f9fa 	bl	80014b8 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d905      	bls.n	80020dc <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e3ef      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	10908120 	.word	0x10908120
 80020dc:	2302      	movs	r3, #2
 80020de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80020e6:	fa93 f2a3 	rbit	r2, r3
 80020ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020f4:	2202      	movs	r2, #2
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800210c:	2202      	movs	r2, #2
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	fa93 f2a3 	rbit	r2, r3
 800211a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800211e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002120:	4ba4      	ldr	r3, [pc, #656]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002124:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002128:	2102      	movs	r1, #2
 800212a:	6019      	str	r1, [r3, #0]
 800212c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	fa93 f1a3 	rbit	r1, r3
 8002136:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800213a:	6019      	str	r1, [r3, #0]
  return result;
 800213c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	fab3 f383 	clz	r3, r3
 8002146:	b2db      	uxtb	r3, r3
 8002148:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	2101      	movs	r1, #1
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	4013      	ands	r3, r2
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0b0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x628>
 800215e:	e06a      	b.n	8002236 <HAL_RCC_OscConfig+0x79e>
 8002160:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002164:	2201      	movs	r2, #1
 8002166:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	fa93 f2a3 	rbit	r2, r3
 8002172:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002176:	601a      	str	r2, [r3, #0]
  return result;
 8002178:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800217c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	461a      	mov	r2, r3
 8002186:	4b8c      	ldr	r3, [pc, #560]	; (80023b8 <HAL_RCC_OscConfig+0x920>)
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	461a      	mov	r2, r3
 800218e:	2300      	movs	r3, #0
 8002190:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002192:	f7ff f991 	bl	80014b8 <HAL_GetTick>
 8002196:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800219a:	e009      	b.n	80021b0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800219c:	f7ff f98c 	bl	80014b8 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e381      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
 80021b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021b4:	2202      	movs	r2, #2
 80021b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	fa93 f2a3 	rbit	r2, r3
 80021c2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021cc:	2202      	movs	r2, #2
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021e4:	2202      	movs	r2, #2
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	fa93 f2a3 	rbit	r2, r3
 80021f2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80021f6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f8:	4b6e      	ldr	r3, [pc, #440]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80021fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021fc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002200:	2102      	movs	r1, #2
 8002202:	6019      	str	r1, [r3, #0]
 8002204:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	fa93 f1a3 	rbit	r1, r3
 800220e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002212:	6019      	str	r1, [r3, #0]
  return result;
 8002214:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1b2      	bne.n	800219c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 8157 	beq.w	80024f4 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002246:	2300      	movs	r3, #0
 8002248:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224c:	4b59      	ldr	r3, [pc, #356]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d112      	bne.n	800227e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002258:	4b56      	ldr	r3, [pc, #344]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	4a55      	ldr	r2, [pc, #340]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 800225e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002262:	61d3      	str	r3, [r2, #28]
 8002264:	4b53      	ldr	r3, [pc, #332]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <HAL_RCC_OscConfig+0x924>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d11a      	bne.n	80022c0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4b4c      	ldr	r3, [pc, #304]	; (80023bc <HAL_RCC_OscConfig+0x924>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a4b      	ldr	r2, [pc, #300]	; (80023bc <HAL_RCC_OscConfig+0x924>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7ff f90f 	bl	80014b8 <HAL_GetTick>
 800229a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	e009      	b.n	80022b4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7ff f90a 	bl	80014b8 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	; 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e2ff      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b4:	4b41      	ldr	r3, [pc, #260]	; (80023bc <HAL_RCC_OscConfig+0x924>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0ef      	beq.n	80022a0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d106      	bne.n	80022d8 <HAL_RCC_OscConfig+0x840>
 80022ca:	4b3a      	ldr	r3, [pc, #232]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a39      	ldr	r2, [pc, #228]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80022d0:	f043 0301 	orr.w	r3, r3, #1
 80022d4:	6213      	str	r3, [r2, #32]
 80022d6:	e02f      	b.n	8002338 <HAL_RCC_OscConfig+0x8a0>
 80022d8:	1d3b      	adds	r3, r7, #4
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x864>
 80022e2:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b31      	ldr	r3, [pc, #196]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a30      	ldr	r2, [pc, #192]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	e01d      	b.n	8002338 <HAL_RCC_OscConfig+0x8a0>
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b05      	cmp	r3, #5
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x888>
 8002306:	4b2b      	ldr	r3, [pc, #172]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	4a2a      	ldr	r2, [pc, #168]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6213      	str	r3, [r2, #32]
 8002312:	4b28      	ldr	r3, [pc, #160]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002314:	6a1b      	ldr	r3, [r3, #32]
 8002316:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6213      	str	r3, [r2, #32]
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0x8a0>
 8002320:	4b24      	ldr	r3, [pc, #144]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a23      	ldr	r2, [pc, #140]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	4a20      	ldr	r2, [pc, #128]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002338:	1d3b      	adds	r3, r7, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d06a      	beq.n	8002418 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7ff f8b9 	bl	80014b8 <HAL_GetTick>
 8002346:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800234a:	e00b      	b.n	8002364 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800234c:	f7ff f8b4 	bl	80014b8 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	f241 3288 	movw	r2, #5000	; 0x1388
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e2a7      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
 8002364:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002368:	2202      	movs	r2, #2
 800236a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa93 f2a3 	rbit	r2, r3
 8002376:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	fa93 f2a3 	rbit	r2, r3
 800238e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002392:	601a      	str	r2, [r3, #0]
  return result;
 8002394:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002398:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d108      	bne.n	80023c0 <HAL_RCC_OscConfig+0x928>
 80023ae:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <HAL_RCC_OscConfig+0x91c>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	e013      	b.n	80023dc <HAL_RCC_OscConfig+0x944>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	10908120 	.word	0x10908120
 80023bc:	40007000 	.word	0x40007000
 80023c0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023c4:	2202      	movs	r2, #2
 80023c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	4bc0      	ldr	r3, [pc, #768]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023e0:	2102      	movs	r1, #2
 80023e2:	6011      	str	r1, [r2, #0]
 80023e4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	fa92 f1a2 	rbit	r1, r2
 80023ee:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023f2:	6011      	str	r1, [r2, #0]
  return result;
 80023f4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80023f8:	6812      	ldr	r2, [r2, #0]
 80023fa:	fab2 f282 	clz	r2, r2
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	f002 021f 	and.w	r2, r2, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f202 	lsl.w	r2, r1, r2
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d09a      	beq.n	800234c <HAL_RCC_OscConfig+0x8b4>
 8002416:	e063      	b.n	80024e0 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002418:	f7ff f84e 	bl	80014b8 <HAL_GetTick>
 800241c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	e00b      	b.n	800243a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002422:	f7ff f849 	bl	80014b8 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e23c      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
 800243a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002442:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002456:	2202      	movs	r2, #2
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	fa93 f2a3 	rbit	r2, r3
 8002464:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002468:	601a      	str	r2, [r3, #0]
  return result;
 800246a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800246e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002470:	fab3 f383 	clz	r3, r3
 8002474:	b2db      	uxtb	r3, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f043 0302 	orr.w	r3, r3, #2
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d102      	bne.n	800248a <HAL_RCC_OscConfig+0x9f2>
 8002484:	4b95      	ldr	r3, [pc, #596]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 8002486:	6a1b      	ldr	r3, [r3, #32]
 8002488:	e00d      	b.n	80024a6 <HAL_RCC_OscConfig+0xa0e>
 800248a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800248e:	2202      	movs	r2, #2
 8002490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002492:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	fa93 f2a3 	rbit	r2, r3
 800249c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	4b8e      	ldr	r3, [pc, #568]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024aa:	2102      	movs	r1, #2
 80024ac:	6011      	str	r1, [r2, #0]
 80024ae:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fa92 f1a2 	rbit	r1, r2
 80024b8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024bc:	6011      	str	r1, [r2, #0]
  return result;
 80024be:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f002 021f 	and.w	r2, r2, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1a0      	bne.n	8002422 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024e0:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d105      	bne.n	80024f4 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024e8:	4b7c      	ldr	r3, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	4a7b      	ldr	r2, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 80024ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f4:	1d3b      	adds	r3, r7, #4
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 81d9 	beq.w	80028b2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002500:	4b76      	ldr	r3, [pc, #472]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 030c 	and.w	r3, r3, #12
 8002508:	2b08      	cmp	r3, #8
 800250a:	f000 81a6 	beq.w	800285a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	2b02      	cmp	r3, #2
 8002516:	f040 811e 	bne.w	8002756 <HAL_RCC_OscConfig+0xcbe>
 800251a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800251e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002522:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002524:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	fa93 f2a3 	rbit	r2, r3
 800252e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002532:	601a      	str	r2, [r3, #0]
  return result;
 8002534:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002538:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800253a:	fab3 f383 	clz	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002544:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	461a      	mov	r2, r3
 800254c:	2300      	movs	r3, #0
 800254e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe ffb2 	bl	80014b8 <HAL_GetTick>
 8002554:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002558:	e009      	b.n	800256e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800255a:	f7fe ffad 	bl	80014b8 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b02      	cmp	r3, #2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1a2      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
 800256e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002572:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002578:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	fa93 f2a3 	rbit	r2, r3
 8002582:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002586:	601a      	str	r2, [r3, #0]
  return result;
 8002588:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800258c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	fab3 f383 	clz	r3, r3
 8002592:	b2db      	uxtb	r3, r3
 8002594:	095b      	lsrs	r3, r3, #5
 8002596:	b2db      	uxtb	r3, r3
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d102      	bne.n	80025a8 <HAL_RCC_OscConfig+0xb10>
 80025a2:	4b4e      	ldr	r3, [pc, #312]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	e01b      	b.n	80025e0 <HAL_RCC_OscConfig+0xb48>
 80025a8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	fa93 f2a3 	rbit	r2, r3
 80025bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	fa93 f2a3 	rbit	r2, r3
 80025d6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 80025de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e0:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e8:	6011      	str	r1, [r2, #0]
 80025ea:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	fa92 f1a2 	rbit	r1, r2
 80025f4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025f8:	6011      	str	r1, [r2, #0]
  return result;
 80025fa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	fab2 f282 	clz	r2, r2
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	f042 0220 	orr.w	r2, r2, #32
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	f002 021f 	and.w	r2, r2, #31
 8002610:	2101      	movs	r1, #1
 8002612:	fa01 f202 	lsl.w	r2, r1, r2
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d19e      	bne.n	800255a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261c:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 800261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002620:	f023 020f 	bic.w	r2, r3, #15
 8002624:	1d3b      	adds	r3, r7, #4
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	492c      	ldr	r1, [pc, #176]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 800262c:	4313      	orrs	r3, r2
 800262e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002638:	1d3b      	adds	r3, r7, #4
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6a19      	ldr	r1, [r3, #32]
 800263e:	1d3b      	adds	r3, r7, #4
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	430b      	orrs	r3, r1
 8002646:	4925      	ldr	r1, [pc, #148]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 8002648:	4313      	orrs	r3, r2
 800264a:	604b      	str	r3, [r1, #4]
 800264c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002656:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002664:	601a      	str	r2, [r3, #0]
  return result;
 8002666:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800266a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002676:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	461a      	mov	r2, r3
 800267e:	2301      	movs	r3, #1
 8002680:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe ff19 	bl	80014b8 <HAL_GetTick>
 8002686:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800268a:	e009      	b.n	80026a0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe ff14 	bl	80014b8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e109      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
 80026a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	fa93 f2a3 	rbit	r2, r3
 80026b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026b8:	601a      	str	r2, [r3, #0]
  return result;
 80026ba:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80026be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026c0:	fab3 f383 	clz	r3, r3
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d105      	bne.n	80026e0 <HAL_RCC_OscConfig+0xc48>
 80026d4:	4b01      	ldr	r3, [pc, #4]	; (80026dc <HAL_RCC_OscConfig+0xc44>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	e01e      	b.n	8002718 <HAL_RCC_OscConfig+0xc80>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	fa93 f2a3 	rbit	r2, r3
 80026f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	fa93 f2a3 	rbit	r2, r3
 800270e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_OscConfig+0xe28>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800271c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002720:	6011      	str	r1, [r2, #0]
 8002722:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	fa92 f1a2 	rbit	r1, r2
 800272c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002730:	6011      	str	r1, [r2, #0]
  return result;
 8002732:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002736:	6812      	ldr	r2, [r2, #0]
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	f042 0220 	orr.w	r2, r2, #32
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	f002 021f 	and.w	r2, r2, #31
 8002748:	2101      	movs	r1, #1
 800274a:	fa01 f202 	lsl.w	r2, r1, r2
 800274e:	4013      	ands	r3, r2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d09b      	beq.n	800268c <HAL_RCC_OscConfig+0xbf4>
 8002754:	e0ad      	b.n	80028b2 <HAL_RCC_OscConfig+0xe1a>
 8002756:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800275a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800275e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002760:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fa93 f2a3 	rbit	r2, r3
 800276a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800276e:	601a      	str	r2, [r3, #0]
  return result;
 8002770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002774:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
 800277c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002780:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	461a      	mov	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fe94 	bl	80014b8 <HAL_GetTick>
 8002790:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002794:	e009      	b.n	80027aa <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002796:	f7fe fe8f 	bl	80014b8 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e084      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
 80027aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	fa93 f2a3 	rbit	r2, r3
 80027be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c2:	601a      	str	r2, [r3, #0]
  return result;
 80027c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027ca:	fab3 f383 	clz	r3, r3
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	095b      	lsrs	r3, r3, #5
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d102      	bne.n	80027e4 <HAL_RCC_OscConfig+0xd4c>
 80027de:	4b38      	ldr	r3, [pc, #224]	; (80028c0 <HAL_RCC_OscConfig+0xe28>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e01b      	b.n	800281c <HAL_RCC_OscConfig+0xd84>
 80027e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	fa93 f2a3 	rbit	r2, r3
 80027f8:	f107 0320 	add.w	r3, r7, #32
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	f107 031c 	add.w	r3, r7, #28
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	fa93 f2a3 	rbit	r2, r3
 8002812:	f107 0318 	add.w	r3, r7, #24
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_OscConfig+0xe28>)
 800281a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281c:	f107 0214 	add.w	r2, r7, #20
 8002820:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002824:	6011      	str	r1, [r2, #0]
 8002826:	f107 0214 	add.w	r2, r7, #20
 800282a:	6812      	ldr	r2, [r2, #0]
 800282c:	fa92 f1a2 	rbit	r1, r2
 8002830:	f107 0210 	add.w	r2, r7, #16
 8002834:	6011      	str	r1, [r2, #0]
  return result;
 8002836:	f107 0210 	add.w	r2, r7, #16
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	f042 0220 	orr.w	r2, r2, #32
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	f002 021f 	and.w	r2, r2, #31
 800284c:	2101      	movs	r1, #1
 800284e:	fa01 f202 	lsl.w	r2, r1, r2
 8002852:	4013      	ands	r3, r2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d19e      	bne.n	8002796 <HAL_RCC_OscConfig+0xcfe>
 8002858:	e02b      	b.n	80028b2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285a:	1d3b      	adds	r3, r7, #4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e025      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002868:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_RCC_OscConfig+0xe28>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002870:	4b13      	ldr	r3, [pc, #76]	; (80028c0 <HAL_RCC_OscConfig+0xe28>)
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002878:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800287c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002880:	1d3b      	adds	r3, r7, #4
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	429a      	cmp	r2, r3
 8002888:	d111      	bne.n	80028ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800288a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800288e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002892:	1d3b      	adds	r3, r7, #4
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002898:	429a      	cmp	r2, r3
 800289a:	d108      	bne.n	80028ae <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800289c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028a0:	f003 020f 	and.w	r2, r3, #15
 80028a4:	1d3b      	adds	r3, r7, #4
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d001      	beq.n	80028b2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e000      	b.n	80028b4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b09e      	sub	sp, #120	; 0x78
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ce:	2300      	movs	r3, #0
 80028d0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d101      	bne.n	80028dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e162      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028dc:	4b90      	ldr	r3, [pc, #576]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0307 	and.w	r3, r3, #7
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d910      	bls.n	800290c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ea:	4b8d      	ldr	r3, [pc, #564]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f023 0207 	bic.w	r2, r3, #7
 80028f2:	498b      	ldr	r1, [pc, #556]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fa:	4b89      	ldr	r3, [pc, #548]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	429a      	cmp	r2, r3
 8002906:	d001      	beq.n	800290c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e14a      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b82      	ldr	r3, [pc, #520]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	497f      	ldr	r1, [pc, #508]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80dc 	beq.w	8002af0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d13c      	bne.n	80029ba <HAL_RCC_ClockConfig+0xf6>
 8002940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002944:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002946:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002948:	fa93 f3a3 	rbit	r3, r3
 800294c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800294e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002950:	fab3 f383 	clz	r3, r3
 8002954:	b2db      	uxtb	r3, r3
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	b2db      	uxtb	r3, r3
 800295a:	f043 0301 	orr.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b01      	cmp	r3, #1
 8002962:	d102      	bne.n	800296a <HAL_RCC_ClockConfig+0xa6>
 8002964:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	e00f      	b.n	800298a <HAL_RCC_ClockConfig+0xc6>
 800296a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800296e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002970:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002972:	fa93 f3a3 	rbit	r3, r3
 8002976:	667b      	str	r3, [r7, #100]	; 0x64
 8002978:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800297c:	663b      	str	r3, [r7, #96]	; 0x60
 800297e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002986:	4b67      	ldr	r3, [pc, #412]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800298e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002990:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002992:	fa92 f2a2 	rbit	r2, r2
 8002996:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002998:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800299a:	fab2 f282 	clz	r2, r2
 800299e:	b2d2      	uxtb	r2, r2
 80029a0:	f042 0220 	orr.w	r2, r2, #32
 80029a4:	b2d2      	uxtb	r2, r2
 80029a6:	f002 021f 	and.w	r2, r2, #31
 80029aa:	2101      	movs	r1, #1
 80029ac:	fa01 f202 	lsl.w	r2, r1, r2
 80029b0:	4013      	ands	r3, r2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d17b      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0f3      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d13c      	bne.n	8002a3c <HAL_RCC_ClockConfig+0x178>
 80029c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80029d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029d2:	fab3 f383 	clz	r3, r3
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	095b      	lsrs	r3, r3, #5
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d102      	bne.n	80029ec <HAL_RCC_ClockConfig+0x128>
 80029e6:	4b4f      	ldr	r3, [pc, #316]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	e00f      	b.n	8002a0c <HAL_RCC_ClockConfig+0x148>
 80029ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029f0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
 80029fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029fe:	643b      	str	r3, [r7, #64]	; 0x40
 8002a00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a02:	fa93 f3a3 	rbit	r3, r3
 8002a06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a08:	4b46      	ldr	r3, [pc, #280]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a10:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a14:	fa92 f2a2 	rbit	r2, r2
 8002a18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a1c:	fab2 f282 	clz	r2, r2
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f042 0220 	orr.w	r2, r2, #32
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	f002 021f 	and.w	r2, r2, #31
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d13a      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e0b2      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a42:	fa93 f3a3 	rbit	r3, r3
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	fab3 f383 	clz	r3, r3
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	095b      	lsrs	r3, r3, #5
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	f043 0301 	orr.w	r3, r3, #1
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_RCC_ClockConfig+0x1a0>
 8002a5e:	4b31      	ldr	r3, [pc, #196]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	e00d      	b.n	8002a80 <HAL_RCC_ClockConfig+0x1bc>
 8002a64:	2302      	movs	r3, #2
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	fa93 f3a3 	rbit	r3, r3
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a70:	2302      	movs	r3, #2
 8002a72:	623b      	str	r3, [r7, #32]
 8002a74:	6a3b      	ldr	r3, [r7, #32]
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	61fb      	str	r3, [r7, #28]
 8002a7c:	4b29      	ldr	r3, [pc, #164]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	2202      	movs	r2, #2
 8002a82:	61ba      	str	r2, [r7, #24]
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	fa92 f2a2 	rbit	r2, r2
 8002a8a:	617a      	str	r2, [r7, #20]
  return result;
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	fab2 f282 	clz	r2, r2
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f042 0220 	orr.w	r2, r2, #32
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	f002 021f 	and.w	r2, r2, #31
 8002a9e:	2101      	movs	r1, #1
 8002aa0:	fa01 f202 	lsl.w	r2, r1, r2
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e079      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aae:	4b1d      	ldr	r3, [pc, #116]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f023 0203 	bic.w	r2, r3, #3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	491a      	ldr	r1, [pc, #104]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ac0:	f7fe fcfa 	bl	80014b8 <HAL_GetTick>
 8002ac4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac6:	e00a      	b.n	8002ade <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac8:	f7fe fcf6 	bl	80014b8 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e061      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	4b11      	ldr	r3, [pc, #68]	; (8002b24 <HAL_RCC_ClockConfig+0x260>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 020c 	and.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d1eb      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0307 	and.w	r3, r3, #7
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d214      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f023 0207 	bic.w	r2, r3, #7
 8002b06:	4906      	ldr	r1, [pc, #24]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_RCC_ClockConfig+0x25c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e040      	b.n	8002ba2 <HAL_RCC_ClockConfig+0x2de>
 8002b20:	40022000 	.word	0x40022000
 8002b24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b34:	4b1d      	ldr	r3, [pc, #116]	; (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	491a      	ldr	r1, [pc, #104]	; (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b52:	4b16      	ldr	r3, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	4912      	ldr	r1, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b66:	f000 f829 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b6a:	4601      	mov	r1, r0
 8002b6c:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <HAL_RCC_ClockConfig+0x2e8>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b74:	22f0      	movs	r2, #240	; 0xf0
 8002b76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	fa92 f2a2 	rbit	r2, r2
 8002b7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	fab2 f282 	clz	r2, r2
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	40d3      	lsrs	r3, r2
 8002b8a:	4a09      	ldr	r2, [pc, #36]	; (8002bb0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002b92:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_RCC_ClockConfig+0x2f0>)
 8002b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002b96:	4b08      	ldr	r3, [pc, #32]	; (8002bb8 <HAL_RCC_ClockConfig+0x2f4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f7fe fc48 	bl	8001430 <HAL_InitTick>
  
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3778      	adds	r7, #120	; 0x78
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	08007008 	.word	0x08007008
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b08b      	sub	sp, #44	; 0x2c
 8002bc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d002      	beq.n	8002bec <HAL_RCC_GetSysClockFreq+0x30>
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_GetSysClockFreq+0x36>
 8002bea:	e03f      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bee:	623b      	str	r3, [r7, #32]
      break;
 8002bf0:	e03f      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002bf8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002bfc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	fa92 f2a2 	rbit	r2, r2
 8002c04:	607a      	str	r2, [r7, #4]
  return result;
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	fab2 f282 	clz	r2, r2
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	40d3      	lsrs	r3, r2
 8002c10:	4a1d      	ldr	r2, [pc, #116]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c12:	5cd3      	ldrb	r3, [r2, r3]
 8002c14:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	220f      	movs	r2, #15
 8002c20:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	60fa      	str	r2, [r7, #12]
  return result;
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	40d3      	lsrs	r3, r2
 8002c34:	4a15      	ldr	r2, [pc, #84]	; (8002c8c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c44:	4a0f      	ldr	r2, [pc, #60]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	627b      	str	r3, [r7, #36]	; 0x24
 8002c54:	e007      	b.n	8002c66 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002c56:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c68:	623b      	str	r3, [r7, #32]
      break;
 8002c6a:	e002      	b.n	8002c72 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c6e:	623b      	str	r3, [r7, #32]
      break;
 8002c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	372c      	adds	r7, #44	; 0x2c
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	40021000 	.word	0x40021000
 8002c84:	007a1200 	.word	0x007a1200
 8002c88:	08007020 	.word	0x08007020
 8002c8c:	08007030 	.word	0x08007030

08002c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c96:	681b      	ldr	r3, [r3, #0]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	20000000 	.word	0x20000000

08002ca8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002cae:	f7ff ffef 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cb2:	4601      	mov	r1, r0
 8002cb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002cbc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002cc0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	fa92 f2a2 	rbit	r2, r2
 8002cc8:	603a      	str	r2, [r7, #0]
  return result;
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	fab2 f282 	clz	r2, r2
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	40d3      	lsrs	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002cd6:	5cd3      	ldrb	r3, [r2, r3]
 8002cd8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08007018 	.word	0x08007018

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002cf2:	f7ff ffcd 	bl	8002c90 <HAL_RCC_GetHCLKFreq>
 8002cf6:	4601      	mov	r1, r0
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002d00:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002d04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	fa92 f2a2 	rbit	r2, r2
 8002d0c:	603a      	str	r2, [r7, #0]
  return result;
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	fab2 f282 	clz	r2, r2
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	40d3      	lsrs	r3, r2
 8002d18:	4a04      	ldr	r2, [pc, #16]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002d20:	4618      	mov	r0, r3
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	08007018 	.word	0x08007018

08002d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b092      	sub	sp, #72	; 0x48
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80d4 	beq.w	8002efc <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d54:	4b4e      	ldr	r3, [pc, #312]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d56:	69db      	ldr	r3, [r3, #28]
 8002d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10e      	bne.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d60:	4b4b      	ldr	r3, [pc, #300]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	4a4a      	ldr	r2, [pc, #296]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6a:	61d3      	str	r3, [r2, #28]
 8002d6c:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b45      	ldr	r3, [pc, #276]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a41      	ldr	r2, [pc, #260]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d94:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7fe fb8f 	bl	80014b8 <HAL_GetTick>
 8002d9a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7fe fb8b 	bl	80014b8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b64      	cmp	r3, #100	; 0x64
 8002daa:	d901      	bls.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e1d6      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dbc:	4b34      	ldr	r3, [pc, #208]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 8084 	beq.w	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d07c      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b26      	ldr	r3, [pc, #152]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	461a      	mov	r2, r3
 8002e06:	2301      	movs	r3, #1
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e0e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002e18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	4b1d      	ldr	r3, [pc, #116]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e2e:	4a18      	ldr	r2, [pc, #96]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e32:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d04b      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe fb3b 	bl	80014b8 <HAL_GetTick>
 8002e42:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe fb37 	bl	80014b8 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e180      	b.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e62:	fa93 f3a3 	rbit	r3, r3
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
 8002e68:	2302      	movs	r3, #2
 8002e6a:	623b      	str	r3, [r7, #32]
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	61fb      	str	r3, [r7, #28]
  return result;
 8002e74:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	fab3 f383 	clz	r3, r3
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	095b      	lsrs	r3, r3, #5
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b02      	cmp	r3, #2
 8002e88:	d108      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002e8a:	4b01      	ldr	r3, [pc, #4]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8c:	6a1b      	ldr	r3, [r3, #32]
 8002e8e:	e00d      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002e90:	40021000 	.word	0x40021000
 8002e94:	40007000 	.word	0x40007000
 8002e98:	10908100 	.word	0x10908100
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	4ba0      	ldr	r3, [pc, #640]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2202      	movs	r2, #2
 8002eae:	613a      	str	r2, [r7, #16]
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	fa92 f2a2 	rbit	r2, r2
 8002eb6:	60fa      	str	r2, [r7, #12]
  return result;
 8002eb8:	68fa      	ldr	r2, [r7, #12]
 8002eba:	fab2 f282 	clz	r2, r2
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	f002 021f 	and.w	r2, r2, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0b7      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ed6:	4b95      	ldr	r3, [pc, #596]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4992      	ldr	r1, [pc, #584]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ee8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d105      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef0:	4b8e      	ldr	r3, [pc, #568]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	4a8d      	ldr	r2, [pc, #564]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002efa:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0301 	and.w	r3, r3, #1
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f08:	4b88      	ldr	r3, [pc, #544]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f023 0203 	bic.w	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	4985      	ldr	r1, [pc, #532]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	497e      	ldr	r1, [pc, #504]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f44:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	4976      	ldr	r1, [pc, #472]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f62:	4b72      	ldr	r3, [pc, #456]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f023 0210 	bic.w	r2, r3, #16
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	496f      	ldr	r1, [pc, #444]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002f80:	4b6a      	ldr	r3, [pc, #424]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8c:	4967      	ldr	r1, [pc, #412]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f9e:	4b63      	ldr	r3, [pc, #396]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	f023 0220 	bic.w	r2, r3, #32
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	4960      	ldr	r1, [pc, #384]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fbc:	4b5b      	ldr	r3, [pc, #364]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	4958      	ldr	r1, [pc, #352]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d008      	beq.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	4951      	ldr	r1, [pc, #324]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0310 	and.w	r3, r3, #16
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ff8:	4b4c      	ldr	r3, [pc, #304]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4949      	ldr	r1, [pc, #292]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003006:	4313      	orrs	r3, r2
 8003008:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003012:	2b00      	cmp	r3, #0
 8003014:	d008      	beq.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003016:	4b45      	ldr	r3, [pc, #276]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4942      	ldr	r1, [pc, #264]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003034:	4b3d      	ldr	r3, [pc, #244]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	493a      	ldr	r1, [pc, #232]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800304e:	2b00      	cmp	r3, #0
 8003050:	d008      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003052:	4b36      	ldr	r3, [pc, #216]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800305e:	4933      	ldr	r1, [pc, #204]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003060:	4313      	orrs	r3, r2
 8003062:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003070:	4b2e      	ldr	r3, [pc, #184]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	492b      	ldr	r1, [pc, #172]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800307e:	4313      	orrs	r3, r2
 8003080:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800308e:	4b27      	ldr	r3, [pc, #156]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	4924      	ldr	r1, [pc, #144]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800309c:	4313      	orrs	r3, r2
 800309e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80030ac:	4b1f      	ldr	r3, [pc, #124]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	491c      	ldr	r1, [pc, #112]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d008      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80030ca:	4b18      	ldr	r3, [pc, #96]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	4915      	ldr	r1, [pc, #84]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80030e8:	4b10      	ldr	r3, [pc, #64]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030f4:	490d      	ldr	r1, [pc, #52]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d008      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003106:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003112:	4906      	ldr	r1, [pc, #24]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003114:	4313      	orrs	r3, r2
 8003116:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003124:	4b01      	ldr	r3, [pc, #4]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8003126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003128:	e002      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800312a:	bf00      	nop
 800312c:	40021000 	.word	0x40021000
 8003130:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003138:	490b      	ldr	r1, [pc, #44]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800313a:	4313      	orrs	r3, r2
 800313c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d008      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003156:	4904      	ldr	r1, [pc, #16]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003158:	4313      	orrs	r3, r2
 800315a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	4618      	mov	r0, r3
 8003160:	3748      	adds	r7, #72	; 0x48
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000

0800316c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e097      	b.n	80032b0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7fd ff41 	bl	800101c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80031b0:	f023 0307 	bic.w	r3, r3, #7
 80031b4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	3304      	adds	r3, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4610      	mov	r0, r2
 80031c2:	f000 f907 	bl	80033d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ee:	f023 0303 	bic.w	r3, r3, #3
 80031f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	699b      	ldr	r3, [r3, #24]
 80031fc:	021b      	lsls	r3, r3, #8
 80031fe:	4313      	orrs	r3, r2
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	4313      	orrs	r3, r2
 8003204:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800320c:	f023 030c 	bic.w	r3, r3, #12
 8003210:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003218:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	69db      	ldr	r3, [r3, #28]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	4313      	orrs	r3, r2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	011a      	lsls	r2, r3, #4
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	031b      	lsls	r3, r3, #12
 800323c:	4313      	orrs	r3, r2
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800324a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003252:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	4313      	orrs	r3, r2
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2201      	movs	r2, #1
 8003292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2201      	movs	r2, #1
 80032a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032c8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032d0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d110      	bne.n	800330a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d102      	bne.n	80032f4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ee:	7b7b      	ldrb	r3, [r7, #13]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d001      	beq.n	80032f8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e069      	b.n	80033cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003308:	e031      	b.n	800336e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b04      	cmp	r3, #4
 800330e:	d110      	bne.n	8003332 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003310:	7bbb      	ldrb	r3, [r7, #14]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003316:	7b3b      	ldrb	r3, [r7, #12]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d001      	beq.n	8003320 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e055      	b.n	80033cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003330:	e01d      	b.n	800336e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d108      	bne.n	800334a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003338:	7bbb      	ldrb	r3, [r7, #14]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800333e:	7b7b      	ldrb	r3, [r7, #13]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d102      	bne.n	800334a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003344:	7b3b      	ldrb	r3, [r7, #12]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d001      	beq.n	800334e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e03e      	b.n	80033cc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2202      	movs	r2, #2
 8003352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2202      	movs	r2, #2
 800336a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d003      	beq.n	800337c <HAL_TIM_Encoder_Start+0xc4>
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	2b04      	cmp	r3, #4
 8003378:	d008      	beq.n	800338c <HAL_TIM_Encoder_Start+0xd4>
 800337a:	e00f      	b.n	800339c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f8c3 	bl	8003510 <TIM_CCxChannelCmd>
      break;
 800338a:	e016      	b.n	80033ba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2201      	movs	r2, #1
 8003392:	2104      	movs	r1, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f000 f8bb 	bl	8003510 <TIM_CCxChannelCmd>
      break;
 800339a:	e00e      	b.n	80033ba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2201      	movs	r2, #1
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f000 f8b3 	bl	8003510 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2104      	movs	r1, #4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 f8ac 	bl	8003510 <TIM_CCxChannelCmd>
      break;
 80033b8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033ca:	2300      	movs	r3, #0
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3710      	adds	r7, #16
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a42      	ldr	r2, [pc, #264]	; (80034f0 <TIM_Base_SetConfig+0x11c>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d013      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f2:	d00f      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a3f      	ldr	r2, [pc, #252]	; (80034f4 <TIM_Base_SetConfig+0x120>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d00b      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	4a3e      	ldr	r2, [pc, #248]	; (80034f8 <TIM_Base_SetConfig+0x124>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d007      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a3d      	ldr	r2, [pc, #244]	; (80034fc <TIM_Base_SetConfig+0x128>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d003      	beq.n	8003414 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3c      	ldr	r2, [pc, #240]	; (8003500 <TIM_Base_SetConfig+0x12c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d108      	bne.n	8003426 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	4313      	orrs	r3, r2
 8003424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <TIM_Base_SetConfig+0x11c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d01f      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d01b      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a2e      	ldr	r2, [pc, #184]	; (80034f4 <TIM_Base_SetConfig+0x120>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d017      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a2d      	ldr	r2, [pc, #180]	; (80034f8 <TIM_Base_SetConfig+0x124>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d013      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <TIM_Base_SetConfig+0x128>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d00f      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2c      	ldr	r2, [pc, #176]	; (8003504 <TIM_Base_SetConfig+0x130>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d00b      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2b      	ldr	r2, [pc, #172]	; (8003508 <TIM_Base_SetConfig+0x134>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d007      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2a      	ldr	r2, [pc, #168]	; (800350c <TIM_Base_SetConfig+0x138>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d003      	beq.n	800346e <TIM_Base_SetConfig+0x9a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a25      	ldr	r2, [pc, #148]	; (8003500 <TIM_Base_SetConfig+0x12c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d108      	bne.n	8003480 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	4313      	orrs	r3, r2
 800347e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <TIM_Base_SetConfig+0x11c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d013      	beq.n	80034d4 <TIM_Base_SetConfig+0x100>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a13      	ldr	r2, [pc, #76]	; (80034fc <TIM_Base_SetConfig+0x128>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d00f      	beq.n	80034d4 <TIM_Base_SetConfig+0x100>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <TIM_Base_SetConfig+0x130>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00b      	beq.n	80034d4 <TIM_Base_SetConfig+0x100>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a12      	ldr	r2, [pc, #72]	; (8003508 <TIM_Base_SetConfig+0x134>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d007      	beq.n	80034d4 <TIM_Base_SetConfig+0x100>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a11      	ldr	r2, [pc, #68]	; (800350c <TIM_Base_SetConfig+0x138>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_Base_SetConfig+0x100>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0c      	ldr	r2, [pc, #48]	; (8003500 <TIM_Base_SetConfig+0x12c>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d103      	bne.n	80034dc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	615a      	str	r2, [r3, #20]
}
 80034e2:	bf00      	nop
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	40012c00 	.word	0x40012c00
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40000800 	.word	0x40000800
 80034fc:	40013400 	.word	0x40013400
 8003500:	40015000 	.word	0x40015000
 8003504:	40014000 	.word	0x40014000
 8003508:	40014400 	.word	0x40014400
 800350c:	40014800 	.word	0x40014800

08003510 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2201      	movs	r2, #1
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a1a      	ldr	r2, [r3, #32]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	43db      	mvns	r3, r3
 8003532:	401a      	ands	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6a1a      	ldr	r2, [r3, #32]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 031f 	and.w	r3, r3, #31
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	fa01 f303 	lsl.w	r3, r1, r3
 8003548:	431a      	orrs	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
	...

0800355c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003570:	2302      	movs	r3, #2
 8003572:	e06d      	b.n	8003650 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a30      	ldr	r2, [pc, #192]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d009      	beq.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a2f      	ldr	r2, [pc, #188]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d004      	beq.n	80035b2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d108      	bne.n	80035c4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80035b8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d01d      	beq.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f0:	d018      	beq.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1c      	ldr	r2, [pc, #112]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d013      	beq.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1a      	ldr	r2, [pc, #104]	; (800366c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a15      	ldr	r2, [pc, #84]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a16      	ldr	r2, [pc, #88]	; (8003670 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a11      	ldr	r2, [pc, #68]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d10c      	bne.n	800363e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800362a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	4313      	orrs	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40012c00 	.word	0x40012c00
 8003660:	40013400 	.word	0x40013400
 8003664:	40015000 	.word	0x40015000
 8003668:	40000400 	.word	0x40000400
 800366c:	40000800 	.word	0x40000800
 8003670:	40014000 	.word	0x40014000

08003674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d101      	bne.n	8003686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e040      	b.n	8003708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd fd02 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	; 0x24
 80036a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0201 	bic.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f92e 	bl	8003914 <UART_SetConfig>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e022      	b.n	8003708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d002      	beq.n	80036d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 faf8 	bl	8003cc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685a      	ldr	r2, [r3, #4]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fb7f 	bl	8003e04 <UART_CheckIdleState>
 8003706:	4603      	mov	r3, r0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	; 0x28
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003724:	2b20      	cmp	r3, #32
 8003726:	f040 8082 	bne.w	800382e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_UART_Transmit+0x26>
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e07a      	b.n	8003830 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_UART_Transmit+0x38>
 8003744:	2302      	movs	r3, #2
 8003746:	e073      	b.n	8003830 <HAL_UART_Transmit+0x120>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2221      	movs	r2, #33	; 0x21
 800375c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800375e:	f7fd feab 	bl	80014b8 <HAL_GetTick>
 8003762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377c:	d108      	bne.n	8003790 <HAL_UART_Transmit+0x80>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d104      	bne.n	8003790 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003786:	2300      	movs	r3, #0
 8003788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	e003      	b.n	8003798 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80037a0:	e02d      	b.n	80037fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2200      	movs	r2, #0
 80037aa:	2180      	movs	r1, #128	; 0x80
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fb72 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e039      	b.n	8003830 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c2:	69bb      	ldr	r3, [r7, #24]
 80037c4:	881a      	ldrh	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ce:	b292      	uxth	r2, r2
 80037d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	3302      	adds	r3, #2
 80037d6:	61bb      	str	r3, [r7, #24]
 80037d8:	e008      	b.n	80037ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	781a      	ldrb	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b292      	uxth	r2, r2
 80037e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1cb      	bne.n	80037a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2140      	movs	r1, #64	; 0x40
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fb3e 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e005      	b.n	8003830 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2220      	movs	r2, #32
 8003828:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3720      	adds	r7, #32
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003838:	b480      	push	{r7}
 800383a:	b08b      	sub	sp, #44	; 0x2c
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	4613      	mov	r3, r2
 8003844:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800384a:	2b20      	cmp	r3, #32
 800384c:	d156      	bne.n	80038fc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_UART_Transmit_IT+0x22>
 8003854:	88fb      	ldrh	r3, [r7, #6]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e04f      	b.n	80038fe <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_UART_Transmit_IT+0x34>
 8003868:	2302      	movs	r3, #2
 800386a:	e048      	b.n	80038fe <HAL_UART_Transmit_IT+0xc6>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2221      	movs	r2, #33	; 0x21
 800389c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a6:	d107      	bne.n	80038b8 <HAL_UART_Transmit_IT+0x80>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d103      	bne.n	80038b8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a16      	ldr	r2, [pc, #88]	; (800390c <HAL_UART_Transmit_IT+0xd4>)
 80038b4:	669a      	str	r2, [r3, #104]	; 0x68
 80038b6:	e002      	b.n	80038be <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4a15      	ldr	r2, [pc, #84]	; (8003910 <HAL_UART_Transmit_IT+0xd8>)
 80038bc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	e853 3f00 	ldrex	r3, [r3]
 80038d2:	613b      	str	r3, [r7, #16]
   return(result);
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	461a      	mov	r2, r3
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	69f9      	ldr	r1, [r7, #28]
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e6      	bne.n	80038c6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e000      	b.n	80038fe <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80038fc:	2302      	movs	r3, #2
  }
}
 80038fe:	4618      	mov	r0, r3
 8003900:	372c      	adds	r7, #44	; 0x2c
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	080040d7 	.word	0x080040d7
 8003910:	0800401f 	.word	0x0800401f

08003914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b088      	sub	sp, #32
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4bab      	ldr	r3, [pc, #684]	; (8003bec <UART_SetConfig+0x2d8>)
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	6979      	ldr	r1, [r7, #20]
 8003948:	430b      	orrs	r3, r1
 800394a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	697a      	ldr	r2, [r7, #20]
 800396e:	4313      	orrs	r3, r2
 8003970:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a99      	ldr	r2, [pc, #612]	; (8003bf0 <UART_SetConfig+0x2dc>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d120      	bne.n	80039d2 <UART_SetConfig+0xbe>
 8003990:	4b98      	ldr	r3, [pc, #608]	; (8003bf4 <UART_SetConfig+0x2e0>)
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b03      	cmp	r3, #3
 800399a:	d817      	bhi.n	80039cc <UART_SetConfig+0xb8>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <UART_SetConfig+0x90>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039c1 	.word	0x080039c1
 80039ac:	080039c7 	.word	0x080039c7
 80039b0:	080039bb 	.word	0x080039bb
 80039b4:	2301      	movs	r3, #1
 80039b6:	77fb      	strb	r3, [r7, #31]
 80039b8:	e0b5      	b.n	8003b26 <UART_SetConfig+0x212>
 80039ba:	2302      	movs	r3, #2
 80039bc:	77fb      	strb	r3, [r7, #31]
 80039be:	e0b2      	b.n	8003b26 <UART_SetConfig+0x212>
 80039c0:	2304      	movs	r3, #4
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e0af      	b.n	8003b26 <UART_SetConfig+0x212>
 80039c6:	2308      	movs	r3, #8
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e0ac      	b.n	8003b26 <UART_SetConfig+0x212>
 80039cc:	2310      	movs	r3, #16
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e0a9      	b.n	8003b26 <UART_SetConfig+0x212>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a88      	ldr	r2, [pc, #544]	; (8003bf8 <UART_SetConfig+0x2e4>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d124      	bne.n	8003a26 <UART_SetConfig+0x112>
 80039dc:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <UART_SetConfig+0x2e0>)
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039e4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e8:	d011      	beq.n	8003a0e <UART_SetConfig+0xfa>
 80039ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039ee:	d817      	bhi.n	8003a20 <UART_SetConfig+0x10c>
 80039f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039f4:	d011      	beq.n	8003a1a <UART_SetConfig+0x106>
 80039f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039fa:	d811      	bhi.n	8003a20 <UART_SetConfig+0x10c>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <UART_SetConfig+0xf4>
 8003a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a04:	d006      	beq.n	8003a14 <UART_SetConfig+0x100>
 8003a06:	e00b      	b.n	8003a20 <UART_SetConfig+0x10c>
 8003a08:	2300      	movs	r3, #0
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e08b      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e088      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a14:	2304      	movs	r3, #4
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e085      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	77fb      	strb	r3, [r7, #31]
 8003a1e:	e082      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a20:	2310      	movs	r3, #16
 8003a22:	77fb      	strb	r3, [r7, #31]
 8003a24:	e07f      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a74      	ldr	r2, [pc, #464]	; (8003bfc <UART_SetConfig+0x2e8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d124      	bne.n	8003a7a <UART_SetConfig+0x166>
 8003a30:	4b70      	ldr	r3, [pc, #448]	; (8003bf4 <UART_SetConfig+0x2e0>)
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003a38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a3c:	d011      	beq.n	8003a62 <UART_SetConfig+0x14e>
 8003a3e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003a42:	d817      	bhi.n	8003a74 <UART_SetConfig+0x160>
 8003a44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a48:	d011      	beq.n	8003a6e <UART_SetConfig+0x15a>
 8003a4a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003a4e:	d811      	bhi.n	8003a74 <UART_SetConfig+0x160>
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d003      	beq.n	8003a5c <UART_SetConfig+0x148>
 8003a54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a58:	d006      	beq.n	8003a68 <UART_SetConfig+0x154>
 8003a5a:	e00b      	b.n	8003a74 <UART_SetConfig+0x160>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	77fb      	strb	r3, [r7, #31]
 8003a60:	e061      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a62:	2302      	movs	r3, #2
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e05e      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a68:	2304      	movs	r3, #4
 8003a6a:	77fb      	strb	r3, [r7, #31]
 8003a6c:	e05b      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a6e:	2308      	movs	r3, #8
 8003a70:	77fb      	strb	r3, [r7, #31]
 8003a72:	e058      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a74:	2310      	movs	r3, #16
 8003a76:	77fb      	strb	r3, [r7, #31]
 8003a78:	e055      	b.n	8003b26 <UART_SetConfig+0x212>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a60      	ldr	r2, [pc, #384]	; (8003c00 <UART_SetConfig+0x2ec>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d124      	bne.n	8003ace <UART_SetConfig+0x1ba>
 8003a84:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <UART_SetConfig+0x2e0>)
 8003a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003a8c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a90:	d011      	beq.n	8003ab6 <UART_SetConfig+0x1a2>
 8003a92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003a96:	d817      	bhi.n	8003ac8 <UART_SetConfig+0x1b4>
 8003a98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a9c:	d011      	beq.n	8003ac2 <UART_SetConfig+0x1ae>
 8003a9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003aa2:	d811      	bhi.n	8003ac8 <UART_SetConfig+0x1b4>
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <UART_SetConfig+0x19c>
 8003aa8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aac:	d006      	beq.n	8003abc <UART_SetConfig+0x1a8>
 8003aae:	e00b      	b.n	8003ac8 <UART_SetConfig+0x1b4>
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	77fb      	strb	r3, [r7, #31]
 8003ab4:	e037      	b.n	8003b26 <UART_SetConfig+0x212>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	77fb      	strb	r3, [r7, #31]
 8003aba:	e034      	b.n	8003b26 <UART_SetConfig+0x212>
 8003abc:	2304      	movs	r3, #4
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e031      	b.n	8003b26 <UART_SetConfig+0x212>
 8003ac2:	2308      	movs	r3, #8
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e02e      	b.n	8003b26 <UART_SetConfig+0x212>
 8003ac8:	2310      	movs	r3, #16
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e02b      	b.n	8003b26 <UART_SetConfig+0x212>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a4c      	ldr	r2, [pc, #304]	; (8003c04 <UART_SetConfig+0x2f0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d124      	bne.n	8003b22 <UART_SetConfig+0x20e>
 8003ad8:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <UART_SetConfig+0x2e0>)
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003ae0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ae4:	d011      	beq.n	8003b0a <UART_SetConfig+0x1f6>
 8003ae6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aea:	d817      	bhi.n	8003b1c <UART_SetConfig+0x208>
 8003aec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af0:	d011      	beq.n	8003b16 <UART_SetConfig+0x202>
 8003af2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003af6:	d811      	bhi.n	8003b1c <UART_SetConfig+0x208>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <UART_SetConfig+0x1f0>
 8003afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b00:	d006      	beq.n	8003b10 <UART_SetConfig+0x1fc>
 8003b02:	e00b      	b.n	8003b1c <UART_SetConfig+0x208>
 8003b04:	2300      	movs	r3, #0
 8003b06:	77fb      	strb	r3, [r7, #31]
 8003b08:	e00d      	b.n	8003b26 <UART_SetConfig+0x212>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	77fb      	strb	r3, [r7, #31]
 8003b0e:	e00a      	b.n	8003b26 <UART_SetConfig+0x212>
 8003b10:	2304      	movs	r3, #4
 8003b12:	77fb      	strb	r3, [r7, #31]
 8003b14:	e007      	b.n	8003b26 <UART_SetConfig+0x212>
 8003b16:	2308      	movs	r3, #8
 8003b18:	77fb      	strb	r3, [r7, #31]
 8003b1a:	e004      	b.n	8003b26 <UART_SetConfig+0x212>
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	77fb      	strb	r3, [r7, #31]
 8003b20:	e001      	b.n	8003b26 <UART_SetConfig+0x212>
 8003b22:	2310      	movs	r3, #16
 8003b24:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b2e:	d16d      	bne.n	8003c0c <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8003b30:	7ffb      	ldrb	r3, [r7, #31]
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d827      	bhi.n	8003b86 <UART_SetConfig+0x272>
 8003b36:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <UART_SetConfig+0x228>)
 8003b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3c:	08003b61 	.word	0x08003b61
 8003b40:	08003b69 	.word	0x08003b69
 8003b44:	08003b71 	.word	0x08003b71
 8003b48:	08003b87 	.word	0x08003b87
 8003b4c:	08003b77 	.word	0x08003b77
 8003b50:	08003b87 	.word	0x08003b87
 8003b54:	08003b87 	.word	0x08003b87
 8003b58:	08003b87 	.word	0x08003b87
 8003b5c:	08003b7f 	.word	0x08003b7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b60:	f7ff f8a2 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003b64:	61b8      	str	r0, [r7, #24]
        break;
 8003b66:	e013      	b.n	8003b90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b68:	f7ff f8c0 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003b6c:	61b8      	str	r0, [r7, #24]
        break;
 8003b6e:	e00f      	b.n	8003b90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <UART_SetConfig+0x2f4>)
 8003b72:	61bb      	str	r3, [r7, #24]
        break;
 8003b74:	e00c      	b.n	8003b90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b76:	f7ff f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003b7a:	61b8      	str	r0, [r7, #24]
        break;
 8003b7c:	e008      	b.n	8003b90 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b82:	61bb      	str	r3, [r7, #24]
        break;
 8003b84:	e004      	b.n	8003b90 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8086 	beq.w	8003ca4 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	005a      	lsls	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	085b      	lsrs	r3, r3, #1
 8003ba2:	441a      	add	r2, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	d916      	bls.n	8003be4 <UART_SetConfig+0x2d0>
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bbc:	d212      	bcs.n	8003be4 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f023 030f 	bic.w	r3, r3, #15
 8003bc6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	085b      	lsrs	r3, r3, #1
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f003 0307 	and.w	r3, r3, #7
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	89fb      	ldrh	r3, [r7, #14]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	89fa      	ldrh	r2, [r7, #14]
 8003be0:	60da      	str	r2, [r3, #12]
 8003be2:	e05f      	b.n	8003ca4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	77bb      	strb	r3, [r7, #30]
 8003be8:	e05c      	b.n	8003ca4 <UART_SetConfig+0x390>
 8003bea:	bf00      	nop
 8003bec:	efff69f3 	.word	0xefff69f3
 8003bf0:	40013800 	.word	0x40013800
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40004400 	.word	0x40004400
 8003bfc:	40004800 	.word	0x40004800
 8003c00:	40004c00 	.word	0x40004c00
 8003c04:	40005000 	.word	0x40005000
 8003c08:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0c:	7ffb      	ldrb	r3, [r7, #31]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d827      	bhi.n	8003c62 <UART_SetConfig+0x34e>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0x304>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c63 	.word	0x08003c63
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c63 	.word	0x08003c63
 8003c30:	08003c63 	.word	0x08003c63
 8003c34:	08003c63 	.word	0x08003c63
 8003c38:	08003c5b 	.word	0x08003c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7ff f834 	bl	8002ca8 <HAL_RCC_GetPCLK1Freq>
 8003c40:	61b8      	str	r0, [r7, #24]
        break;
 8003c42:	e013      	b.n	8003c6c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c44:	f7ff f852 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003c48:	61b8      	str	r0, [r7, #24]
        break;
 8003c4a:	e00f      	b.n	8003c6c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4b1b      	ldr	r3, [pc, #108]	; (8003cbc <UART_SetConfig+0x3a8>)
 8003c4e:	61bb      	str	r3, [r7, #24]
        break;
 8003c50:	e00c      	b.n	8003c6c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7fe ffb3 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8003c56:	61b8      	str	r0, [r7, #24]
        break;
 8003c58:	e008      	b.n	8003c6c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5e:	61bb      	str	r3, [r7, #24]
        break;
 8003c60:	e004      	b.n	8003c6c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	77bb      	strb	r3, [r7, #30]
        break;
 8003c6a:	bf00      	nop
    }

    if (pclk != 0U)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d018      	beq.n	8003ca4 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	085a      	lsrs	r2, r3, #1
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	441a      	add	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	d908      	bls.n	8003ca0 <UART_SetConfig+0x38c>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d204      	bcs.n	8003ca0 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	60da      	str	r2, [r3, #12]
 8003c9e:	e001      	b.n	8003ca4 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cb0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	007a1200 	.word	0x007a1200

08003cc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d00a      	beq.n	8003cea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00a      	beq.n	8003d0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00a      	beq.n	8003d2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	430a      	orrs	r2, r1
 8003d2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d00a      	beq.n	8003d72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d76:	f003 0320 	and.w	r3, r3, #32
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d01a      	beq.n	8003dd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dbe:	d10a      	bne.n	8003dd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d00a      	beq.n	8003df8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	430a      	orrs	r2, r1
 8003df6:	605a      	str	r2, [r3, #4]
  }
}
 8003df8:	bf00      	nop
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e14:	f7fd fb50 	bl	80014b8 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b08      	cmp	r3, #8
 8003e26:	d10e      	bne.n	8003e46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 f82d 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e023      	b.n	8003e8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b04      	cmp	r3, #4
 8003e52:	d10e      	bne.n	8003e72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f817 	bl	8003e96 <UART_WaitOnFlagUntilTimeout>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e00d      	b.n	8003e8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b09c      	sub	sp, #112	; 0x70
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	603b      	str	r3, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ea6:	e0a5      	b.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	f000 80a1 	beq.w	8003ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fd fb01 	bl	80014b8 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d13e      	bne.n	8003f46 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ece:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed0:	e853 3f00 	ldrex	r3, [r3]
 8003ed4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ed6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003edc:	667b      	str	r3, [r7, #100]	; 0x64
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ee8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003eec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003eee:	e841 2300 	strex	r3, r2, [r1]
 8003ef2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e6      	bne.n	8003ec8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	3308      	adds	r3, #8
 8003f00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	663b      	str	r3, [r7, #96]	; 0x60
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	3308      	adds	r3, #8
 8003f18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f22:	e841 2300 	strex	r3, r2, [r1]
 8003f26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1e5      	bne.n	8003efa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2220      	movs	r2, #32
 8003f38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e067      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d04f      	beq.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f62:	d147      	bne.n	8003ff4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	e853 3f00 	ldrex	r3, [r3]
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f94:	e841 2300 	strex	r3, r2, [r1]
 8003f98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1e6      	bne.n	8003f6e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	e853 3f00 	ldrex	r3, [r3]
 8003fae:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f023 0301 	bic.w	r3, r3, #1
 8003fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	3308      	adds	r3, #8
 8003fbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fc0:	623a      	str	r2, [r7, #32]
 8003fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc4:	69f9      	ldr	r1, [r7, #28]
 8003fc6:	6a3a      	ldr	r2, [r7, #32]
 8003fc8:	e841 2300 	strex	r3, r2, [r1]
 8003fcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d1e5      	bne.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2220      	movs	r2, #32
 8003fd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e010      	b.n	8004016 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	69da      	ldr	r2, [r3, #28]
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	bf0c      	ite	eq
 8004004:	2301      	moveq	r3, #1
 8004006:	2300      	movne	r3, #0
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	79fb      	ldrb	r3, [r7, #7]
 800400e:	429a      	cmp	r2, r3
 8004010:	f43f af4a 	beq.w	8003ea8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3770      	adds	r7, #112	; 0x70
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b08f      	sub	sp, #60	; 0x3c
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402a:	2b21      	cmp	r3, #33	; 0x21
 800402c:	d14d      	bne.n	80040ca <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004034:	b29b      	uxth	r3, r3
 8004036:	2b00      	cmp	r3, #0
 8004038:	d132      	bne.n	80040a0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	61fb      	str	r3, [r7, #28]
   return(result);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800405a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800405e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e6      	bne.n	800403a <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	60bb      	str	r3, [r7, #8]
   return(result);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004080:	633b      	str	r3, [r7, #48]	; 0x30
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	61bb      	str	r3, [r7, #24]
 800408c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6979      	ldr	r1, [r7, #20]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	613b      	str	r3, [r7, #16]
   return(result);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e6      	bne.n	800406c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800409e:	e014      	b.n	80040ca <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	b292      	uxth	r2, r2
 80040ac:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80040ca:	bf00      	nop
 80040cc:	373c      	adds	r7, #60	; 0x3c
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040d6:	b480      	push	{r7}
 80040d8:	b091      	sub	sp, #68	; 0x44
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040e2:	2b21      	cmp	r3, #33	; 0x21
 80040e4:	d151      	bne.n	800418a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d132      	bne.n	8004158 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	e853 3f00 	ldrex	r3, [r3]
 80040fe:	623b      	str	r3, [r7, #32]
   return(result);
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004106:	63bb      	str	r3, [r7, #56]	; 0x38
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	461a      	mov	r2, r3
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	633b      	str	r3, [r7, #48]	; 0x30
 8004112:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004114:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004118:	e841 2300 	strex	r3, r2, [r1]
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1e6      	bne.n	80040f2 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	60fb      	str	r3, [r7, #12]
   return(result);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004138:	637b      	str	r3, [r7, #52]	; 0x34
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	69b9      	ldr	r1, [r7, #24]
 8004148:	69fa      	ldr	r2, [r7, #28]
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	617b      	str	r3, [r7, #20]
   return(result);
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e6      	bne.n	8004124 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004156:	e018      	b.n	800418a <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	881a      	ldrh	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800416a:	b292      	uxth	r2, r2
 800416c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004172:	1c9a      	adds	r2, r3, #2
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800417e:	b29b      	uxth	r3, r3
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800418a:	bf00      	nop
 800418c:	3744      	adds	r7, #68	; 0x44
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <__errno>:
 8004198:	4b01      	ldr	r3, [pc, #4]	; (80041a0 <__errno+0x8>)
 800419a:	6818      	ldr	r0, [r3, #0]
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	2000000c 	.word	0x2000000c

080041a4 <__libc_init_array>:
 80041a4:	b570      	push	{r4, r5, r6, lr}
 80041a6:	4d0d      	ldr	r5, [pc, #52]	; (80041dc <__libc_init_array+0x38>)
 80041a8:	4c0d      	ldr	r4, [pc, #52]	; (80041e0 <__libc_init_array+0x3c>)
 80041aa:	1b64      	subs	r4, r4, r5
 80041ac:	10a4      	asrs	r4, r4, #2
 80041ae:	2600      	movs	r6, #0
 80041b0:	42a6      	cmp	r6, r4
 80041b2:	d109      	bne.n	80041c8 <__libc_init_array+0x24>
 80041b4:	4d0b      	ldr	r5, [pc, #44]	; (80041e4 <__libc_init_array+0x40>)
 80041b6:	4c0c      	ldr	r4, [pc, #48]	; (80041e8 <__libc_init_array+0x44>)
 80041b8:	f002 fecc 	bl	8006f54 <_init>
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	2600      	movs	r6, #0
 80041c2:	42a6      	cmp	r6, r4
 80041c4:	d105      	bne.n	80041d2 <__libc_init_array+0x2e>
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041cc:	4798      	blx	r3
 80041ce:	3601      	adds	r6, #1
 80041d0:	e7ee      	b.n	80041b0 <__libc_init_array+0xc>
 80041d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041d6:	4798      	blx	r3
 80041d8:	3601      	adds	r6, #1
 80041da:	e7f2      	b.n	80041c2 <__libc_init_array+0x1e>
 80041dc:	08007424 	.word	0x08007424
 80041e0:	08007424 	.word	0x08007424
 80041e4:	08007424 	.word	0x08007424
 80041e8:	08007428 	.word	0x08007428

080041ec <memset>:
 80041ec:	4402      	add	r2, r0
 80041ee:	4603      	mov	r3, r0
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d100      	bne.n	80041f6 <memset+0xa>
 80041f4:	4770      	bx	lr
 80041f6:	f803 1b01 	strb.w	r1, [r3], #1
 80041fa:	e7f9      	b.n	80041f0 <memset+0x4>

080041fc <__cvt>:
 80041fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004200:	ec55 4b10 	vmov	r4, r5, d0
 8004204:	2d00      	cmp	r5, #0
 8004206:	460e      	mov	r6, r1
 8004208:	4619      	mov	r1, r3
 800420a:	462b      	mov	r3, r5
 800420c:	bfbb      	ittet	lt
 800420e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004212:	461d      	movlt	r5, r3
 8004214:	2300      	movge	r3, #0
 8004216:	232d      	movlt	r3, #45	; 0x2d
 8004218:	700b      	strb	r3, [r1, #0]
 800421a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800421c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004220:	4691      	mov	r9, r2
 8004222:	f023 0820 	bic.w	r8, r3, #32
 8004226:	bfbc      	itt	lt
 8004228:	4622      	movlt	r2, r4
 800422a:	4614      	movlt	r4, r2
 800422c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004230:	d005      	beq.n	800423e <__cvt+0x42>
 8004232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004236:	d100      	bne.n	800423a <__cvt+0x3e>
 8004238:	3601      	adds	r6, #1
 800423a:	2102      	movs	r1, #2
 800423c:	e000      	b.n	8004240 <__cvt+0x44>
 800423e:	2103      	movs	r1, #3
 8004240:	ab03      	add	r3, sp, #12
 8004242:	9301      	str	r3, [sp, #4]
 8004244:	ab02      	add	r3, sp, #8
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	ec45 4b10 	vmov	d0, r4, r5
 800424c:	4653      	mov	r3, sl
 800424e:	4632      	mov	r2, r6
 8004250:	f000 fd02 	bl	8004c58 <_dtoa_r>
 8004254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004258:	4607      	mov	r7, r0
 800425a:	d102      	bne.n	8004262 <__cvt+0x66>
 800425c:	f019 0f01 	tst.w	r9, #1
 8004260:	d022      	beq.n	80042a8 <__cvt+0xac>
 8004262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004266:	eb07 0906 	add.w	r9, r7, r6
 800426a:	d110      	bne.n	800428e <__cvt+0x92>
 800426c:	783b      	ldrb	r3, [r7, #0]
 800426e:	2b30      	cmp	r3, #48	; 0x30
 8004270:	d10a      	bne.n	8004288 <__cvt+0x8c>
 8004272:	2200      	movs	r2, #0
 8004274:	2300      	movs	r3, #0
 8004276:	4620      	mov	r0, r4
 8004278:	4629      	mov	r1, r5
 800427a:	f7fc fc2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800427e:	b918      	cbnz	r0, 8004288 <__cvt+0x8c>
 8004280:	f1c6 0601 	rsb	r6, r6, #1
 8004284:	f8ca 6000 	str.w	r6, [sl]
 8004288:	f8da 3000 	ldr.w	r3, [sl]
 800428c:	4499      	add	r9, r3
 800428e:	2200      	movs	r2, #0
 8004290:	2300      	movs	r3, #0
 8004292:	4620      	mov	r0, r4
 8004294:	4629      	mov	r1, r5
 8004296:	f7fc fc1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800429a:	b108      	cbz	r0, 80042a0 <__cvt+0xa4>
 800429c:	f8cd 900c 	str.w	r9, [sp, #12]
 80042a0:	2230      	movs	r2, #48	; 0x30
 80042a2:	9b03      	ldr	r3, [sp, #12]
 80042a4:	454b      	cmp	r3, r9
 80042a6:	d307      	bcc.n	80042b8 <__cvt+0xbc>
 80042a8:	9b03      	ldr	r3, [sp, #12]
 80042aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80042ac:	1bdb      	subs	r3, r3, r7
 80042ae:	4638      	mov	r0, r7
 80042b0:	6013      	str	r3, [r2, #0]
 80042b2:	b004      	add	sp, #16
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b8:	1c59      	adds	r1, r3, #1
 80042ba:	9103      	str	r1, [sp, #12]
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e7f0      	b.n	80042a2 <__cvt+0xa6>

080042c0 <__exponent>:
 80042c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c2:	4603      	mov	r3, r0
 80042c4:	2900      	cmp	r1, #0
 80042c6:	bfb8      	it	lt
 80042c8:	4249      	neglt	r1, r1
 80042ca:	f803 2b02 	strb.w	r2, [r3], #2
 80042ce:	bfb4      	ite	lt
 80042d0:	222d      	movlt	r2, #45	; 0x2d
 80042d2:	222b      	movge	r2, #43	; 0x2b
 80042d4:	2909      	cmp	r1, #9
 80042d6:	7042      	strb	r2, [r0, #1]
 80042d8:	dd2a      	ble.n	8004330 <__exponent+0x70>
 80042da:	f10d 0407 	add.w	r4, sp, #7
 80042de:	46a4      	mov	ip, r4
 80042e0:	270a      	movs	r7, #10
 80042e2:	46a6      	mov	lr, r4
 80042e4:	460a      	mov	r2, r1
 80042e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80042ea:	fb07 1516 	mls	r5, r7, r6, r1
 80042ee:	3530      	adds	r5, #48	; 0x30
 80042f0:	2a63      	cmp	r2, #99	; 0x63
 80042f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80042f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80042fa:	4631      	mov	r1, r6
 80042fc:	dcf1      	bgt.n	80042e2 <__exponent+0x22>
 80042fe:	3130      	adds	r1, #48	; 0x30
 8004300:	f1ae 0502 	sub.w	r5, lr, #2
 8004304:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004308:	1c44      	adds	r4, r0, #1
 800430a:	4629      	mov	r1, r5
 800430c:	4561      	cmp	r1, ip
 800430e:	d30a      	bcc.n	8004326 <__exponent+0x66>
 8004310:	f10d 0209 	add.w	r2, sp, #9
 8004314:	eba2 020e 	sub.w	r2, r2, lr
 8004318:	4565      	cmp	r5, ip
 800431a:	bf88      	it	hi
 800431c:	2200      	movhi	r2, #0
 800431e:	4413      	add	r3, r2
 8004320:	1a18      	subs	r0, r3, r0
 8004322:	b003      	add	sp, #12
 8004324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800432a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800432e:	e7ed      	b.n	800430c <__exponent+0x4c>
 8004330:	2330      	movs	r3, #48	; 0x30
 8004332:	3130      	adds	r1, #48	; 0x30
 8004334:	7083      	strb	r3, [r0, #2]
 8004336:	70c1      	strb	r1, [r0, #3]
 8004338:	1d03      	adds	r3, r0, #4
 800433a:	e7f1      	b.n	8004320 <__exponent+0x60>

0800433c <_printf_float>:
 800433c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004340:	ed2d 8b02 	vpush	{d8}
 8004344:	b08d      	sub	sp, #52	; 0x34
 8004346:	460c      	mov	r4, r1
 8004348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800434c:	4616      	mov	r6, r2
 800434e:	461f      	mov	r7, r3
 8004350:	4605      	mov	r5, r0
 8004352:	f001 fb63 	bl	8005a1c <_localeconv_r>
 8004356:	f8d0 a000 	ldr.w	sl, [r0]
 800435a:	4650      	mov	r0, sl
 800435c:	f7fb ff40 	bl	80001e0 <strlen>
 8004360:	2300      	movs	r3, #0
 8004362:	930a      	str	r3, [sp, #40]	; 0x28
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	9305      	str	r3, [sp, #20]
 8004368:	f8d8 3000 	ldr.w	r3, [r8]
 800436c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004370:	3307      	adds	r3, #7
 8004372:	f023 0307 	bic.w	r3, r3, #7
 8004376:	f103 0208 	add.w	r2, r3, #8
 800437a:	f8c8 2000 	str.w	r2, [r8]
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004386:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800438a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800438e:	9307      	str	r3, [sp, #28]
 8004390:	f8cd 8018 	str.w	r8, [sp, #24]
 8004394:	ee08 0a10 	vmov	s16, r0
 8004398:	4b9f      	ldr	r3, [pc, #636]	; (8004618 <_printf_float+0x2dc>)
 800439a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800439e:	f04f 32ff 	mov.w	r2, #4294967295
 80043a2:	f7fc fbcb 	bl	8000b3c <__aeabi_dcmpun>
 80043a6:	bb88      	cbnz	r0, 800440c <_printf_float+0xd0>
 80043a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043ac:	4b9a      	ldr	r3, [pc, #616]	; (8004618 <_printf_float+0x2dc>)
 80043ae:	f04f 32ff 	mov.w	r2, #4294967295
 80043b2:	f7fc fba5 	bl	8000b00 <__aeabi_dcmple>
 80043b6:	bb48      	cbnz	r0, 800440c <_printf_float+0xd0>
 80043b8:	2200      	movs	r2, #0
 80043ba:	2300      	movs	r3, #0
 80043bc:	4640      	mov	r0, r8
 80043be:	4649      	mov	r1, r9
 80043c0:	f7fc fb94 	bl	8000aec <__aeabi_dcmplt>
 80043c4:	b110      	cbz	r0, 80043cc <_printf_float+0x90>
 80043c6:	232d      	movs	r3, #45	; 0x2d
 80043c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043cc:	4b93      	ldr	r3, [pc, #588]	; (800461c <_printf_float+0x2e0>)
 80043ce:	4894      	ldr	r0, [pc, #592]	; (8004620 <_printf_float+0x2e4>)
 80043d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80043d4:	bf94      	ite	ls
 80043d6:	4698      	movls	r8, r3
 80043d8:	4680      	movhi	r8, r0
 80043da:	2303      	movs	r3, #3
 80043dc:	6123      	str	r3, [r4, #16]
 80043de:	9b05      	ldr	r3, [sp, #20]
 80043e0:	f023 0204 	bic.w	r2, r3, #4
 80043e4:	6022      	str	r2, [r4, #0]
 80043e6:	f04f 0900 	mov.w	r9, #0
 80043ea:	9700      	str	r7, [sp, #0]
 80043ec:	4633      	mov	r3, r6
 80043ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80043f0:	4621      	mov	r1, r4
 80043f2:	4628      	mov	r0, r5
 80043f4:	f000 f9d8 	bl	80047a8 <_printf_common>
 80043f8:	3001      	adds	r0, #1
 80043fa:	f040 8090 	bne.w	800451e <_printf_float+0x1e2>
 80043fe:	f04f 30ff 	mov.w	r0, #4294967295
 8004402:	b00d      	add	sp, #52	; 0x34
 8004404:	ecbd 8b02 	vpop	{d8}
 8004408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800440c:	4642      	mov	r2, r8
 800440e:	464b      	mov	r3, r9
 8004410:	4640      	mov	r0, r8
 8004412:	4649      	mov	r1, r9
 8004414:	f7fc fb92 	bl	8000b3c <__aeabi_dcmpun>
 8004418:	b140      	cbz	r0, 800442c <_printf_float+0xf0>
 800441a:	464b      	mov	r3, r9
 800441c:	2b00      	cmp	r3, #0
 800441e:	bfbc      	itt	lt
 8004420:	232d      	movlt	r3, #45	; 0x2d
 8004422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004426:	487f      	ldr	r0, [pc, #508]	; (8004624 <_printf_float+0x2e8>)
 8004428:	4b7f      	ldr	r3, [pc, #508]	; (8004628 <_printf_float+0x2ec>)
 800442a:	e7d1      	b.n	80043d0 <_printf_float+0x94>
 800442c:	6863      	ldr	r3, [r4, #4]
 800442e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004432:	9206      	str	r2, [sp, #24]
 8004434:	1c5a      	adds	r2, r3, #1
 8004436:	d13f      	bne.n	80044b8 <_printf_float+0x17c>
 8004438:	2306      	movs	r3, #6
 800443a:	6063      	str	r3, [r4, #4]
 800443c:	9b05      	ldr	r3, [sp, #20]
 800443e:	6861      	ldr	r1, [r4, #4]
 8004440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004444:	2300      	movs	r3, #0
 8004446:	9303      	str	r3, [sp, #12]
 8004448:	ab0a      	add	r3, sp, #40	; 0x28
 800444a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800444e:	ab09      	add	r3, sp, #36	; 0x24
 8004450:	ec49 8b10 	vmov	d0, r8, r9
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	6022      	str	r2, [r4, #0]
 8004458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800445c:	4628      	mov	r0, r5
 800445e:	f7ff fecd 	bl	80041fc <__cvt>
 8004462:	9b06      	ldr	r3, [sp, #24]
 8004464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004466:	2b47      	cmp	r3, #71	; 0x47
 8004468:	4680      	mov	r8, r0
 800446a:	d108      	bne.n	800447e <_printf_float+0x142>
 800446c:	1cc8      	adds	r0, r1, #3
 800446e:	db02      	blt.n	8004476 <_printf_float+0x13a>
 8004470:	6863      	ldr	r3, [r4, #4]
 8004472:	4299      	cmp	r1, r3
 8004474:	dd41      	ble.n	80044fa <_printf_float+0x1be>
 8004476:	f1ab 0b02 	sub.w	fp, fp, #2
 800447a:	fa5f fb8b 	uxtb.w	fp, fp
 800447e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004482:	d820      	bhi.n	80044c6 <_printf_float+0x18a>
 8004484:	3901      	subs	r1, #1
 8004486:	465a      	mov	r2, fp
 8004488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800448c:	9109      	str	r1, [sp, #36]	; 0x24
 800448e:	f7ff ff17 	bl	80042c0 <__exponent>
 8004492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004494:	1813      	adds	r3, r2, r0
 8004496:	2a01      	cmp	r2, #1
 8004498:	4681      	mov	r9, r0
 800449a:	6123      	str	r3, [r4, #16]
 800449c:	dc02      	bgt.n	80044a4 <_printf_float+0x168>
 800449e:	6822      	ldr	r2, [r4, #0]
 80044a0:	07d2      	lsls	r2, r2, #31
 80044a2:	d501      	bpl.n	80044a8 <_printf_float+0x16c>
 80044a4:	3301      	adds	r3, #1
 80044a6:	6123      	str	r3, [r4, #16]
 80044a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d09c      	beq.n	80043ea <_printf_float+0xae>
 80044b0:	232d      	movs	r3, #45	; 0x2d
 80044b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044b6:	e798      	b.n	80043ea <_printf_float+0xae>
 80044b8:	9a06      	ldr	r2, [sp, #24]
 80044ba:	2a47      	cmp	r2, #71	; 0x47
 80044bc:	d1be      	bne.n	800443c <_printf_float+0x100>
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1bc      	bne.n	800443c <_printf_float+0x100>
 80044c2:	2301      	movs	r3, #1
 80044c4:	e7b9      	b.n	800443a <_printf_float+0xfe>
 80044c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80044ca:	d118      	bne.n	80044fe <_printf_float+0x1c2>
 80044cc:	2900      	cmp	r1, #0
 80044ce:	6863      	ldr	r3, [r4, #4]
 80044d0:	dd0b      	ble.n	80044ea <_printf_float+0x1ae>
 80044d2:	6121      	str	r1, [r4, #16]
 80044d4:	b913      	cbnz	r3, 80044dc <_printf_float+0x1a0>
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	07d0      	lsls	r0, r2, #31
 80044da:	d502      	bpl.n	80044e2 <_printf_float+0x1a6>
 80044dc:	3301      	adds	r3, #1
 80044de:	440b      	add	r3, r1
 80044e0:	6123      	str	r3, [r4, #16]
 80044e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80044e4:	f04f 0900 	mov.w	r9, #0
 80044e8:	e7de      	b.n	80044a8 <_printf_float+0x16c>
 80044ea:	b913      	cbnz	r3, 80044f2 <_printf_float+0x1b6>
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	07d2      	lsls	r2, r2, #31
 80044f0:	d501      	bpl.n	80044f6 <_printf_float+0x1ba>
 80044f2:	3302      	adds	r3, #2
 80044f4:	e7f4      	b.n	80044e0 <_printf_float+0x1a4>
 80044f6:	2301      	movs	r3, #1
 80044f8:	e7f2      	b.n	80044e0 <_printf_float+0x1a4>
 80044fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80044fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004500:	4299      	cmp	r1, r3
 8004502:	db05      	blt.n	8004510 <_printf_float+0x1d4>
 8004504:	6823      	ldr	r3, [r4, #0]
 8004506:	6121      	str	r1, [r4, #16]
 8004508:	07d8      	lsls	r0, r3, #31
 800450a:	d5ea      	bpl.n	80044e2 <_printf_float+0x1a6>
 800450c:	1c4b      	adds	r3, r1, #1
 800450e:	e7e7      	b.n	80044e0 <_printf_float+0x1a4>
 8004510:	2900      	cmp	r1, #0
 8004512:	bfd4      	ite	le
 8004514:	f1c1 0202 	rsble	r2, r1, #2
 8004518:	2201      	movgt	r2, #1
 800451a:	4413      	add	r3, r2
 800451c:	e7e0      	b.n	80044e0 <_printf_float+0x1a4>
 800451e:	6823      	ldr	r3, [r4, #0]
 8004520:	055a      	lsls	r2, r3, #21
 8004522:	d407      	bmi.n	8004534 <_printf_float+0x1f8>
 8004524:	6923      	ldr	r3, [r4, #16]
 8004526:	4642      	mov	r2, r8
 8004528:	4631      	mov	r1, r6
 800452a:	4628      	mov	r0, r5
 800452c:	47b8      	blx	r7
 800452e:	3001      	adds	r0, #1
 8004530:	d12c      	bne.n	800458c <_printf_float+0x250>
 8004532:	e764      	b.n	80043fe <_printf_float+0xc2>
 8004534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004538:	f240 80e0 	bls.w	80046fc <_printf_float+0x3c0>
 800453c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004540:	2200      	movs	r2, #0
 8004542:	2300      	movs	r3, #0
 8004544:	f7fc fac8 	bl	8000ad8 <__aeabi_dcmpeq>
 8004548:	2800      	cmp	r0, #0
 800454a:	d034      	beq.n	80045b6 <_printf_float+0x27a>
 800454c:	4a37      	ldr	r2, [pc, #220]	; (800462c <_printf_float+0x2f0>)
 800454e:	2301      	movs	r3, #1
 8004550:	4631      	mov	r1, r6
 8004552:	4628      	mov	r0, r5
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	f43f af51 	beq.w	80043fe <_printf_float+0xc2>
 800455c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004560:	429a      	cmp	r2, r3
 8004562:	db02      	blt.n	800456a <_printf_float+0x22e>
 8004564:	6823      	ldr	r3, [r4, #0]
 8004566:	07d8      	lsls	r0, r3, #31
 8004568:	d510      	bpl.n	800458c <_printf_float+0x250>
 800456a:	ee18 3a10 	vmov	r3, s16
 800456e:	4652      	mov	r2, sl
 8004570:	4631      	mov	r1, r6
 8004572:	4628      	mov	r0, r5
 8004574:	47b8      	blx	r7
 8004576:	3001      	adds	r0, #1
 8004578:	f43f af41 	beq.w	80043fe <_printf_float+0xc2>
 800457c:	f04f 0800 	mov.w	r8, #0
 8004580:	f104 091a 	add.w	r9, r4, #26
 8004584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004586:	3b01      	subs	r3, #1
 8004588:	4543      	cmp	r3, r8
 800458a:	dc09      	bgt.n	80045a0 <_printf_float+0x264>
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	079b      	lsls	r3, r3, #30
 8004590:	f100 8105 	bmi.w	800479e <_printf_float+0x462>
 8004594:	68e0      	ldr	r0, [r4, #12]
 8004596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004598:	4298      	cmp	r0, r3
 800459a:	bfb8      	it	lt
 800459c:	4618      	movlt	r0, r3
 800459e:	e730      	b.n	8004402 <_printf_float+0xc6>
 80045a0:	2301      	movs	r3, #1
 80045a2:	464a      	mov	r2, r9
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f af27 	beq.w	80043fe <_printf_float+0xc2>
 80045b0:	f108 0801 	add.w	r8, r8, #1
 80045b4:	e7e6      	b.n	8004584 <_printf_float+0x248>
 80045b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	dc39      	bgt.n	8004630 <_printf_float+0x2f4>
 80045bc:	4a1b      	ldr	r2, [pc, #108]	; (800462c <_printf_float+0x2f0>)
 80045be:	2301      	movs	r3, #1
 80045c0:	4631      	mov	r1, r6
 80045c2:	4628      	mov	r0, r5
 80045c4:	47b8      	blx	r7
 80045c6:	3001      	adds	r0, #1
 80045c8:	f43f af19 	beq.w	80043fe <_printf_float+0xc2>
 80045cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d102      	bne.n	80045da <_printf_float+0x29e>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	07d9      	lsls	r1, r3, #31
 80045d8:	d5d8      	bpl.n	800458c <_printf_float+0x250>
 80045da:	ee18 3a10 	vmov	r3, s16
 80045de:	4652      	mov	r2, sl
 80045e0:	4631      	mov	r1, r6
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	f43f af09 	beq.w	80043fe <_printf_float+0xc2>
 80045ec:	f04f 0900 	mov.w	r9, #0
 80045f0:	f104 0a1a 	add.w	sl, r4, #26
 80045f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045f6:	425b      	negs	r3, r3
 80045f8:	454b      	cmp	r3, r9
 80045fa:	dc01      	bgt.n	8004600 <_printf_float+0x2c4>
 80045fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045fe:	e792      	b.n	8004526 <_printf_float+0x1ea>
 8004600:	2301      	movs	r3, #1
 8004602:	4652      	mov	r2, sl
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	47b8      	blx	r7
 800460a:	3001      	adds	r0, #1
 800460c:	f43f aef7 	beq.w	80043fe <_printf_float+0xc2>
 8004610:	f109 0901 	add.w	r9, r9, #1
 8004614:	e7ee      	b.n	80045f4 <_printf_float+0x2b8>
 8004616:	bf00      	nop
 8004618:	7fefffff 	.word	0x7fefffff
 800461c:	08007044 	.word	0x08007044
 8004620:	08007048 	.word	0x08007048
 8004624:	08007050 	.word	0x08007050
 8004628:	0800704c 	.word	0x0800704c
 800462c:	08007054 	.word	0x08007054
 8004630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004634:	429a      	cmp	r2, r3
 8004636:	bfa8      	it	ge
 8004638:	461a      	movge	r2, r3
 800463a:	2a00      	cmp	r2, #0
 800463c:	4691      	mov	r9, r2
 800463e:	dc37      	bgt.n	80046b0 <_printf_float+0x374>
 8004640:	f04f 0b00 	mov.w	fp, #0
 8004644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004648:	f104 021a 	add.w	r2, r4, #26
 800464c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800464e:	9305      	str	r3, [sp, #20]
 8004650:	eba3 0309 	sub.w	r3, r3, r9
 8004654:	455b      	cmp	r3, fp
 8004656:	dc33      	bgt.n	80046c0 <_printf_float+0x384>
 8004658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800465c:	429a      	cmp	r2, r3
 800465e:	db3b      	blt.n	80046d8 <_printf_float+0x39c>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	07da      	lsls	r2, r3, #31
 8004664:	d438      	bmi.n	80046d8 <_printf_float+0x39c>
 8004666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004668:	9b05      	ldr	r3, [sp, #20]
 800466a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	eba2 0901 	sub.w	r9, r2, r1
 8004672:	4599      	cmp	r9, r3
 8004674:	bfa8      	it	ge
 8004676:	4699      	movge	r9, r3
 8004678:	f1b9 0f00 	cmp.w	r9, #0
 800467c:	dc35      	bgt.n	80046ea <_printf_float+0x3ae>
 800467e:	f04f 0800 	mov.w	r8, #0
 8004682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004686:	f104 0a1a 	add.w	sl, r4, #26
 800468a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800468e:	1a9b      	subs	r3, r3, r2
 8004690:	eba3 0309 	sub.w	r3, r3, r9
 8004694:	4543      	cmp	r3, r8
 8004696:	f77f af79 	ble.w	800458c <_printf_float+0x250>
 800469a:	2301      	movs	r3, #1
 800469c:	4652      	mov	r2, sl
 800469e:	4631      	mov	r1, r6
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	f43f aeaa 	beq.w	80043fe <_printf_float+0xc2>
 80046aa:	f108 0801 	add.w	r8, r8, #1
 80046ae:	e7ec      	b.n	800468a <_printf_float+0x34e>
 80046b0:	4613      	mov	r3, r2
 80046b2:	4631      	mov	r1, r6
 80046b4:	4642      	mov	r2, r8
 80046b6:	4628      	mov	r0, r5
 80046b8:	47b8      	blx	r7
 80046ba:	3001      	adds	r0, #1
 80046bc:	d1c0      	bne.n	8004640 <_printf_float+0x304>
 80046be:	e69e      	b.n	80043fe <_printf_float+0xc2>
 80046c0:	2301      	movs	r3, #1
 80046c2:	4631      	mov	r1, r6
 80046c4:	4628      	mov	r0, r5
 80046c6:	9205      	str	r2, [sp, #20]
 80046c8:	47b8      	blx	r7
 80046ca:	3001      	adds	r0, #1
 80046cc:	f43f ae97 	beq.w	80043fe <_printf_float+0xc2>
 80046d0:	9a05      	ldr	r2, [sp, #20]
 80046d2:	f10b 0b01 	add.w	fp, fp, #1
 80046d6:	e7b9      	b.n	800464c <_printf_float+0x310>
 80046d8:	ee18 3a10 	vmov	r3, s16
 80046dc:	4652      	mov	r2, sl
 80046de:	4631      	mov	r1, r6
 80046e0:	4628      	mov	r0, r5
 80046e2:	47b8      	blx	r7
 80046e4:	3001      	adds	r0, #1
 80046e6:	d1be      	bne.n	8004666 <_printf_float+0x32a>
 80046e8:	e689      	b.n	80043fe <_printf_float+0xc2>
 80046ea:	9a05      	ldr	r2, [sp, #20]
 80046ec:	464b      	mov	r3, r9
 80046ee:	4442      	add	r2, r8
 80046f0:	4631      	mov	r1, r6
 80046f2:	4628      	mov	r0, r5
 80046f4:	47b8      	blx	r7
 80046f6:	3001      	adds	r0, #1
 80046f8:	d1c1      	bne.n	800467e <_printf_float+0x342>
 80046fa:	e680      	b.n	80043fe <_printf_float+0xc2>
 80046fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80046fe:	2a01      	cmp	r2, #1
 8004700:	dc01      	bgt.n	8004706 <_printf_float+0x3ca>
 8004702:	07db      	lsls	r3, r3, #31
 8004704:	d538      	bpl.n	8004778 <_printf_float+0x43c>
 8004706:	2301      	movs	r3, #1
 8004708:	4642      	mov	r2, r8
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	47b8      	blx	r7
 8004710:	3001      	adds	r0, #1
 8004712:	f43f ae74 	beq.w	80043fe <_printf_float+0xc2>
 8004716:	ee18 3a10 	vmov	r3, s16
 800471a:	4652      	mov	r2, sl
 800471c:	4631      	mov	r1, r6
 800471e:	4628      	mov	r0, r5
 8004720:	47b8      	blx	r7
 8004722:	3001      	adds	r0, #1
 8004724:	f43f ae6b 	beq.w	80043fe <_printf_float+0xc2>
 8004728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800472c:	2200      	movs	r2, #0
 800472e:	2300      	movs	r3, #0
 8004730:	f7fc f9d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8004734:	b9d8      	cbnz	r0, 800476e <_printf_float+0x432>
 8004736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004738:	f108 0201 	add.w	r2, r8, #1
 800473c:	3b01      	subs	r3, #1
 800473e:	4631      	mov	r1, r6
 8004740:	4628      	mov	r0, r5
 8004742:	47b8      	blx	r7
 8004744:	3001      	adds	r0, #1
 8004746:	d10e      	bne.n	8004766 <_printf_float+0x42a>
 8004748:	e659      	b.n	80043fe <_printf_float+0xc2>
 800474a:	2301      	movs	r3, #1
 800474c:	4652      	mov	r2, sl
 800474e:	4631      	mov	r1, r6
 8004750:	4628      	mov	r0, r5
 8004752:	47b8      	blx	r7
 8004754:	3001      	adds	r0, #1
 8004756:	f43f ae52 	beq.w	80043fe <_printf_float+0xc2>
 800475a:	f108 0801 	add.w	r8, r8, #1
 800475e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004760:	3b01      	subs	r3, #1
 8004762:	4543      	cmp	r3, r8
 8004764:	dcf1      	bgt.n	800474a <_printf_float+0x40e>
 8004766:	464b      	mov	r3, r9
 8004768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800476c:	e6dc      	b.n	8004528 <_printf_float+0x1ec>
 800476e:	f04f 0800 	mov.w	r8, #0
 8004772:	f104 0a1a 	add.w	sl, r4, #26
 8004776:	e7f2      	b.n	800475e <_printf_float+0x422>
 8004778:	2301      	movs	r3, #1
 800477a:	4642      	mov	r2, r8
 800477c:	e7df      	b.n	800473e <_printf_float+0x402>
 800477e:	2301      	movs	r3, #1
 8004780:	464a      	mov	r2, r9
 8004782:	4631      	mov	r1, r6
 8004784:	4628      	mov	r0, r5
 8004786:	47b8      	blx	r7
 8004788:	3001      	adds	r0, #1
 800478a:	f43f ae38 	beq.w	80043fe <_printf_float+0xc2>
 800478e:	f108 0801 	add.w	r8, r8, #1
 8004792:	68e3      	ldr	r3, [r4, #12]
 8004794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004796:	1a5b      	subs	r3, r3, r1
 8004798:	4543      	cmp	r3, r8
 800479a:	dcf0      	bgt.n	800477e <_printf_float+0x442>
 800479c:	e6fa      	b.n	8004594 <_printf_float+0x258>
 800479e:	f04f 0800 	mov.w	r8, #0
 80047a2:	f104 0919 	add.w	r9, r4, #25
 80047a6:	e7f4      	b.n	8004792 <_printf_float+0x456>

080047a8 <_printf_common>:
 80047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	4616      	mov	r6, r2
 80047ae:	4699      	mov	r9, r3
 80047b0:	688a      	ldr	r2, [r1, #8]
 80047b2:	690b      	ldr	r3, [r1, #16]
 80047b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	bfb8      	it	lt
 80047bc:	4613      	movlt	r3, r2
 80047be:	6033      	str	r3, [r6, #0]
 80047c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80047c4:	4607      	mov	r7, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	b10a      	cbz	r2, 80047ce <_printf_common+0x26>
 80047ca:	3301      	adds	r3, #1
 80047cc:	6033      	str	r3, [r6, #0]
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	0699      	lsls	r1, r3, #26
 80047d2:	bf42      	ittt	mi
 80047d4:	6833      	ldrmi	r3, [r6, #0]
 80047d6:	3302      	addmi	r3, #2
 80047d8:	6033      	strmi	r3, [r6, #0]
 80047da:	6825      	ldr	r5, [r4, #0]
 80047dc:	f015 0506 	ands.w	r5, r5, #6
 80047e0:	d106      	bne.n	80047f0 <_printf_common+0x48>
 80047e2:	f104 0a19 	add.w	sl, r4, #25
 80047e6:	68e3      	ldr	r3, [r4, #12]
 80047e8:	6832      	ldr	r2, [r6, #0]
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	42ab      	cmp	r3, r5
 80047ee:	dc26      	bgt.n	800483e <_printf_common+0x96>
 80047f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80047f4:	1e13      	subs	r3, r2, #0
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	bf18      	it	ne
 80047fa:	2301      	movne	r3, #1
 80047fc:	0692      	lsls	r2, r2, #26
 80047fe:	d42b      	bmi.n	8004858 <_printf_common+0xb0>
 8004800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004804:	4649      	mov	r1, r9
 8004806:	4638      	mov	r0, r7
 8004808:	47c0      	blx	r8
 800480a:	3001      	adds	r0, #1
 800480c:	d01e      	beq.n	800484c <_printf_common+0xa4>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	68e5      	ldr	r5, [r4, #12]
 8004812:	6832      	ldr	r2, [r6, #0]
 8004814:	f003 0306 	and.w	r3, r3, #6
 8004818:	2b04      	cmp	r3, #4
 800481a:	bf08      	it	eq
 800481c:	1aad      	subeq	r5, r5, r2
 800481e:	68a3      	ldr	r3, [r4, #8]
 8004820:	6922      	ldr	r2, [r4, #16]
 8004822:	bf0c      	ite	eq
 8004824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004828:	2500      	movne	r5, #0
 800482a:	4293      	cmp	r3, r2
 800482c:	bfc4      	itt	gt
 800482e:	1a9b      	subgt	r3, r3, r2
 8004830:	18ed      	addgt	r5, r5, r3
 8004832:	2600      	movs	r6, #0
 8004834:	341a      	adds	r4, #26
 8004836:	42b5      	cmp	r5, r6
 8004838:	d11a      	bne.n	8004870 <_printf_common+0xc8>
 800483a:	2000      	movs	r0, #0
 800483c:	e008      	b.n	8004850 <_printf_common+0xa8>
 800483e:	2301      	movs	r3, #1
 8004840:	4652      	mov	r2, sl
 8004842:	4649      	mov	r1, r9
 8004844:	4638      	mov	r0, r7
 8004846:	47c0      	blx	r8
 8004848:	3001      	adds	r0, #1
 800484a:	d103      	bne.n	8004854 <_printf_common+0xac>
 800484c:	f04f 30ff 	mov.w	r0, #4294967295
 8004850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004854:	3501      	adds	r5, #1
 8004856:	e7c6      	b.n	80047e6 <_printf_common+0x3e>
 8004858:	18e1      	adds	r1, r4, r3
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	2030      	movs	r0, #48	; 0x30
 800485e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004862:	4422      	add	r2, r4
 8004864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800486c:	3302      	adds	r3, #2
 800486e:	e7c7      	b.n	8004800 <_printf_common+0x58>
 8004870:	2301      	movs	r3, #1
 8004872:	4622      	mov	r2, r4
 8004874:	4649      	mov	r1, r9
 8004876:	4638      	mov	r0, r7
 8004878:	47c0      	blx	r8
 800487a:	3001      	adds	r0, #1
 800487c:	d0e6      	beq.n	800484c <_printf_common+0xa4>
 800487e:	3601      	adds	r6, #1
 8004880:	e7d9      	b.n	8004836 <_printf_common+0x8e>
	...

08004884 <_printf_i>:
 8004884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004888:	460c      	mov	r4, r1
 800488a:	4691      	mov	r9, r2
 800488c:	7e27      	ldrb	r7, [r4, #24]
 800488e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004890:	2f78      	cmp	r7, #120	; 0x78
 8004892:	4680      	mov	r8, r0
 8004894:	469a      	mov	sl, r3
 8004896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800489a:	d807      	bhi.n	80048ac <_printf_i+0x28>
 800489c:	2f62      	cmp	r7, #98	; 0x62
 800489e:	d80a      	bhi.n	80048b6 <_printf_i+0x32>
 80048a0:	2f00      	cmp	r7, #0
 80048a2:	f000 80d8 	beq.w	8004a56 <_printf_i+0x1d2>
 80048a6:	2f58      	cmp	r7, #88	; 0x58
 80048a8:	f000 80a3 	beq.w	80049f2 <_printf_i+0x16e>
 80048ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80048b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80048b4:	e03a      	b.n	800492c <_printf_i+0xa8>
 80048b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80048ba:	2b15      	cmp	r3, #21
 80048bc:	d8f6      	bhi.n	80048ac <_printf_i+0x28>
 80048be:	a001      	add	r0, pc, #4	; (adr r0, 80048c4 <_printf_i+0x40>)
 80048c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80048c4:	0800491d 	.word	0x0800491d
 80048c8:	08004931 	.word	0x08004931
 80048cc:	080048ad 	.word	0x080048ad
 80048d0:	080048ad 	.word	0x080048ad
 80048d4:	080048ad 	.word	0x080048ad
 80048d8:	080048ad 	.word	0x080048ad
 80048dc:	08004931 	.word	0x08004931
 80048e0:	080048ad 	.word	0x080048ad
 80048e4:	080048ad 	.word	0x080048ad
 80048e8:	080048ad 	.word	0x080048ad
 80048ec:	080048ad 	.word	0x080048ad
 80048f0:	08004a3d 	.word	0x08004a3d
 80048f4:	08004961 	.word	0x08004961
 80048f8:	08004a1f 	.word	0x08004a1f
 80048fc:	080048ad 	.word	0x080048ad
 8004900:	080048ad 	.word	0x080048ad
 8004904:	08004a5f 	.word	0x08004a5f
 8004908:	080048ad 	.word	0x080048ad
 800490c:	08004961 	.word	0x08004961
 8004910:	080048ad 	.word	0x080048ad
 8004914:	080048ad 	.word	0x080048ad
 8004918:	08004a27 	.word	0x08004a27
 800491c:	680b      	ldr	r3, [r1, #0]
 800491e:	1d1a      	adds	r2, r3, #4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	600a      	str	r2, [r1, #0]
 8004924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800492c:	2301      	movs	r3, #1
 800492e:	e0a3      	b.n	8004a78 <_printf_i+0x1f4>
 8004930:	6825      	ldr	r5, [r4, #0]
 8004932:	6808      	ldr	r0, [r1, #0]
 8004934:	062e      	lsls	r6, r5, #24
 8004936:	f100 0304 	add.w	r3, r0, #4
 800493a:	d50a      	bpl.n	8004952 <_printf_i+0xce>
 800493c:	6805      	ldr	r5, [r0, #0]
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	2d00      	cmp	r5, #0
 8004942:	da03      	bge.n	800494c <_printf_i+0xc8>
 8004944:	232d      	movs	r3, #45	; 0x2d
 8004946:	426d      	negs	r5, r5
 8004948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800494c:	485e      	ldr	r0, [pc, #376]	; (8004ac8 <_printf_i+0x244>)
 800494e:	230a      	movs	r3, #10
 8004950:	e019      	b.n	8004986 <_printf_i+0x102>
 8004952:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004956:	6805      	ldr	r5, [r0, #0]
 8004958:	600b      	str	r3, [r1, #0]
 800495a:	bf18      	it	ne
 800495c:	b22d      	sxthne	r5, r5
 800495e:	e7ef      	b.n	8004940 <_printf_i+0xbc>
 8004960:	680b      	ldr	r3, [r1, #0]
 8004962:	6825      	ldr	r5, [r4, #0]
 8004964:	1d18      	adds	r0, r3, #4
 8004966:	6008      	str	r0, [r1, #0]
 8004968:	0628      	lsls	r0, r5, #24
 800496a:	d501      	bpl.n	8004970 <_printf_i+0xec>
 800496c:	681d      	ldr	r5, [r3, #0]
 800496e:	e002      	b.n	8004976 <_printf_i+0xf2>
 8004970:	0669      	lsls	r1, r5, #25
 8004972:	d5fb      	bpl.n	800496c <_printf_i+0xe8>
 8004974:	881d      	ldrh	r5, [r3, #0]
 8004976:	4854      	ldr	r0, [pc, #336]	; (8004ac8 <_printf_i+0x244>)
 8004978:	2f6f      	cmp	r7, #111	; 0x6f
 800497a:	bf0c      	ite	eq
 800497c:	2308      	moveq	r3, #8
 800497e:	230a      	movne	r3, #10
 8004980:	2100      	movs	r1, #0
 8004982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004986:	6866      	ldr	r6, [r4, #4]
 8004988:	60a6      	str	r6, [r4, #8]
 800498a:	2e00      	cmp	r6, #0
 800498c:	bfa2      	ittt	ge
 800498e:	6821      	ldrge	r1, [r4, #0]
 8004990:	f021 0104 	bicge.w	r1, r1, #4
 8004994:	6021      	strge	r1, [r4, #0]
 8004996:	b90d      	cbnz	r5, 800499c <_printf_i+0x118>
 8004998:	2e00      	cmp	r6, #0
 800499a:	d04d      	beq.n	8004a38 <_printf_i+0x1b4>
 800499c:	4616      	mov	r6, r2
 800499e:	fbb5 f1f3 	udiv	r1, r5, r3
 80049a2:	fb03 5711 	mls	r7, r3, r1, r5
 80049a6:	5dc7      	ldrb	r7, [r0, r7]
 80049a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80049ac:	462f      	mov	r7, r5
 80049ae:	42bb      	cmp	r3, r7
 80049b0:	460d      	mov	r5, r1
 80049b2:	d9f4      	bls.n	800499e <_printf_i+0x11a>
 80049b4:	2b08      	cmp	r3, #8
 80049b6:	d10b      	bne.n	80049d0 <_printf_i+0x14c>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	07df      	lsls	r7, r3, #31
 80049bc:	d508      	bpl.n	80049d0 <_printf_i+0x14c>
 80049be:	6923      	ldr	r3, [r4, #16]
 80049c0:	6861      	ldr	r1, [r4, #4]
 80049c2:	4299      	cmp	r1, r3
 80049c4:	bfde      	ittt	le
 80049c6:	2330      	movle	r3, #48	; 0x30
 80049c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049d0:	1b92      	subs	r2, r2, r6
 80049d2:	6122      	str	r2, [r4, #16]
 80049d4:	f8cd a000 	str.w	sl, [sp]
 80049d8:	464b      	mov	r3, r9
 80049da:	aa03      	add	r2, sp, #12
 80049dc:	4621      	mov	r1, r4
 80049de:	4640      	mov	r0, r8
 80049e0:	f7ff fee2 	bl	80047a8 <_printf_common>
 80049e4:	3001      	adds	r0, #1
 80049e6:	d14c      	bne.n	8004a82 <_printf_i+0x1fe>
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	b004      	add	sp, #16
 80049ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f2:	4835      	ldr	r0, [pc, #212]	; (8004ac8 <_printf_i+0x244>)
 80049f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	680e      	ldr	r6, [r1, #0]
 80049fc:	061f      	lsls	r7, r3, #24
 80049fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004a02:	600e      	str	r6, [r1, #0]
 8004a04:	d514      	bpl.n	8004a30 <_printf_i+0x1ac>
 8004a06:	07d9      	lsls	r1, r3, #31
 8004a08:	bf44      	itt	mi
 8004a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8004a0e:	6023      	strmi	r3, [r4, #0]
 8004a10:	b91d      	cbnz	r5, 8004a1a <_printf_i+0x196>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	f023 0320 	bic.w	r3, r3, #32
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	e7b0      	b.n	8004980 <_printf_i+0xfc>
 8004a1e:	6823      	ldr	r3, [r4, #0]
 8004a20:	f043 0320 	orr.w	r3, r3, #32
 8004a24:	6023      	str	r3, [r4, #0]
 8004a26:	2378      	movs	r3, #120	; 0x78
 8004a28:	4828      	ldr	r0, [pc, #160]	; (8004acc <_printf_i+0x248>)
 8004a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a2e:	e7e3      	b.n	80049f8 <_printf_i+0x174>
 8004a30:	065e      	lsls	r6, r3, #25
 8004a32:	bf48      	it	mi
 8004a34:	b2ad      	uxthmi	r5, r5
 8004a36:	e7e6      	b.n	8004a06 <_printf_i+0x182>
 8004a38:	4616      	mov	r6, r2
 8004a3a:	e7bb      	b.n	80049b4 <_printf_i+0x130>
 8004a3c:	680b      	ldr	r3, [r1, #0]
 8004a3e:	6826      	ldr	r6, [r4, #0]
 8004a40:	6960      	ldr	r0, [r4, #20]
 8004a42:	1d1d      	adds	r5, r3, #4
 8004a44:	600d      	str	r5, [r1, #0]
 8004a46:	0635      	lsls	r5, r6, #24
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	d501      	bpl.n	8004a50 <_printf_i+0x1cc>
 8004a4c:	6018      	str	r0, [r3, #0]
 8004a4e:	e002      	b.n	8004a56 <_printf_i+0x1d2>
 8004a50:	0671      	lsls	r1, r6, #25
 8004a52:	d5fb      	bpl.n	8004a4c <_printf_i+0x1c8>
 8004a54:	8018      	strh	r0, [r3, #0]
 8004a56:	2300      	movs	r3, #0
 8004a58:	6123      	str	r3, [r4, #16]
 8004a5a:	4616      	mov	r6, r2
 8004a5c:	e7ba      	b.n	80049d4 <_printf_i+0x150>
 8004a5e:	680b      	ldr	r3, [r1, #0]
 8004a60:	1d1a      	adds	r2, r3, #4
 8004a62:	600a      	str	r2, [r1, #0]
 8004a64:	681e      	ldr	r6, [r3, #0]
 8004a66:	6862      	ldr	r2, [r4, #4]
 8004a68:	2100      	movs	r1, #0
 8004a6a:	4630      	mov	r0, r6
 8004a6c:	f7fb fbc0 	bl	80001f0 <memchr>
 8004a70:	b108      	cbz	r0, 8004a76 <_printf_i+0x1f2>
 8004a72:	1b80      	subs	r0, r0, r6
 8004a74:	6060      	str	r0, [r4, #4]
 8004a76:	6863      	ldr	r3, [r4, #4]
 8004a78:	6123      	str	r3, [r4, #16]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a80:	e7a8      	b.n	80049d4 <_printf_i+0x150>
 8004a82:	6923      	ldr	r3, [r4, #16]
 8004a84:	4632      	mov	r2, r6
 8004a86:	4649      	mov	r1, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	47d0      	blx	sl
 8004a8c:	3001      	adds	r0, #1
 8004a8e:	d0ab      	beq.n	80049e8 <_printf_i+0x164>
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	079b      	lsls	r3, r3, #30
 8004a94:	d413      	bmi.n	8004abe <_printf_i+0x23a>
 8004a96:	68e0      	ldr	r0, [r4, #12]
 8004a98:	9b03      	ldr	r3, [sp, #12]
 8004a9a:	4298      	cmp	r0, r3
 8004a9c:	bfb8      	it	lt
 8004a9e:	4618      	movlt	r0, r3
 8004aa0:	e7a4      	b.n	80049ec <_printf_i+0x168>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	4640      	mov	r0, r8
 8004aaa:	47d0      	blx	sl
 8004aac:	3001      	adds	r0, #1
 8004aae:	d09b      	beq.n	80049e8 <_printf_i+0x164>
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	68e3      	ldr	r3, [r4, #12]
 8004ab4:	9903      	ldr	r1, [sp, #12]
 8004ab6:	1a5b      	subs	r3, r3, r1
 8004ab8:	42ab      	cmp	r3, r5
 8004aba:	dcf2      	bgt.n	8004aa2 <_printf_i+0x21e>
 8004abc:	e7eb      	b.n	8004a96 <_printf_i+0x212>
 8004abe:	2500      	movs	r5, #0
 8004ac0:	f104 0619 	add.w	r6, r4, #25
 8004ac4:	e7f5      	b.n	8004ab2 <_printf_i+0x22e>
 8004ac6:	bf00      	nop
 8004ac8:	08007056 	.word	0x08007056
 8004acc:	08007067 	.word	0x08007067

08004ad0 <iprintf>:
 8004ad0:	b40f      	push	{r0, r1, r2, r3}
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <iprintf+0x2c>)
 8004ad4:	b513      	push	{r0, r1, r4, lr}
 8004ad6:	681c      	ldr	r4, [r3, #0]
 8004ad8:	b124      	cbz	r4, 8004ae4 <iprintf+0x14>
 8004ada:	69a3      	ldr	r3, [r4, #24]
 8004adc:	b913      	cbnz	r3, 8004ae4 <iprintf+0x14>
 8004ade:	4620      	mov	r0, r4
 8004ae0:	f000 fefe 	bl	80058e0 <__sinit>
 8004ae4:	ab05      	add	r3, sp, #20
 8004ae6:	9a04      	ldr	r2, [sp, #16]
 8004ae8:	68a1      	ldr	r1, [r4, #8]
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	4620      	mov	r0, r4
 8004aee:	f001 fd71 	bl	80065d4 <_vfiprintf_r>
 8004af2:	b002      	add	sp, #8
 8004af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af8:	b004      	add	sp, #16
 8004afa:	4770      	bx	lr
 8004afc:	2000000c 	.word	0x2000000c

08004b00 <siprintf>:
 8004b00:	b40e      	push	{r1, r2, r3}
 8004b02:	b500      	push	{lr}
 8004b04:	b09c      	sub	sp, #112	; 0x70
 8004b06:	ab1d      	add	r3, sp, #116	; 0x74
 8004b08:	9002      	str	r0, [sp, #8]
 8004b0a:	9006      	str	r0, [sp, #24]
 8004b0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b10:	4809      	ldr	r0, [pc, #36]	; (8004b38 <siprintf+0x38>)
 8004b12:	9107      	str	r1, [sp, #28]
 8004b14:	9104      	str	r1, [sp, #16]
 8004b16:	4909      	ldr	r1, [pc, #36]	; (8004b3c <siprintf+0x3c>)
 8004b18:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b1c:	9105      	str	r1, [sp, #20]
 8004b1e:	6800      	ldr	r0, [r0, #0]
 8004b20:	9301      	str	r3, [sp, #4]
 8004b22:	a902      	add	r1, sp, #8
 8004b24:	f001 fc2c 	bl	8006380 <_svfiprintf_r>
 8004b28:	9b02      	ldr	r3, [sp, #8]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	b01c      	add	sp, #112	; 0x70
 8004b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b34:	b003      	add	sp, #12
 8004b36:	4770      	bx	lr
 8004b38:	2000000c 	.word	0x2000000c
 8004b3c:	ffff0208 	.word	0xffff0208

08004b40 <quorem>:
 8004b40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	6903      	ldr	r3, [r0, #16]
 8004b46:	690c      	ldr	r4, [r1, #16]
 8004b48:	42a3      	cmp	r3, r4
 8004b4a:	4607      	mov	r7, r0
 8004b4c:	f2c0 8081 	blt.w	8004c52 <quorem+0x112>
 8004b50:	3c01      	subs	r4, #1
 8004b52:	f101 0814 	add.w	r8, r1, #20
 8004b56:	f100 0514 	add.w	r5, r0, #20
 8004b5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b5e:	9301      	str	r3, [sp, #4]
 8004b60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004b70:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004b74:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b78:	d331      	bcc.n	8004bde <quorem+0x9e>
 8004b7a:	f04f 0e00 	mov.w	lr, #0
 8004b7e:	4640      	mov	r0, r8
 8004b80:	46ac      	mov	ip, r5
 8004b82:	46f2      	mov	sl, lr
 8004b84:	f850 2b04 	ldr.w	r2, [r0], #4
 8004b88:	b293      	uxth	r3, r2
 8004b8a:	fb06 e303 	mla	r3, r6, r3, lr
 8004b8e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	ebaa 0303 	sub.w	r3, sl, r3
 8004b98:	0c12      	lsrs	r2, r2, #16
 8004b9a:	f8dc a000 	ldr.w	sl, [ip]
 8004b9e:	fb06 e202 	mla	r2, r6, r2, lr
 8004ba2:	fa13 f38a 	uxtah	r3, r3, sl
 8004ba6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004baa:	fa1f fa82 	uxth.w	sl, r2
 8004bae:	f8dc 2000 	ldr.w	r2, [ip]
 8004bb2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004bb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bc0:	4581      	cmp	r9, r0
 8004bc2:	f84c 3b04 	str.w	r3, [ip], #4
 8004bc6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bca:	d2db      	bcs.n	8004b84 <quorem+0x44>
 8004bcc:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bd0:	b92b      	cbnz	r3, 8004bde <quorem+0x9e>
 8004bd2:	9b01      	ldr	r3, [sp, #4]
 8004bd4:	3b04      	subs	r3, #4
 8004bd6:	429d      	cmp	r5, r3
 8004bd8:	461a      	mov	r2, r3
 8004bda:	d32e      	bcc.n	8004c3a <quorem+0xfa>
 8004bdc:	613c      	str	r4, [r7, #16]
 8004bde:	4638      	mov	r0, r7
 8004be0:	f001 f9b8 	bl	8005f54 <__mcmp>
 8004be4:	2800      	cmp	r0, #0
 8004be6:	db24      	blt.n	8004c32 <quorem+0xf2>
 8004be8:	3601      	adds	r6, #1
 8004bea:	4628      	mov	r0, r5
 8004bec:	f04f 0c00 	mov.w	ip, #0
 8004bf0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004bf4:	f8d0 e000 	ldr.w	lr, [r0]
 8004bf8:	b293      	uxth	r3, r2
 8004bfa:	ebac 0303 	sub.w	r3, ip, r3
 8004bfe:	0c12      	lsrs	r2, r2, #16
 8004c00:	fa13 f38e 	uxtah	r3, r3, lr
 8004c04:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c12:	45c1      	cmp	r9, r8
 8004c14:	f840 3b04 	str.w	r3, [r0], #4
 8004c18:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c1c:	d2e8      	bcs.n	8004bf0 <quorem+0xb0>
 8004c1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c26:	b922      	cbnz	r2, 8004c32 <quorem+0xf2>
 8004c28:	3b04      	subs	r3, #4
 8004c2a:	429d      	cmp	r5, r3
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	d30a      	bcc.n	8004c46 <quorem+0x106>
 8004c30:	613c      	str	r4, [r7, #16]
 8004c32:	4630      	mov	r0, r6
 8004c34:	b003      	add	sp, #12
 8004c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	3b04      	subs	r3, #4
 8004c3e:	2a00      	cmp	r2, #0
 8004c40:	d1cc      	bne.n	8004bdc <quorem+0x9c>
 8004c42:	3c01      	subs	r4, #1
 8004c44:	e7c7      	b.n	8004bd6 <quorem+0x96>
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	3b04      	subs	r3, #4
 8004c4a:	2a00      	cmp	r2, #0
 8004c4c:	d1f0      	bne.n	8004c30 <quorem+0xf0>
 8004c4e:	3c01      	subs	r4, #1
 8004c50:	e7eb      	b.n	8004c2a <quorem+0xea>
 8004c52:	2000      	movs	r0, #0
 8004c54:	e7ee      	b.n	8004c34 <quorem+0xf4>
	...

08004c58 <_dtoa_r>:
 8004c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c5c:	ed2d 8b02 	vpush	{d8}
 8004c60:	ec57 6b10 	vmov	r6, r7, d0
 8004c64:	b095      	sub	sp, #84	; 0x54
 8004c66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004c68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004c6c:	9105      	str	r1, [sp, #20]
 8004c6e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004c72:	4604      	mov	r4, r0
 8004c74:	9209      	str	r2, [sp, #36]	; 0x24
 8004c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c78:	b975      	cbnz	r5, 8004c98 <_dtoa_r+0x40>
 8004c7a:	2010      	movs	r0, #16
 8004c7c:	f000 fed6 	bl	8005a2c <malloc>
 8004c80:	4602      	mov	r2, r0
 8004c82:	6260      	str	r0, [r4, #36]	; 0x24
 8004c84:	b920      	cbnz	r0, 8004c90 <_dtoa_r+0x38>
 8004c86:	4bb2      	ldr	r3, [pc, #712]	; (8004f50 <_dtoa_r+0x2f8>)
 8004c88:	21ea      	movs	r1, #234	; 0xea
 8004c8a:	48b2      	ldr	r0, [pc, #712]	; (8004f54 <_dtoa_r+0x2fc>)
 8004c8c:	f001 fef8 	bl	8006a80 <__assert_func>
 8004c90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004c94:	6005      	str	r5, [r0, #0]
 8004c96:	60c5      	str	r5, [r0, #12]
 8004c98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c9a:	6819      	ldr	r1, [r3, #0]
 8004c9c:	b151      	cbz	r1, 8004cb4 <_dtoa_r+0x5c>
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	604a      	str	r2, [r1, #4]
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	4093      	lsls	r3, r2
 8004ca6:	608b      	str	r3, [r1, #8]
 8004ca8:	4620      	mov	r0, r4
 8004caa:	f000 ff15 	bl	8005ad8 <_Bfree>
 8004cae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]
 8004cb4:	1e3b      	subs	r3, r7, #0
 8004cb6:	bfb9      	ittee	lt
 8004cb8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004cbc:	9303      	strlt	r3, [sp, #12]
 8004cbe:	2300      	movge	r3, #0
 8004cc0:	f8c8 3000 	strge.w	r3, [r8]
 8004cc4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004cc8:	4ba3      	ldr	r3, [pc, #652]	; (8004f58 <_dtoa_r+0x300>)
 8004cca:	bfbc      	itt	lt
 8004ccc:	2201      	movlt	r2, #1
 8004cce:	f8c8 2000 	strlt.w	r2, [r8]
 8004cd2:	ea33 0309 	bics.w	r3, r3, r9
 8004cd6:	d11b      	bne.n	8004d10 <_dtoa_r+0xb8>
 8004cd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004cda:	f242 730f 	movw	r3, #9999	; 0x270f
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ce4:	4333      	orrs	r3, r6
 8004ce6:	f000 857a 	beq.w	80057de <_dtoa_r+0xb86>
 8004cea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cec:	b963      	cbnz	r3, 8004d08 <_dtoa_r+0xb0>
 8004cee:	4b9b      	ldr	r3, [pc, #620]	; (8004f5c <_dtoa_r+0x304>)
 8004cf0:	e024      	b.n	8004d3c <_dtoa_r+0xe4>
 8004cf2:	4b9b      	ldr	r3, [pc, #620]	; (8004f60 <_dtoa_r+0x308>)
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	3308      	adds	r3, #8
 8004cf8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	9800      	ldr	r0, [sp, #0]
 8004cfe:	b015      	add	sp, #84	; 0x54
 8004d00:	ecbd 8b02 	vpop	{d8}
 8004d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d08:	4b94      	ldr	r3, [pc, #592]	; (8004f5c <_dtoa_r+0x304>)
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	3303      	adds	r3, #3
 8004d0e:	e7f3      	b.n	8004cf8 <_dtoa_r+0xa0>
 8004d10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d14:	2200      	movs	r2, #0
 8004d16:	ec51 0b17 	vmov	r0, r1, d7
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d20:	f7fb feda 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d24:	4680      	mov	r8, r0
 8004d26:	b158      	cbz	r0, 8004d40 <_dtoa_r+0xe8>
 8004d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	6013      	str	r3, [r2, #0]
 8004d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8551 	beq.w	80057d8 <_dtoa_r+0xb80>
 8004d36:	488b      	ldr	r0, [pc, #556]	; (8004f64 <_dtoa_r+0x30c>)
 8004d38:	6018      	str	r0, [r3, #0]
 8004d3a:	1e43      	subs	r3, r0, #1
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	e7dd      	b.n	8004cfc <_dtoa_r+0xa4>
 8004d40:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004d44:	aa12      	add	r2, sp, #72	; 0x48
 8004d46:	a913      	add	r1, sp, #76	; 0x4c
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f001 f9a7 	bl	800609c <__d2b>
 8004d4e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004d52:	4683      	mov	fp, r0
 8004d54:	2d00      	cmp	r5, #0
 8004d56:	d07c      	beq.n	8004e52 <_dtoa_r+0x1fa>
 8004d58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d5a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004d5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d62:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004d66:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004d6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004d6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004d72:	4b7d      	ldr	r3, [pc, #500]	; (8004f68 <_dtoa_r+0x310>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	4630      	mov	r0, r6
 8004d78:	4639      	mov	r1, r7
 8004d7a:	f7fb fa8d 	bl	8000298 <__aeabi_dsub>
 8004d7e:	a36e      	add	r3, pc, #440	; (adr r3, 8004f38 <_dtoa_r+0x2e0>)
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f7fb fc40 	bl	8000608 <__aeabi_dmul>
 8004d88:	a36d      	add	r3, pc, #436	; (adr r3, 8004f40 <_dtoa_r+0x2e8>)
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f7fb fa85 	bl	800029c <__adddf3>
 8004d92:	4606      	mov	r6, r0
 8004d94:	4628      	mov	r0, r5
 8004d96:	460f      	mov	r7, r1
 8004d98:	f7fb fbcc 	bl	8000534 <__aeabi_i2d>
 8004d9c:	a36a      	add	r3, pc, #424	; (adr r3, 8004f48 <_dtoa_r+0x2f0>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	f7fb fc31 	bl	8000608 <__aeabi_dmul>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4630      	mov	r0, r6
 8004dac:	4639      	mov	r1, r7
 8004dae:	f7fb fa75 	bl	800029c <__adddf3>
 8004db2:	4606      	mov	r6, r0
 8004db4:	460f      	mov	r7, r1
 8004db6:	f7fb fed7 	bl	8000b68 <__aeabi_d2iz>
 8004dba:	2200      	movs	r2, #0
 8004dbc:	4682      	mov	sl, r0
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	4630      	mov	r0, r6
 8004dc2:	4639      	mov	r1, r7
 8004dc4:	f7fb fe92 	bl	8000aec <__aeabi_dcmplt>
 8004dc8:	b148      	cbz	r0, 8004dde <_dtoa_r+0x186>
 8004dca:	4650      	mov	r0, sl
 8004dcc:	f7fb fbb2 	bl	8000534 <__aeabi_i2d>
 8004dd0:	4632      	mov	r2, r6
 8004dd2:	463b      	mov	r3, r7
 8004dd4:	f7fb fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8004dd8:	b908      	cbnz	r0, 8004dde <_dtoa_r+0x186>
 8004dda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dde:	f1ba 0f16 	cmp.w	sl, #22
 8004de2:	d854      	bhi.n	8004e8e <_dtoa_r+0x236>
 8004de4:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <_dtoa_r+0x314>)
 8004de6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004df2:	f7fb fe7b 	bl	8000aec <__aeabi_dcmplt>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d04b      	beq.n	8004e92 <_dtoa_r+0x23a>
 8004dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dfe:	2300      	movs	r3, #0
 8004e00:	930e      	str	r3, [sp, #56]	; 0x38
 8004e02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004e04:	1b5d      	subs	r5, r3, r5
 8004e06:	1e6b      	subs	r3, r5, #1
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	bf43      	ittte	mi
 8004e0c:	2300      	movmi	r3, #0
 8004e0e:	f1c5 0801 	rsbmi	r8, r5, #1
 8004e12:	9304      	strmi	r3, [sp, #16]
 8004e14:	f04f 0800 	movpl.w	r8, #0
 8004e18:	f1ba 0f00 	cmp.w	sl, #0
 8004e1c:	db3b      	blt.n	8004e96 <_dtoa_r+0x23e>
 8004e1e:	9b04      	ldr	r3, [sp, #16]
 8004e20:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004e24:	4453      	add	r3, sl
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9306      	str	r3, [sp, #24]
 8004e2c:	9b05      	ldr	r3, [sp, #20]
 8004e2e:	2b09      	cmp	r3, #9
 8004e30:	d869      	bhi.n	8004f06 <_dtoa_r+0x2ae>
 8004e32:	2b05      	cmp	r3, #5
 8004e34:	bfc4      	itt	gt
 8004e36:	3b04      	subgt	r3, #4
 8004e38:	9305      	strgt	r3, [sp, #20]
 8004e3a:	9b05      	ldr	r3, [sp, #20]
 8004e3c:	f1a3 0302 	sub.w	r3, r3, #2
 8004e40:	bfcc      	ite	gt
 8004e42:	2500      	movgt	r5, #0
 8004e44:	2501      	movle	r5, #1
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d869      	bhi.n	8004f1e <_dtoa_r+0x2c6>
 8004e4a:	e8df f003 	tbb	[pc, r3]
 8004e4e:	4e2c      	.short	0x4e2c
 8004e50:	5a4c      	.short	0x5a4c
 8004e52:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004e56:	441d      	add	r5, r3
 8004e58:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	bfc1      	itttt	gt
 8004e60:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e64:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004e68:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e6c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004e70:	bfda      	itte	le
 8004e72:	f1c3 0320 	rsble	r3, r3, #32
 8004e76:	fa06 f003 	lslle.w	r0, r6, r3
 8004e7a:	4318      	orrgt	r0, r3
 8004e7c:	f7fb fb4a 	bl	8000514 <__aeabi_ui2d>
 8004e80:	2301      	movs	r3, #1
 8004e82:	4606      	mov	r6, r0
 8004e84:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004e88:	3d01      	subs	r5, #1
 8004e8a:	9310      	str	r3, [sp, #64]	; 0x40
 8004e8c:	e771      	b.n	8004d72 <_dtoa_r+0x11a>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e7b6      	b.n	8004e00 <_dtoa_r+0x1a8>
 8004e92:	900e      	str	r0, [sp, #56]	; 0x38
 8004e94:	e7b5      	b.n	8004e02 <_dtoa_r+0x1aa>
 8004e96:	f1ca 0300 	rsb	r3, sl, #0
 8004e9a:	9306      	str	r3, [sp, #24]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	eba8 080a 	sub.w	r8, r8, sl
 8004ea2:	930d      	str	r3, [sp, #52]	; 0x34
 8004ea4:	e7c2      	b.n	8004e2c <_dtoa_r+0x1d4>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	9308      	str	r3, [sp, #32]
 8004eaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	dc39      	bgt.n	8004f24 <_dtoa_r+0x2cc>
 8004eb0:	f04f 0901 	mov.w	r9, #1
 8004eb4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004eb8:	464b      	mov	r3, r9
 8004eba:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004ebe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	6042      	str	r2, [r0, #4]
 8004ec4:	2204      	movs	r2, #4
 8004ec6:	f102 0614 	add.w	r6, r2, #20
 8004eca:	429e      	cmp	r6, r3
 8004ecc:	6841      	ldr	r1, [r0, #4]
 8004ece:	d92f      	bls.n	8004f30 <_dtoa_r+0x2d8>
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 fdc1 	bl	8005a58 <_Balloc>
 8004ed6:	9000      	str	r0, [sp, #0]
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d14b      	bne.n	8004f74 <_dtoa_r+0x31c>
 8004edc:	4b24      	ldr	r3, [pc, #144]	; (8004f70 <_dtoa_r+0x318>)
 8004ede:	4602      	mov	r2, r0
 8004ee0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004ee4:	e6d1      	b.n	8004c8a <_dtoa_r+0x32>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e7de      	b.n	8004ea8 <_dtoa_r+0x250>
 8004eea:	2300      	movs	r3, #0
 8004eec:	9308      	str	r3, [sp, #32]
 8004eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef0:	eb0a 0903 	add.w	r9, sl, r3
 8004ef4:	f109 0301 	add.w	r3, r9, #1
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	9301      	str	r3, [sp, #4]
 8004efc:	bfb8      	it	lt
 8004efe:	2301      	movlt	r3, #1
 8004f00:	e7dd      	b.n	8004ebe <_dtoa_r+0x266>
 8004f02:	2301      	movs	r3, #1
 8004f04:	e7f2      	b.n	8004eec <_dtoa_r+0x294>
 8004f06:	2501      	movs	r5, #1
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9305      	str	r3, [sp, #20]
 8004f0c:	9508      	str	r5, [sp, #32]
 8004f0e:	f04f 39ff 	mov.w	r9, #4294967295
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f18:	2312      	movs	r3, #18
 8004f1a:	9209      	str	r2, [sp, #36]	; 0x24
 8004f1c:	e7cf      	b.n	8004ebe <_dtoa_r+0x266>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	9308      	str	r3, [sp, #32]
 8004f22:	e7f4      	b.n	8004f0e <_dtoa_r+0x2b6>
 8004f24:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004f28:	f8cd 9004 	str.w	r9, [sp, #4]
 8004f2c:	464b      	mov	r3, r9
 8004f2e:	e7c6      	b.n	8004ebe <_dtoa_r+0x266>
 8004f30:	3101      	adds	r1, #1
 8004f32:	6041      	str	r1, [r0, #4]
 8004f34:	0052      	lsls	r2, r2, #1
 8004f36:	e7c6      	b.n	8004ec6 <_dtoa_r+0x26e>
 8004f38:	636f4361 	.word	0x636f4361
 8004f3c:	3fd287a7 	.word	0x3fd287a7
 8004f40:	8b60c8b3 	.word	0x8b60c8b3
 8004f44:	3fc68a28 	.word	0x3fc68a28
 8004f48:	509f79fb 	.word	0x509f79fb
 8004f4c:	3fd34413 	.word	0x3fd34413
 8004f50:	08007085 	.word	0x08007085
 8004f54:	0800709c 	.word	0x0800709c
 8004f58:	7ff00000 	.word	0x7ff00000
 8004f5c:	08007081 	.word	0x08007081
 8004f60:	08007078 	.word	0x08007078
 8004f64:	08007055 	.word	0x08007055
 8004f68:	3ff80000 	.word	0x3ff80000
 8004f6c:	080071f8 	.word	0x080071f8
 8004f70:	080070fb 	.word	0x080070fb
 8004f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f76:	9a00      	ldr	r2, [sp, #0]
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	9b01      	ldr	r3, [sp, #4]
 8004f7c:	2b0e      	cmp	r3, #14
 8004f7e:	f200 80ad 	bhi.w	80050dc <_dtoa_r+0x484>
 8004f82:	2d00      	cmp	r5, #0
 8004f84:	f000 80aa 	beq.w	80050dc <_dtoa_r+0x484>
 8004f88:	f1ba 0f00 	cmp.w	sl, #0
 8004f8c:	dd36      	ble.n	8004ffc <_dtoa_r+0x3a4>
 8004f8e:	4ac3      	ldr	r2, [pc, #780]	; (800529c <_dtoa_r+0x644>)
 8004f90:	f00a 030f 	and.w	r3, sl, #15
 8004f94:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004f98:	ed93 7b00 	vldr	d7, [r3]
 8004f9c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fa0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004fa4:	eeb0 8a47 	vmov.f32	s16, s14
 8004fa8:	eef0 8a67 	vmov.f32	s17, s15
 8004fac:	d016      	beq.n	8004fdc <_dtoa_r+0x384>
 8004fae:	4bbc      	ldr	r3, [pc, #752]	; (80052a0 <_dtoa_r+0x648>)
 8004fb0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004fb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fb8:	f7fb fc50 	bl	800085c <__aeabi_ddiv>
 8004fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fc0:	f007 070f 	and.w	r7, r7, #15
 8004fc4:	2503      	movs	r5, #3
 8004fc6:	4eb6      	ldr	r6, [pc, #728]	; (80052a0 <_dtoa_r+0x648>)
 8004fc8:	b957      	cbnz	r7, 8004fe0 <_dtoa_r+0x388>
 8004fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fce:	ec53 2b18 	vmov	r2, r3, d8
 8004fd2:	f7fb fc43 	bl	800085c <__aeabi_ddiv>
 8004fd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004fda:	e029      	b.n	8005030 <_dtoa_r+0x3d8>
 8004fdc:	2502      	movs	r5, #2
 8004fde:	e7f2      	b.n	8004fc6 <_dtoa_r+0x36e>
 8004fe0:	07f9      	lsls	r1, r7, #31
 8004fe2:	d508      	bpl.n	8004ff6 <_dtoa_r+0x39e>
 8004fe4:	ec51 0b18 	vmov	r0, r1, d8
 8004fe8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004fec:	f7fb fb0c 	bl	8000608 <__aeabi_dmul>
 8004ff0:	ec41 0b18 	vmov	d8, r0, r1
 8004ff4:	3501      	adds	r5, #1
 8004ff6:	107f      	asrs	r7, r7, #1
 8004ff8:	3608      	adds	r6, #8
 8004ffa:	e7e5      	b.n	8004fc8 <_dtoa_r+0x370>
 8004ffc:	f000 80a6 	beq.w	800514c <_dtoa_r+0x4f4>
 8005000:	f1ca 0600 	rsb	r6, sl, #0
 8005004:	4ba5      	ldr	r3, [pc, #660]	; (800529c <_dtoa_r+0x644>)
 8005006:	4fa6      	ldr	r7, [pc, #664]	; (80052a0 <_dtoa_r+0x648>)
 8005008:	f006 020f 	and.w	r2, r6, #15
 800500c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005018:	f7fb faf6 	bl	8000608 <__aeabi_dmul>
 800501c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005020:	1136      	asrs	r6, r6, #4
 8005022:	2300      	movs	r3, #0
 8005024:	2502      	movs	r5, #2
 8005026:	2e00      	cmp	r6, #0
 8005028:	f040 8085 	bne.w	8005136 <_dtoa_r+0x4de>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d1d2      	bne.n	8004fd6 <_dtoa_r+0x37e>
 8005030:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 808c 	beq.w	8005150 <_dtoa_r+0x4f8>
 8005038:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800503c:	4b99      	ldr	r3, [pc, #612]	; (80052a4 <_dtoa_r+0x64c>)
 800503e:	2200      	movs	r2, #0
 8005040:	4630      	mov	r0, r6
 8005042:	4639      	mov	r1, r7
 8005044:	f7fb fd52 	bl	8000aec <__aeabi_dcmplt>
 8005048:	2800      	cmp	r0, #0
 800504a:	f000 8081 	beq.w	8005150 <_dtoa_r+0x4f8>
 800504e:	9b01      	ldr	r3, [sp, #4]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d07d      	beq.n	8005150 <_dtoa_r+0x4f8>
 8005054:	f1b9 0f00 	cmp.w	r9, #0
 8005058:	dd3c      	ble.n	80050d4 <_dtoa_r+0x47c>
 800505a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800505e:	9307      	str	r3, [sp, #28]
 8005060:	2200      	movs	r2, #0
 8005062:	4b91      	ldr	r3, [pc, #580]	; (80052a8 <_dtoa_r+0x650>)
 8005064:	4630      	mov	r0, r6
 8005066:	4639      	mov	r1, r7
 8005068:	f7fb face 	bl	8000608 <__aeabi_dmul>
 800506c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005070:	3501      	adds	r5, #1
 8005072:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005076:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800507a:	4628      	mov	r0, r5
 800507c:	f7fb fa5a 	bl	8000534 <__aeabi_i2d>
 8005080:	4632      	mov	r2, r6
 8005082:	463b      	mov	r3, r7
 8005084:	f7fb fac0 	bl	8000608 <__aeabi_dmul>
 8005088:	4b88      	ldr	r3, [pc, #544]	; (80052ac <_dtoa_r+0x654>)
 800508a:	2200      	movs	r2, #0
 800508c:	f7fb f906 	bl	800029c <__adddf3>
 8005090:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005094:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005098:	9303      	str	r3, [sp, #12]
 800509a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800509c:	2b00      	cmp	r3, #0
 800509e:	d15c      	bne.n	800515a <_dtoa_r+0x502>
 80050a0:	4b83      	ldr	r3, [pc, #524]	; (80052b0 <_dtoa_r+0x658>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	4630      	mov	r0, r6
 80050a6:	4639      	mov	r1, r7
 80050a8:	f7fb f8f6 	bl	8000298 <__aeabi_dsub>
 80050ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80050b0:	4606      	mov	r6, r0
 80050b2:	460f      	mov	r7, r1
 80050b4:	f7fb fd38 	bl	8000b28 <__aeabi_dcmpgt>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	f040 8296 	bne.w	80055ea <_dtoa_r+0x992>
 80050be:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80050c2:	4630      	mov	r0, r6
 80050c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb fd0f 	bl	8000aec <__aeabi_dcmplt>
 80050ce:	2800      	cmp	r0, #0
 80050d0:	f040 8288 	bne.w	80055e4 <_dtoa_r+0x98c>
 80050d4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80050d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80050dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f2c0 8158 	blt.w	8005394 <_dtoa_r+0x73c>
 80050e4:	f1ba 0f0e 	cmp.w	sl, #14
 80050e8:	f300 8154 	bgt.w	8005394 <_dtoa_r+0x73c>
 80050ec:	4b6b      	ldr	r3, [pc, #428]	; (800529c <_dtoa_r+0x644>)
 80050ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80050f2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f280 80e3 	bge.w	80052c4 <_dtoa_r+0x66c>
 80050fe:	9b01      	ldr	r3, [sp, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	f300 80df 	bgt.w	80052c4 <_dtoa_r+0x66c>
 8005106:	f040 826d 	bne.w	80055e4 <_dtoa_r+0x98c>
 800510a:	4b69      	ldr	r3, [pc, #420]	; (80052b0 <_dtoa_r+0x658>)
 800510c:	2200      	movs	r2, #0
 800510e:	4640      	mov	r0, r8
 8005110:	4649      	mov	r1, r9
 8005112:	f7fb fa79 	bl	8000608 <__aeabi_dmul>
 8005116:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800511a:	f7fb fcfb 	bl	8000b14 <__aeabi_dcmpge>
 800511e:	9e01      	ldr	r6, [sp, #4]
 8005120:	4637      	mov	r7, r6
 8005122:	2800      	cmp	r0, #0
 8005124:	f040 8243 	bne.w	80055ae <_dtoa_r+0x956>
 8005128:	9d00      	ldr	r5, [sp, #0]
 800512a:	2331      	movs	r3, #49	; 0x31
 800512c:	f805 3b01 	strb.w	r3, [r5], #1
 8005130:	f10a 0a01 	add.w	sl, sl, #1
 8005134:	e23f      	b.n	80055b6 <_dtoa_r+0x95e>
 8005136:	07f2      	lsls	r2, r6, #31
 8005138:	d505      	bpl.n	8005146 <_dtoa_r+0x4ee>
 800513a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513e:	f7fb fa63 	bl	8000608 <__aeabi_dmul>
 8005142:	3501      	adds	r5, #1
 8005144:	2301      	movs	r3, #1
 8005146:	1076      	asrs	r6, r6, #1
 8005148:	3708      	adds	r7, #8
 800514a:	e76c      	b.n	8005026 <_dtoa_r+0x3ce>
 800514c:	2502      	movs	r5, #2
 800514e:	e76f      	b.n	8005030 <_dtoa_r+0x3d8>
 8005150:	9b01      	ldr	r3, [sp, #4]
 8005152:	f8cd a01c 	str.w	sl, [sp, #28]
 8005156:	930c      	str	r3, [sp, #48]	; 0x30
 8005158:	e78d      	b.n	8005076 <_dtoa_r+0x41e>
 800515a:	9900      	ldr	r1, [sp, #0]
 800515c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800515e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005160:	4b4e      	ldr	r3, [pc, #312]	; (800529c <_dtoa_r+0x644>)
 8005162:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005166:	4401      	add	r1, r0
 8005168:	9102      	str	r1, [sp, #8]
 800516a:	9908      	ldr	r1, [sp, #32]
 800516c:	eeb0 8a47 	vmov.f32	s16, s14
 8005170:	eef0 8a67 	vmov.f32	s17, s15
 8005174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005178:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800517c:	2900      	cmp	r1, #0
 800517e:	d045      	beq.n	800520c <_dtoa_r+0x5b4>
 8005180:	494c      	ldr	r1, [pc, #304]	; (80052b4 <_dtoa_r+0x65c>)
 8005182:	2000      	movs	r0, #0
 8005184:	f7fb fb6a 	bl	800085c <__aeabi_ddiv>
 8005188:	ec53 2b18 	vmov	r2, r3, d8
 800518c:	f7fb f884 	bl	8000298 <__aeabi_dsub>
 8005190:	9d00      	ldr	r5, [sp, #0]
 8005192:	ec41 0b18 	vmov	d8, r0, r1
 8005196:	4639      	mov	r1, r7
 8005198:	4630      	mov	r0, r6
 800519a:	f7fb fce5 	bl	8000b68 <__aeabi_d2iz>
 800519e:	900c      	str	r0, [sp, #48]	; 0x30
 80051a0:	f7fb f9c8 	bl	8000534 <__aeabi_i2d>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4630      	mov	r0, r6
 80051aa:	4639      	mov	r1, r7
 80051ac:	f7fb f874 	bl	8000298 <__aeabi_dsub>
 80051b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80051b2:	3330      	adds	r3, #48	; 0x30
 80051b4:	f805 3b01 	strb.w	r3, [r5], #1
 80051b8:	ec53 2b18 	vmov	r2, r3, d8
 80051bc:	4606      	mov	r6, r0
 80051be:	460f      	mov	r7, r1
 80051c0:	f7fb fc94 	bl	8000aec <__aeabi_dcmplt>
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d165      	bne.n	8005294 <_dtoa_r+0x63c>
 80051c8:	4632      	mov	r2, r6
 80051ca:	463b      	mov	r3, r7
 80051cc:	4935      	ldr	r1, [pc, #212]	; (80052a4 <_dtoa_r+0x64c>)
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fb f862 	bl	8000298 <__aeabi_dsub>
 80051d4:	ec53 2b18 	vmov	r2, r3, d8
 80051d8:	f7fb fc88 	bl	8000aec <__aeabi_dcmplt>
 80051dc:	2800      	cmp	r0, #0
 80051de:	f040 80b9 	bne.w	8005354 <_dtoa_r+0x6fc>
 80051e2:	9b02      	ldr	r3, [sp, #8]
 80051e4:	429d      	cmp	r5, r3
 80051e6:	f43f af75 	beq.w	80050d4 <_dtoa_r+0x47c>
 80051ea:	4b2f      	ldr	r3, [pc, #188]	; (80052a8 <_dtoa_r+0x650>)
 80051ec:	ec51 0b18 	vmov	r0, r1, d8
 80051f0:	2200      	movs	r2, #0
 80051f2:	f7fb fa09 	bl	8000608 <__aeabi_dmul>
 80051f6:	4b2c      	ldr	r3, [pc, #176]	; (80052a8 <_dtoa_r+0x650>)
 80051f8:	ec41 0b18 	vmov	d8, r0, r1
 80051fc:	2200      	movs	r2, #0
 80051fe:	4630      	mov	r0, r6
 8005200:	4639      	mov	r1, r7
 8005202:	f7fb fa01 	bl	8000608 <__aeabi_dmul>
 8005206:	4606      	mov	r6, r0
 8005208:	460f      	mov	r7, r1
 800520a:	e7c4      	b.n	8005196 <_dtoa_r+0x53e>
 800520c:	ec51 0b17 	vmov	r0, r1, d7
 8005210:	f7fb f9fa 	bl	8000608 <__aeabi_dmul>
 8005214:	9b02      	ldr	r3, [sp, #8]
 8005216:	9d00      	ldr	r5, [sp, #0]
 8005218:	930c      	str	r3, [sp, #48]	; 0x30
 800521a:	ec41 0b18 	vmov	d8, r0, r1
 800521e:	4639      	mov	r1, r7
 8005220:	4630      	mov	r0, r6
 8005222:	f7fb fca1 	bl	8000b68 <__aeabi_d2iz>
 8005226:	9011      	str	r0, [sp, #68]	; 0x44
 8005228:	f7fb f984 	bl	8000534 <__aeabi_i2d>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4630      	mov	r0, r6
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb f830 	bl	8000298 <__aeabi_dsub>
 8005238:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800523a:	3330      	adds	r3, #48	; 0x30
 800523c:	f805 3b01 	strb.w	r3, [r5], #1
 8005240:	9b02      	ldr	r3, [sp, #8]
 8005242:	429d      	cmp	r5, r3
 8005244:	4606      	mov	r6, r0
 8005246:	460f      	mov	r7, r1
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	d134      	bne.n	80052b8 <_dtoa_r+0x660>
 800524e:	4b19      	ldr	r3, [pc, #100]	; (80052b4 <_dtoa_r+0x65c>)
 8005250:	ec51 0b18 	vmov	r0, r1, d8
 8005254:	f7fb f822 	bl	800029c <__adddf3>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4630      	mov	r0, r6
 800525e:	4639      	mov	r1, r7
 8005260:	f7fb fc62 	bl	8000b28 <__aeabi_dcmpgt>
 8005264:	2800      	cmp	r0, #0
 8005266:	d175      	bne.n	8005354 <_dtoa_r+0x6fc>
 8005268:	ec53 2b18 	vmov	r2, r3, d8
 800526c:	4911      	ldr	r1, [pc, #68]	; (80052b4 <_dtoa_r+0x65c>)
 800526e:	2000      	movs	r0, #0
 8005270:	f7fb f812 	bl	8000298 <__aeabi_dsub>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4630      	mov	r0, r6
 800527a:	4639      	mov	r1, r7
 800527c:	f7fb fc36 	bl	8000aec <__aeabi_dcmplt>
 8005280:	2800      	cmp	r0, #0
 8005282:	f43f af27 	beq.w	80050d4 <_dtoa_r+0x47c>
 8005286:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005288:	1e6b      	subs	r3, r5, #1
 800528a:	930c      	str	r3, [sp, #48]	; 0x30
 800528c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005290:	2b30      	cmp	r3, #48	; 0x30
 8005292:	d0f8      	beq.n	8005286 <_dtoa_r+0x62e>
 8005294:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005298:	e04a      	b.n	8005330 <_dtoa_r+0x6d8>
 800529a:	bf00      	nop
 800529c:	080071f8 	.word	0x080071f8
 80052a0:	080071d0 	.word	0x080071d0
 80052a4:	3ff00000 	.word	0x3ff00000
 80052a8:	40240000 	.word	0x40240000
 80052ac:	401c0000 	.word	0x401c0000
 80052b0:	40140000 	.word	0x40140000
 80052b4:	3fe00000 	.word	0x3fe00000
 80052b8:	4baf      	ldr	r3, [pc, #700]	; (8005578 <_dtoa_r+0x920>)
 80052ba:	f7fb f9a5 	bl	8000608 <__aeabi_dmul>
 80052be:	4606      	mov	r6, r0
 80052c0:	460f      	mov	r7, r1
 80052c2:	e7ac      	b.n	800521e <_dtoa_r+0x5c6>
 80052c4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80052c8:	9d00      	ldr	r5, [sp, #0]
 80052ca:	4642      	mov	r2, r8
 80052cc:	464b      	mov	r3, r9
 80052ce:	4630      	mov	r0, r6
 80052d0:	4639      	mov	r1, r7
 80052d2:	f7fb fac3 	bl	800085c <__aeabi_ddiv>
 80052d6:	f7fb fc47 	bl	8000b68 <__aeabi_d2iz>
 80052da:	9002      	str	r0, [sp, #8]
 80052dc:	f7fb f92a 	bl	8000534 <__aeabi_i2d>
 80052e0:	4642      	mov	r2, r8
 80052e2:	464b      	mov	r3, r9
 80052e4:	f7fb f990 	bl	8000608 <__aeabi_dmul>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4630      	mov	r0, r6
 80052ee:	4639      	mov	r1, r7
 80052f0:	f7fa ffd2 	bl	8000298 <__aeabi_dsub>
 80052f4:	9e02      	ldr	r6, [sp, #8]
 80052f6:	9f01      	ldr	r7, [sp, #4]
 80052f8:	3630      	adds	r6, #48	; 0x30
 80052fa:	f805 6b01 	strb.w	r6, [r5], #1
 80052fe:	9e00      	ldr	r6, [sp, #0]
 8005300:	1bae      	subs	r6, r5, r6
 8005302:	42b7      	cmp	r7, r6
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	d137      	bne.n	800537a <_dtoa_r+0x722>
 800530a:	f7fa ffc7 	bl	800029c <__adddf3>
 800530e:	4642      	mov	r2, r8
 8005310:	464b      	mov	r3, r9
 8005312:	4606      	mov	r6, r0
 8005314:	460f      	mov	r7, r1
 8005316:	f7fb fc07 	bl	8000b28 <__aeabi_dcmpgt>
 800531a:	b9c8      	cbnz	r0, 8005350 <_dtoa_r+0x6f8>
 800531c:	4642      	mov	r2, r8
 800531e:	464b      	mov	r3, r9
 8005320:	4630      	mov	r0, r6
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fbd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8005328:	b110      	cbz	r0, 8005330 <_dtoa_r+0x6d8>
 800532a:	9b02      	ldr	r3, [sp, #8]
 800532c:	07d9      	lsls	r1, r3, #31
 800532e:	d40f      	bmi.n	8005350 <_dtoa_r+0x6f8>
 8005330:	4620      	mov	r0, r4
 8005332:	4659      	mov	r1, fp
 8005334:	f000 fbd0 	bl	8005ad8 <_Bfree>
 8005338:	2300      	movs	r3, #0
 800533a:	702b      	strb	r3, [r5, #0]
 800533c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800533e:	f10a 0001 	add.w	r0, sl, #1
 8005342:	6018      	str	r0, [r3, #0]
 8005344:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005346:	2b00      	cmp	r3, #0
 8005348:	f43f acd8 	beq.w	8004cfc <_dtoa_r+0xa4>
 800534c:	601d      	str	r5, [r3, #0]
 800534e:	e4d5      	b.n	8004cfc <_dtoa_r+0xa4>
 8005350:	f8cd a01c 	str.w	sl, [sp, #28]
 8005354:	462b      	mov	r3, r5
 8005356:	461d      	mov	r5, r3
 8005358:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800535c:	2a39      	cmp	r2, #57	; 0x39
 800535e:	d108      	bne.n	8005372 <_dtoa_r+0x71a>
 8005360:	9a00      	ldr	r2, [sp, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d1f7      	bne.n	8005356 <_dtoa_r+0x6fe>
 8005366:	9a07      	ldr	r2, [sp, #28]
 8005368:	9900      	ldr	r1, [sp, #0]
 800536a:	3201      	adds	r2, #1
 800536c:	9207      	str	r2, [sp, #28]
 800536e:	2230      	movs	r2, #48	; 0x30
 8005370:	700a      	strb	r2, [r1, #0]
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	3201      	adds	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	e78c      	b.n	8005294 <_dtoa_r+0x63c>
 800537a:	4b7f      	ldr	r3, [pc, #508]	; (8005578 <_dtoa_r+0x920>)
 800537c:	2200      	movs	r2, #0
 800537e:	f7fb f943 	bl	8000608 <__aeabi_dmul>
 8005382:	2200      	movs	r2, #0
 8005384:	2300      	movs	r3, #0
 8005386:	4606      	mov	r6, r0
 8005388:	460f      	mov	r7, r1
 800538a:	f7fb fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800538e:	2800      	cmp	r0, #0
 8005390:	d09b      	beq.n	80052ca <_dtoa_r+0x672>
 8005392:	e7cd      	b.n	8005330 <_dtoa_r+0x6d8>
 8005394:	9a08      	ldr	r2, [sp, #32]
 8005396:	2a00      	cmp	r2, #0
 8005398:	f000 80c4 	beq.w	8005524 <_dtoa_r+0x8cc>
 800539c:	9a05      	ldr	r2, [sp, #20]
 800539e:	2a01      	cmp	r2, #1
 80053a0:	f300 80a8 	bgt.w	80054f4 <_dtoa_r+0x89c>
 80053a4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	f000 80a0 	beq.w	80054ec <_dtoa_r+0x894>
 80053ac:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053b0:	9e06      	ldr	r6, [sp, #24]
 80053b2:	4645      	mov	r5, r8
 80053b4:	9a04      	ldr	r2, [sp, #16]
 80053b6:	2101      	movs	r1, #1
 80053b8:	441a      	add	r2, r3
 80053ba:	4620      	mov	r0, r4
 80053bc:	4498      	add	r8, r3
 80053be:	9204      	str	r2, [sp, #16]
 80053c0:	f000 fc46 	bl	8005c50 <__i2b>
 80053c4:	4607      	mov	r7, r0
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	dd0b      	ble.n	80053e2 <_dtoa_r+0x78a>
 80053ca:	9b04      	ldr	r3, [sp, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dd08      	ble.n	80053e2 <_dtoa_r+0x78a>
 80053d0:	42ab      	cmp	r3, r5
 80053d2:	9a04      	ldr	r2, [sp, #16]
 80053d4:	bfa8      	it	ge
 80053d6:	462b      	movge	r3, r5
 80053d8:	eba8 0803 	sub.w	r8, r8, r3
 80053dc:	1aed      	subs	r5, r5, r3
 80053de:	1ad3      	subs	r3, r2, r3
 80053e0:	9304      	str	r3, [sp, #16]
 80053e2:	9b06      	ldr	r3, [sp, #24]
 80053e4:	b1fb      	cbz	r3, 8005426 <_dtoa_r+0x7ce>
 80053e6:	9b08      	ldr	r3, [sp, #32]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	f000 809f 	beq.w	800552c <_dtoa_r+0x8d4>
 80053ee:	2e00      	cmp	r6, #0
 80053f0:	dd11      	ble.n	8005416 <_dtoa_r+0x7be>
 80053f2:	4639      	mov	r1, r7
 80053f4:	4632      	mov	r2, r6
 80053f6:	4620      	mov	r0, r4
 80053f8:	f000 fce6 	bl	8005dc8 <__pow5mult>
 80053fc:	465a      	mov	r2, fp
 80053fe:	4601      	mov	r1, r0
 8005400:	4607      	mov	r7, r0
 8005402:	4620      	mov	r0, r4
 8005404:	f000 fc3a 	bl	8005c7c <__multiply>
 8005408:	4659      	mov	r1, fp
 800540a:	9007      	str	r0, [sp, #28]
 800540c:	4620      	mov	r0, r4
 800540e:	f000 fb63 	bl	8005ad8 <_Bfree>
 8005412:	9b07      	ldr	r3, [sp, #28]
 8005414:	469b      	mov	fp, r3
 8005416:	9b06      	ldr	r3, [sp, #24]
 8005418:	1b9a      	subs	r2, r3, r6
 800541a:	d004      	beq.n	8005426 <_dtoa_r+0x7ce>
 800541c:	4659      	mov	r1, fp
 800541e:	4620      	mov	r0, r4
 8005420:	f000 fcd2 	bl	8005dc8 <__pow5mult>
 8005424:	4683      	mov	fp, r0
 8005426:	2101      	movs	r1, #1
 8005428:	4620      	mov	r0, r4
 800542a:	f000 fc11 	bl	8005c50 <__i2b>
 800542e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005430:	2b00      	cmp	r3, #0
 8005432:	4606      	mov	r6, r0
 8005434:	dd7c      	ble.n	8005530 <_dtoa_r+0x8d8>
 8005436:	461a      	mov	r2, r3
 8005438:	4601      	mov	r1, r0
 800543a:	4620      	mov	r0, r4
 800543c:	f000 fcc4 	bl	8005dc8 <__pow5mult>
 8005440:	9b05      	ldr	r3, [sp, #20]
 8005442:	2b01      	cmp	r3, #1
 8005444:	4606      	mov	r6, r0
 8005446:	dd76      	ble.n	8005536 <_dtoa_r+0x8de>
 8005448:	2300      	movs	r3, #0
 800544a:	9306      	str	r3, [sp, #24]
 800544c:	6933      	ldr	r3, [r6, #16]
 800544e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005452:	6918      	ldr	r0, [r3, #16]
 8005454:	f000 fbac 	bl	8005bb0 <__hi0bits>
 8005458:	f1c0 0020 	rsb	r0, r0, #32
 800545c:	9b04      	ldr	r3, [sp, #16]
 800545e:	4418      	add	r0, r3
 8005460:	f010 001f 	ands.w	r0, r0, #31
 8005464:	f000 8086 	beq.w	8005574 <_dtoa_r+0x91c>
 8005468:	f1c0 0320 	rsb	r3, r0, #32
 800546c:	2b04      	cmp	r3, #4
 800546e:	dd7f      	ble.n	8005570 <_dtoa_r+0x918>
 8005470:	f1c0 001c 	rsb	r0, r0, #28
 8005474:	9b04      	ldr	r3, [sp, #16]
 8005476:	4403      	add	r3, r0
 8005478:	4480      	add	r8, r0
 800547a:	4405      	add	r5, r0
 800547c:	9304      	str	r3, [sp, #16]
 800547e:	f1b8 0f00 	cmp.w	r8, #0
 8005482:	dd05      	ble.n	8005490 <_dtoa_r+0x838>
 8005484:	4659      	mov	r1, fp
 8005486:	4642      	mov	r2, r8
 8005488:	4620      	mov	r0, r4
 800548a:	f000 fcf7 	bl	8005e7c <__lshift>
 800548e:	4683      	mov	fp, r0
 8005490:	9b04      	ldr	r3, [sp, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	dd05      	ble.n	80054a2 <_dtoa_r+0x84a>
 8005496:	4631      	mov	r1, r6
 8005498:	461a      	mov	r2, r3
 800549a:	4620      	mov	r0, r4
 800549c:	f000 fcee 	bl	8005e7c <__lshift>
 80054a0:	4606      	mov	r6, r0
 80054a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d069      	beq.n	800557c <_dtoa_r+0x924>
 80054a8:	4631      	mov	r1, r6
 80054aa:	4658      	mov	r0, fp
 80054ac:	f000 fd52 	bl	8005f54 <__mcmp>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	da63      	bge.n	800557c <_dtoa_r+0x924>
 80054b4:	2300      	movs	r3, #0
 80054b6:	4659      	mov	r1, fp
 80054b8:	220a      	movs	r2, #10
 80054ba:	4620      	mov	r0, r4
 80054bc:	f000 fb2e 	bl	8005b1c <__multadd>
 80054c0:	9b08      	ldr	r3, [sp, #32]
 80054c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054c6:	4683      	mov	fp, r0
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 818f 	beq.w	80057ec <_dtoa_r+0xb94>
 80054ce:	4639      	mov	r1, r7
 80054d0:	2300      	movs	r3, #0
 80054d2:	220a      	movs	r2, #10
 80054d4:	4620      	mov	r0, r4
 80054d6:	f000 fb21 	bl	8005b1c <__multadd>
 80054da:	f1b9 0f00 	cmp.w	r9, #0
 80054de:	4607      	mov	r7, r0
 80054e0:	f300 808e 	bgt.w	8005600 <_dtoa_r+0x9a8>
 80054e4:	9b05      	ldr	r3, [sp, #20]
 80054e6:	2b02      	cmp	r3, #2
 80054e8:	dc50      	bgt.n	800558c <_dtoa_r+0x934>
 80054ea:	e089      	b.n	8005600 <_dtoa_r+0x9a8>
 80054ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80054ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80054f2:	e75d      	b.n	80053b0 <_dtoa_r+0x758>
 80054f4:	9b01      	ldr	r3, [sp, #4]
 80054f6:	1e5e      	subs	r6, r3, #1
 80054f8:	9b06      	ldr	r3, [sp, #24]
 80054fa:	42b3      	cmp	r3, r6
 80054fc:	bfbf      	itttt	lt
 80054fe:	9b06      	ldrlt	r3, [sp, #24]
 8005500:	9606      	strlt	r6, [sp, #24]
 8005502:	1af2      	sublt	r2, r6, r3
 8005504:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005506:	bfb6      	itet	lt
 8005508:	189b      	addlt	r3, r3, r2
 800550a:	1b9e      	subge	r6, r3, r6
 800550c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800550e:	9b01      	ldr	r3, [sp, #4]
 8005510:	bfb8      	it	lt
 8005512:	2600      	movlt	r6, #0
 8005514:	2b00      	cmp	r3, #0
 8005516:	bfb5      	itete	lt
 8005518:	eba8 0503 	sublt.w	r5, r8, r3
 800551c:	9b01      	ldrge	r3, [sp, #4]
 800551e:	2300      	movlt	r3, #0
 8005520:	4645      	movge	r5, r8
 8005522:	e747      	b.n	80053b4 <_dtoa_r+0x75c>
 8005524:	9e06      	ldr	r6, [sp, #24]
 8005526:	9f08      	ldr	r7, [sp, #32]
 8005528:	4645      	mov	r5, r8
 800552a:	e74c      	b.n	80053c6 <_dtoa_r+0x76e>
 800552c:	9a06      	ldr	r2, [sp, #24]
 800552e:	e775      	b.n	800541c <_dtoa_r+0x7c4>
 8005530:	9b05      	ldr	r3, [sp, #20]
 8005532:	2b01      	cmp	r3, #1
 8005534:	dc18      	bgt.n	8005568 <_dtoa_r+0x910>
 8005536:	9b02      	ldr	r3, [sp, #8]
 8005538:	b9b3      	cbnz	r3, 8005568 <_dtoa_r+0x910>
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005540:	b9a3      	cbnz	r3, 800556c <_dtoa_r+0x914>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005548:	0d1b      	lsrs	r3, r3, #20
 800554a:	051b      	lsls	r3, r3, #20
 800554c:	b12b      	cbz	r3, 800555a <_dtoa_r+0x902>
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	3301      	adds	r3, #1
 8005552:	9304      	str	r3, [sp, #16]
 8005554:	f108 0801 	add.w	r8, r8, #1
 8005558:	2301      	movs	r3, #1
 800555a:	9306      	str	r3, [sp, #24]
 800555c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800555e:	2b00      	cmp	r3, #0
 8005560:	f47f af74 	bne.w	800544c <_dtoa_r+0x7f4>
 8005564:	2001      	movs	r0, #1
 8005566:	e779      	b.n	800545c <_dtoa_r+0x804>
 8005568:	2300      	movs	r3, #0
 800556a:	e7f6      	b.n	800555a <_dtoa_r+0x902>
 800556c:	9b02      	ldr	r3, [sp, #8]
 800556e:	e7f4      	b.n	800555a <_dtoa_r+0x902>
 8005570:	d085      	beq.n	800547e <_dtoa_r+0x826>
 8005572:	4618      	mov	r0, r3
 8005574:	301c      	adds	r0, #28
 8005576:	e77d      	b.n	8005474 <_dtoa_r+0x81c>
 8005578:	40240000 	.word	0x40240000
 800557c:	9b01      	ldr	r3, [sp, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	dc38      	bgt.n	80055f4 <_dtoa_r+0x99c>
 8005582:	9b05      	ldr	r3, [sp, #20]
 8005584:	2b02      	cmp	r3, #2
 8005586:	dd35      	ble.n	80055f4 <_dtoa_r+0x99c>
 8005588:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800558c:	f1b9 0f00 	cmp.w	r9, #0
 8005590:	d10d      	bne.n	80055ae <_dtoa_r+0x956>
 8005592:	4631      	mov	r1, r6
 8005594:	464b      	mov	r3, r9
 8005596:	2205      	movs	r2, #5
 8005598:	4620      	mov	r0, r4
 800559a:	f000 fabf 	bl	8005b1c <__multadd>
 800559e:	4601      	mov	r1, r0
 80055a0:	4606      	mov	r6, r0
 80055a2:	4658      	mov	r0, fp
 80055a4:	f000 fcd6 	bl	8005f54 <__mcmp>
 80055a8:	2800      	cmp	r0, #0
 80055aa:	f73f adbd 	bgt.w	8005128 <_dtoa_r+0x4d0>
 80055ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b0:	9d00      	ldr	r5, [sp, #0]
 80055b2:	ea6f 0a03 	mvn.w	sl, r3
 80055b6:	f04f 0800 	mov.w	r8, #0
 80055ba:	4631      	mov	r1, r6
 80055bc:	4620      	mov	r0, r4
 80055be:	f000 fa8b 	bl	8005ad8 <_Bfree>
 80055c2:	2f00      	cmp	r7, #0
 80055c4:	f43f aeb4 	beq.w	8005330 <_dtoa_r+0x6d8>
 80055c8:	f1b8 0f00 	cmp.w	r8, #0
 80055cc:	d005      	beq.n	80055da <_dtoa_r+0x982>
 80055ce:	45b8      	cmp	r8, r7
 80055d0:	d003      	beq.n	80055da <_dtoa_r+0x982>
 80055d2:	4641      	mov	r1, r8
 80055d4:	4620      	mov	r0, r4
 80055d6:	f000 fa7f 	bl	8005ad8 <_Bfree>
 80055da:	4639      	mov	r1, r7
 80055dc:	4620      	mov	r0, r4
 80055de:	f000 fa7b 	bl	8005ad8 <_Bfree>
 80055e2:	e6a5      	b.n	8005330 <_dtoa_r+0x6d8>
 80055e4:	2600      	movs	r6, #0
 80055e6:	4637      	mov	r7, r6
 80055e8:	e7e1      	b.n	80055ae <_dtoa_r+0x956>
 80055ea:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80055ec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80055f0:	4637      	mov	r7, r6
 80055f2:	e599      	b.n	8005128 <_dtoa_r+0x4d0>
 80055f4:	9b08      	ldr	r3, [sp, #32]
 80055f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80fd 	beq.w	80057fa <_dtoa_r+0xba2>
 8005600:	2d00      	cmp	r5, #0
 8005602:	dd05      	ble.n	8005610 <_dtoa_r+0x9b8>
 8005604:	4639      	mov	r1, r7
 8005606:	462a      	mov	r2, r5
 8005608:	4620      	mov	r0, r4
 800560a:	f000 fc37 	bl	8005e7c <__lshift>
 800560e:	4607      	mov	r7, r0
 8005610:	9b06      	ldr	r3, [sp, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d05c      	beq.n	80056d0 <_dtoa_r+0xa78>
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4620      	mov	r0, r4
 800561a:	f000 fa1d 	bl	8005a58 <_Balloc>
 800561e:	4605      	mov	r5, r0
 8005620:	b928      	cbnz	r0, 800562e <_dtoa_r+0x9d6>
 8005622:	4b80      	ldr	r3, [pc, #512]	; (8005824 <_dtoa_r+0xbcc>)
 8005624:	4602      	mov	r2, r0
 8005626:	f240 21ea 	movw	r1, #746	; 0x2ea
 800562a:	f7ff bb2e 	b.w	8004c8a <_dtoa_r+0x32>
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	3202      	adds	r2, #2
 8005632:	0092      	lsls	r2, r2, #2
 8005634:	f107 010c 	add.w	r1, r7, #12
 8005638:	300c      	adds	r0, #12
 800563a:	f000 f9ff 	bl	8005a3c <memcpy>
 800563e:	2201      	movs	r2, #1
 8005640:	4629      	mov	r1, r5
 8005642:	4620      	mov	r0, r4
 8005644:	f000 fc1a 	bl	8005e7c <__lshift>
 8005648:	9b00      	ldr	r3, [sp, #0]
 800564a:	3301      	adds	r3, #1
 800564c:	9301      	str	r3, [sp, #4]
 800564e:	9b00      	ldr	r3, [sp, #0]
 8005650:	444b      	add	r3, r9
 8005652:	9307      	str	r3, [sp, #28]
 8005654:	9b02      	ldr	r3, [sp, #8]
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	46b8      	mov	r8, r7
 800565c:	9306      	str	r3, [sp, #24]
 800565e:	4607      	mov	r7, r0
 8005660:	9b01      	ldr	r3, [sp, #4]
 8005662:	4631      	mov	r1, r6
 8005664:	3b01      	subs	r3, #1
 8005666:	4658      	mov	r0, fp
 8005668:	9302      	str	r3, [sp, #8]
 800566a:	f7ff fa69 	bl	8004b40 <quorem>
 800566e:	4603      	mov	r3, r0
 8005670:	3330      	adds	r3, #48	; 0x30
 8005672:	9004      	str	r0, [sp, #16]
 8005674:	4641      	mov	r1, r8
 8005676:	4658      	mov	r0, fp
 8005678:	9308      	str	r3, [sp, #32]
 800567a:	f000 fc6b 	bl	8005f54 <__mcmp>
 800567e:	463a      	mov	r2, r7
 8005680:	4681      	mov	r9, r0
 8005682:	4631      	mov	r1, r6
 8005684:	4620      	mov	r0, r4
 8005686:	f000 fc81 	bl	8005f8c <__mdiff>
 800568a:	68c2      	ldr	r2, [r0, #12]
 800568c:	9b08      	ldr	r3, [sp, #32]
 800568e:	4605      	mov	r5, r0
 8005690:	bb02      	cbnz	r2, 80056d4 <_dtoa_r+0xa7c>
 8005692:	4601      	mov	r1, r0
 8005694:	4658      	mov	r0, fp
 8005696:	f000 fc5d 	bl	8005f54 <__mcmp>
 800569a:	9b08      	ldr	r3, [sp, #32]
 800569c:	4602      	mov	r2, r0
 800569e:	4629      	mov	r1, r5
 80056a0:	4620      	mov	r0, r4
 80056a2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80056a6:	f000 fa17 	bl	8005ad8 <_Bfree>
 80056aa:	9b05      	ldr	r3, [sp, #20]
 80056ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056ae:	9d01      	ldr	r5, [sp, #4]
 80056b0:	ea43 0102 	orr.w	r1, r3, r2
 80056b4:	9b06      	ldr	r3, [sp, #24]
 80056b6:	430b      	orrs	r3, r1
 80056b8:	9b08      	ldr	r3, [sp, #32]
 80056ba:	d10d      	bne.n	80056d8 <_dtoa_r+0xa80>
 80056bc:	2b39      	cmp	r3, #57	; 0x39
 80056be:	d029      	beq.n	8005714 <_dtoa_r+0xabc>
 80056c0:	f1b9 0f00 	cmp.w	r9, #0
 80056c4:	dd01      	ble.n	80056ca <_dtoa_r+0xa72>
 80056c6:	9b04      	ldr	r3, [sp, #16]
 80056c8:	3331      	adds	r3, #49	; 0x31
 80056ca:	9a02      	ldr	r2, [sp, #8]
 80056cc:	7013      	strb	r3, [r2, #0]
 80056ce:	e774      	b.n	80055ba <_dtoa_r+0x962>
 80056d0:	4638      	mov	r0, r7
 80056d2:	e7b9      	b.n	8005648 <_dtoa_r+0x9f0>
 80056d4:	2201      	movs	r2, #1
 80056d6:	e7e2      	b.n	800569e <_dtoa_r+0xa46>
 80056d8:	f1b9 0f00 	cmp.w	r9, #0
 80056dc:	db06      	blt.n	80056ec <_dtoa_r+0xa94>
 80056de:	9905      	ldr	r1, [sp, #20]
 80056e0:	ea41 0909 	orr.w	r9, r1, r9
 80056e4:	9906      	ldr	r1, [sp, #24]
 80056e6:	ea59 0101 	orrs.w	r1, r9, r1
 80056ea:	d120      	bne.n	800572e <_dtoa_r+0xad6>
 80056ec:	2a00      	cmp	r2, #0
 80056ee:	ddec      	ble.n	80056ca <_dtoa_r+0xa72>
 80056f0:	4659      	mov	r1, fp
 80056f2:	2201      	movs	r2, #1
 80056f4:	4620      	mov	r0, r4
 80056f6:	9301      	str	r3, [sp, #4]
 80056f8:	f000 fbc0 	bl	8005e7c <__lshift>
 80056fc:	4631      	mov	r1, r6
 80056fe:	4683      	mov	fp, r0
 8005700:	f000 fc28 	bl	8005f54 <__mcmp>
 8005704:	2800      	cmp	r0, #0
 8005706:	9b01      	ldr	r3, [sp, #4]
 8005708:	dc02      	bgt.n	8005710 <_dtoa_r+0xab8>
 800570a:	d1de      	bne.n	80056ca <_dtoa_r+0xa72>
 800570c:	07da      	lsls	r2, r3, #31
 800570e:	d5dc      	bpl.n	80056ca <_dtoa_r+0xa72>
 8005710:	2b39      	cmp	r3, #57	; 0x39
 8005712:	d1d8      	bne.n	80056c6 <_dtoa_r+0xa6e>
 8005714:	9a02      	ldr	r2, [sp, #8]
 8005716:	2339      	movs	r3, #57	; 0x39
 8005718:	7013      	strb	r3, [r2, #0]
 800571a:	462b      	mov	r3, r5
 800571c:	461d      	mov	r5, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005724:	2a39      	cmp	r2, #57	; 0x39
 8005726:	d050      	beq.n	80057ca <_dtoa_r+0xb72>
 8005728:	3201      	adds	r2, #1
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	e745      	b.n	80055ba <_dtoa_r+0x962>
 800572e:	2a00      	cmp	r2, #0
 8005730:	dd03      	ble.n	800573a <_dtoa_r+0xae2>
 8005732:	2b39      	cmp	r3, #57	; 0x39
 8005734:	d0ee      	beq.n	8005714 <_dtoa_r+0xabc>
 8005736:	3301      	adds	r3, #1
 8005738:	e7c7      	b.n	80056ca <_dtoa_r+0xa72>
 800573a:	9a01      	ldr	r2, [sp, #4]
 800573c:	9907      	ldr	r1, [sp, #28]
 800573e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005742:	428a      	cmp	r2, r1
 8005744:	d02a      	beq.n	800579c <_dtoa_r+0xb44>
 8005746:	4659      	mov	r1, fp
 8005748:	2300      	movs	r3, #0
 800574a:	220a      	movs	r2, #10
 800574c:	4620      	mov	r0, r4
 800574e:	f000 f9e5 	bl	8005b1c <__multadd>
 8005752:	45b8      	cmp	r8, r7
 8005754:	4683      	mov	fp, r0
 8005756:	f04f 0300 	mov.w	r3, #0
 800575a:	f04f 020a 	mov.w	r2, #10
 800575e:	4641      	mov	r1, r8
 8005760:	4620      	mov	r0, r4
 8005762:	d107      	bne.n	8005774 <_dtoa_r+0xb1c>
 8005764:	f000 f9da 	bl	8005b1c <__multadd>
 8005768:	4680      	mov	r8, r0
 800576a:	4607      	mov	r7, r0
 800576c:	9b01      	ldr	r3, [sp, #4]
 800576e:	3301      	adds	r3, #1
 8005770:	9301      	str	r3, [sp, #4]
 8005772:	e775      	b.n	8005660 <_dtoa_r+0xa08>
 8005774:	f000 f9d2 	bl	8005b1c <__multadd>
 8005778:	4639      	mov	r1, r7
 800577a:	4680      	mov	r8, r0
 800577c:	2300      	movs	r3, #0
 800577e:	220a      	movs	r2, #10
 8005780:	4620      	mov	r0, r4
 8005782:	f000 f9cb 	bl	8005b1c <__multadd>
 8005786:	4607      	mov	r7, r0
 8005788:	e7f0      	b.n	800576c <_dtoa_r+0xb14>
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	9a00      	ldr	r2, [sp, #0]
 8005790:	bfcc      	ite	gt
 8005792:	464d      	movgt	r5, r9
 8005794:	2501      	movle	r5, #1
 8005796:	4415      	add	r5, r2
 8005798:	f04f 0800 	mov.w	r8, #0
 800579c:	4659      	mov	r1, fp
 800579e:	2201      	movs	r2, #1
 80057a0:	4620      	mov	r0, r4
 80057a2:	9301      	str	r3, [sp, #4]
 80057a4:	f000 fb6a 	bl	8005e7c <__lshift>
 80057a8:	4631      	mov	r1, r6
 80057aa:	4683      	mov	fp, r0
 80057ac:	f000 fbd2 	bl	8005f54 <__mcmp>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	dcb2      	bgt.n	800571a <_dtoa_r+0xac2>
 80057b4:	d102      	bne.n	80057bc <_dtoa_r+0xb64>
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	07db      	lsls	r3, r3, #31
 80057ba:	d4ae      	bmi.n	800571a <_dtoa_r+0xac2>
 80057bc:	462b      	mov	r3, r5
 80057be:	461d      	mov	r5, r3
 80057c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057c4:	2a30      	cmp	r2, #48	; 0x30
 80057c6:	d0fa      	beq.n	80057be <_dtoa_r+0xb66>
 80057c8:	e6f7      	b.n	80055ba <_dtoa_r+0x962>
 80057ca:	9a00      	ldr	r2, [sp, #0]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d1a5      	bne.n	800571c <_dtoa_r+0xac4>
 80057d0:	f10a 0a01 	add.w	sl, sl, #1
 80057d4:	2331      	movs	r3, #49	; 0x31
 80057d6:	e779      	b.n	80056cc <_dtoa_r+0xa74>
 80057d8:	4b13      	ldr	r3, [pc, #76]	; (8005828 <_dtoa_r+0xbd0>)
 80057da:	f7ff baaf 	b.w	8004d3c <_dtoa_r+0xe4>
 80057de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f47f aa86 	bne.w	8004cf2 <_dtoa_r+0x9a>
 80057e6:	4b11      	ldr	r3, [pc, #68]	; (800582c <_dtoa_r+0xbd4>)
 80057e8:	f7ff baa8 	b.w	8004d3c <_dtoa_r+0xe4>
 80057ec:	f1b9 0f00 	cmp.w	r9, #0
 80057f0:	dc03      	bgt.n	80057fa <_dtoa_r+0xba2>
 80057f2:	9b05      	ldr	r3, [sp, #20]
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	f73f aec9 	bgt.w	800558c <_dtoa_r+0x934>
 80057fa:	9d00      	ldr	r5, [sp, #0]
 80057fc:	4631      	mov	r1, r6
 80057fe:	4658      	mov	r0, fp
 8005800:	f7ff f99e 	bl	8004b40 <quorem>
 8005804:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005808:	f805 3b01 	strb.w	r3, [r5], #1
 800580c:	9a00      	ldr	r2, [sp, #0]
 800580e:	1aaa      	subs	r2, r5, r2
 8005810:	4591      	cmp	r9, r2
 8005812:	ddba      	ble.n	800578a <_dtoa_r+0xb32>
 8005814:	4659      	mov	r1, fp
 8005816:	2300      	movs	r3, #0
 8005818:	220a      	movs	r2, #10
 800581a:	4620      	mov	r0, r4
 800581c:	f000 f97e 	bl	8005b1c <__multadd>
 8005820:	4683      	mov	fp, r0
 8005822:	e7eb      	b.n	80057fc <_dtoa_r+0xba4>
 8005824:	080070fb 	.word	0x080070fb
 8005828:	08007054 	.word	0x08007054
 800582c:	08007078 	.word	0x08007078

08005830 <std>:
 8005830:	2300      	movs	r3, #0
 8005832:	b510      	push	{r4, lr}
 8005834:	4604      	mov	r4, r0
 8005836:	e9c0 3300 	strd	r3, r3, [r0]
 800583a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800583e:	6083      	str	r3, [r0, #8]
 8005840:	8181      	strh	r1, [r0, #12]
 8005842:	6643      	str	r3, [r0, #100]	; 0x64
 8005844:	81c2      	strh	r2, [r0, #14]
 8005846:	6183      	str	r3, [r0, #24]
 8005848:	4619      	mov	r1, r3
 800584a:	2208      	movs	r2, #8
 800584c:	305c      	adds	r0, #92	; 0x5c
 800584e:	f7fe fccd 	bl	80041ec <memset>
 8005852:	4b05      	ldr	r3, [pc, #20]	; (8005868 <std+0x38>)
 8005854:	6263      	str	r3, [r4, #36]	; 0x24
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <std+0x3c>)
 8005858:	62a3      	str	r3, [r4, #40]	; 0x28
 800585a:	4b05      	ldr	r3, [pc, #20]	; (8005870 <std+0x40>)
 800585c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800585e:	4b05      	ldr	r3, [pc, #20]	; (8005874 <std+0x44>)
 8005860:	6224      	str	r4, [r4, #32]
 8005862:	6323      	str	r3, [r4, #48]	; 0x30
 8005864:	bd10      	pop	{r4, pc}
 8005866:	bf00      	nop
 8005868:	08006855 	.word	0x08006855
 800586c:	08006877 	.word	0x08006877
 8005870:	080068af 	.word	0x080068af
 8005874:	080068d3 	.word	0x080068d3

08005878 <_cleanup_r>:
 8005878:	4901      	ldr	r1, [pc, #4]	; (8005880 <_cleanup_r+0x8>)
 800587a:	f000 b8af 	b.w	80059dc <_fwalk_reent>
 800587e:	bf00      	nop
 8005880:	08006be9 	.word	0x08006be9

08005884 <__sfmoreglue>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	1e4a      	subs	r2, r1, #1
 8005888:	2568      	movs	r5, #104	; 0x68
 800588a:	4355      	muls	r5, r2
 800588c:	460e      	mov	r6, r1
 800588e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005892:	f000 fcbf 	bl	8006214 <_malloc_r>
 8005896:	4604      	mov	r4, r0
 8005898:	b140      	cbz	r0, 80058ac <__sfmoreglue+0x28>
 800589a:	2100      	movs	r1, #0
 800589c:	e9c0 1600 	strd	r1, r6, [r0]
 80058a0:	300c      	adds	r0, #12
 80058a2:	60a0      	str	r0, [r4, #8]
 80058a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058a8:	f7fe fca0 	bl	80041ec <memset>
 80058ac:	4620      	mov	r0, r4
 80058ae:	bd70      	pop	{r4, r5, r6, pc}

080058b0 <__sfp_lock_acquire>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__sfp_lock_acquire+0x8>)
 80058b2:	f000 b8b8 	b.w	8005a26 <__retarget_lock_acquire_recursive>
 80058b6:	bf00      	nop
 80058b8:	20000368 	.word	0x20000368

080058bc <__sfp_lock_release>:
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <__sfp_lock_release+0x8>)
 80058be:	f000 b8b3 	b.w	8005a28 <__retarget_lock_release_recursive>
 80058c2:	bf00      	nop
 80058c4:	20000368 	.word	0x20000368

080058c8 <__sinit_lock_acquire>:
 80058c8:	4801      	ldr	r0, [pc, #4]	; (80058d0 <__sinit_lock_acquire+0x8>)
 80058ca:	f000 b8ac 	b.w	8005a26 <__retarget_lock_acquire_recursive>
 80058ce:	bf00      	nop
 80058d0:	20000363 	.word	0x20000363

080058d4 <__sinit_lock_release>:
 80058d4:	4801      	ldr	r0, [pc, #4]	; (80058dc <__sinit_lock_release+0x8>)
 80058d6:	f000 b8a7 	b.w	8005a28 <__retarget_lock_release_recursive>
 80058da:	bf00      	nop
 80058dc:	20000363 	.word	0x20000363

080058e0 <__sinit>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	4604      	mov	r4, r0
 80058e4:	f7ff fff0 	bl	80058c8 <__sinit_lock_acquire>
 80058e8:	69a3      	ldr	r3, [r4, #24]
 80058ea:	b11b      	cbz	r3, 80058f4 <__sinit+0x14>
 80058ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058f0:	f7ff bff0 	b.w	80058d4 <__sinit_lock_release>
 80058f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80058f8:	6523      	str	r3, [r4, #80]	; 0x50
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <__sinit+0x68>)
 80058fc:	4a13      	ldr	r2, [pc, #76]	; (800594c <__sinit+0x6c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	62a2      	str	r2, [r4, #40]	; 0x28
 8005902:	42a3      	cmp	r3, r4
 8005904:	bf04      	itt	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	61a3      	streq	r3, [r4, #24]
 800590a:	4620      	mov	r0, r4
 800590c:	f000 f820 	bl	8005950 <__sfp>
 8005910:	6060      	str	r0, [r4, #4]
 8005912:	4620      	mov	r0, r4
 8005914:	f000 f81c 	bl	8005950 <__sfp>
 8005918:	60a0      	str	r0, [r4, #8]
 800591a:	4620      	mov	r0, r4
 800591c:	f000 f818 	bl	8005950 <__sfp>
 8005920:	2200      	movs	r2, #0
 8005922:	60e0      	str	r0, [r4, #12]
 8005924:	2104      	movs	r1, #4
 8005926:	6860      	ldr	r0, [r4, #4]
 8005928:	f7ff ff82 	bl	8005830 <std>
 800592c:	68a0      	ldr	r0, [r4, #8]
 800592e:	2201      	movs	r2, #1
 8005930:	2109      	movs	r1, #9
 8005932:	f7ff ff7d 	bl	8005830 <std>
 8005936:	68e0      	ldr	r0, [r4, #12]
 8005938:	2202      	movs	r2, #2
 800593a:	2112      	movs	r1, #18
 800593c:	f7ff ff78 	bl	8005830 <std>
 8005940:	2301      	movs	r3, #1
 8005942:	61a3      	str	r3, [r4, #24]
 8005944:	e7d2      	b.n	80058ec <__sinit+0xc>
 8005946:	bf00      	nop
 8005948:	08007040 	.word	0x08007040
 800594c:	08005879 	.word	0x08005879

08005950 <__sfp>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	4607      	mov	r7, r0
 8005954:	f7ff ffac 	bl	80058b0 <__sfp_lock_acquire>
 8005958:	4b1e      	ldr	r3, [pc, #120]	; (80059d4 <__sfp+0x84>)
 800595a:	681e      	ldr	r6, [r3, #0]
 800595c:	69b3      	ldr	r3, [r6, #24]
 800595e:	b913      	cbnz	r3, 8005966 <__sfp+0x16>
 8005960:	4630      	mov	r0, r6
 8005962:	f7ff ffbd 	bl	80058e0 <__sinit>
 8005966:	3648      	adds	r6, #72	; 0x48
 8005968:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800596c:	3b01      	subs	r3, #1
 800596e:	d503      	bpl.n	8005978 <__sfp+0x28>
 8005970:	6833      	ldr	r3, [r6, #0]
 8005972:	b30b      	cbz	r3, 80059b8 <__sfp+0x68>
 8005974:	6836      	ldr	r6, [r6, #0]
 8005976:	e7f7      	b.n	8005968 <__sfp+0x18>
 8005978:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800597c:	b9d5      	cbnz	r5, 80059b4 <__sfp+0x64>
 800597e:	4b16      	ldr	r3, [pc, #88]	; (80059d8 <__sfp+0x88>)
 8005980:	60e3      	str	r3, [r4, #12]
 8005982:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005986:	6665      	str	r5, [r4, #100]	; 0x64
 8005988:	f000 f84c 	bl	8005a24 <__retarget_lock_init_recursive>
 800598c:	f7ff ff96 	bl	80058bc <__sfp_lock_release>
 8005990:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005994:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005998:	6025      	str	r5, [r4, #0]
 800599a:	61a5      	str	r5, [r4, #24]
 800599c:	2208      	movs	r2, #8
 800599e:	4629      	mov	r1, r5
 80059a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059a4:	f7fe fc22 	bl	80041ec <memset>
 80059a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059b0:	4620      	mov	r0, r4
 80059b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059b4:	3468      	adds	r4, #104	; 0x68
 80059b6:	e7d9      	b.n	800596c <__sfp+0x1c>
 80059b8:	2104      	movs	r1, #4
 80059ba:	4638      	mov	r0, r7
 80059bc:	f7ff ff62 	bl	8005884 <__sfmoreglue>
 80059c0:	4604      	mov	r4, r0
 80059c2:	6030      	str	r0, [r6, #0]
 80059c4:	2800      	cmp	r0, #0
 80059c6:	d1d5      	bne.n	8005974 <__sfp+0x24>
 80059c8:	f7ff ff78 	bl	80058bc <__sfp_lock_release>
 80059cc:	230c      	movs	r3, #12
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	e7ee      	b.n	80059b0 <__sfp+0x60>
 80059d2:	bf00      	nop
 80059d4:	08007040 	.word	0x08007040
 80059d8:	ffff0001 	.word	0xffff0001

080059dc <_fwalk_reent>:
 80059dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059e0:	4606      	mov	r6, r0
 80059e2:	4688      	mov	r8, r1
 80059e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80059e8:	2700      	movs	r7, #0
 80059ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059ee:	f1b9 0901 	subs.w	r9, r9, #1
 80059f2:	d505      	bpl.n	8005a00 <_fwalk_reent+0x24>
 80059f4:	6824      	ldr	r4, [r4, #0]
 80059f6:	2c00      	cmp	r4, #0
 80059f8:	d1f7      	bne.n	80059ea <_fwalk_reent+0xe>
 80059fa:	4638      	mov	r0, r7
 80059fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a00:	89ab      	ldrh	r3, [r5, #12]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d907      	bls.n	8005a16 <_fwalk_reent+0x3a>
 8005a06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	d003      	beq.n	8005a16 <_fwalk_reent+0x3a>
 8005a0e:	4629      	mov	r1, r5
 8005a10:	4630      	mov	r0, r6
 8005a12:	47c0      	blx	r8
 8005a14:	4307      	orrs	r7, r0
 8005a16:	3568      	adds	r5, #104	; 0x68
 8005a18:	e7e9      	b.n	80059ee <_fwalk_reent+0x12>
	...

08005a1c <_localeconv_r>:
 8005a1c:	4800      	ldr	r0, [pc, #0]	; (8005a20 <_localeconv_r+0x4>)
 8005a1e:	4770      	bx	lr
 8005a20:	20000160 	.word	0x20000160

08005a24 <__retarget_lock_init_recursive>:
 8005a24:	4770      	bx	lr

08005a26 <__retarget_lock_acquire_recursive>:
 8005a26:	4770      	bx	lr

08005a28 <__retarget_lock_release_recursive>:
 8005a28:	4770      	bx	lr
	...

08005a2c <malloc>:
 8005a2c:	4b02      	ldr	r3, [pc, #8]	; (8005a38 <malloc+0xc>)
 8005a2e:	4601      	mov	r1, r0
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	f000 bbef 	b.w	8006214 <_malloc_r>
 8005a36:	bf00      	nop
 8005a38:	2000000c 	.word	0x2000000c

08005a3c <memcpy>:
 8005a3c:	440a      	add	r2, r1
 8005a3e:	4291      	cmp	r1, r2
 8005a40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a44:	d100      	bne.n	8005a48 <memcpy+0xc>
 8005a46:	4770      	bx	lr
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a52:	4291      	cmp	r1, r2
 8005a54:	d1f9      	bne.n	8005a4a <memcpy+0xe>
 8005a56:	bd10      	pop	{r4, pc}

08005a58 <_Balloc>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a5c:	4604      	mov	r4, r0
 8005a5e:	460d      	mov	r5, r1
 8005a60:	b976      	cbnz	r6, 8005a80 <_Balloc+0x28>
 8005a62:	2010      	movs	r0, #16
 8005a64:	f7ff ffe2 	bl	8005a2c <malloc>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	6260      	str	r0, [r4, #36]	; 0x24
 8005a6c:	b920      	cbnz	r0, 8005a78 <_Balloc+0x20>
 8005a6e:	4b18      	ldr	r3, [pc, #96]	; (8005ad0 <_Balloc+0x78>)
 8005a70:	4818      	ldr	r0, [pc, #96]	; (8005ad4 <_Balloc+0x7c>)
 8005a72:	2166      	movs	r1, #102	; 0x66
 8005a74:	f001 f804 	bl	8006a80 <__assert_func>
 8005a78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a7c:	6006      	str	r6, [r0, #0]
 8005a7e:	60c6      	str	r6, [r0, #12]
 8005a80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a82:	68f3      	ldr	r3, [r6, #12]
 8005a84:	b183      	cbz	r3, 8005aa8 <_Balloc+0x50>
 8005a86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005a8e:	b9b8      	cbnz	r0, 8005ac0 <_Balloc+0x68>
 8005a90:	2101      	movs	r1, #1
 8005a92:	fa01 f605 	lsl.w	r6, r1, r5
 8005a96:	1d72      	adds	r2, r6, #5
 8005a98:	0092      	lsls	r2, r2, #2
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f000 fb5a 	bl	8006154 <_calloc_r>
 8005aa0:	b160      	cbz	r0, 8005abc <_Balloc+0x64>
 8005aa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aa6:	e00e      	b.n	8005ac6 <_Balloc+0x6e>
 8005aa8:	2221      	movs	r2, #33	; 0x21
 8005aaa:	2104      	movs	r1, #4
 8005aac:	4620      	mov	r0, r4
 8005aae:	f000 fb51 	bl	8006154 <_calloc_r>
 8005ab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab4:	60f0      	str	r0, [r6, #12]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d1e4      	bne.n	8005a86 <_Balloc+0x2e>
 8005abc:	2000      	movs	r0, #0
 8005abe:	bd70      	pop	{r4, r5, r6, pc}
 8005ac0:	6802      	ldr	r2, [r0, #0]
 8005ac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005acc:	e7f7      	b.n	8005abe <_Balloc+0x66>
 8005ace:	bf00      	nop
 8005ad0:	08007085 	.word	0x08007085
 8005ad4:	0800716c 	.word	0x0800716c

08005ad8 <_Bfree>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005adc:	4605      	mov	r5, r0
 8005ade:	460c      	mov	r4, r1
 8005ae0:	b976      	cbnz	r6, 8005b00 <_Bfree+0x28>
 8005ae2:	2010      	movs	r0, #16
 8005ae4:	f7ff ffa2 	bl	8005a2c <malloc>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	6268      	str	r0, [r5, #36]	; 0x24
 8005aec:	b920      	cbnz	r0, 8005af8 <_Bfree+0x20>
 8005aee:	4b09      	ldr	r3, [pc, #36]	; (8005b14 <_Bfree+0x3c>)
 8005af0:	4809      	ldr	r0, [pc, #36]	; (8005b18 <_Bfree+0x40>)
 8005af2:	218a      	movs	r1, #138	; 0x8a
 8005af4:	f000 ffc4 	bl	8006a80 <__assert_func>
 8005af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005afc:	6006      	str	r6, [r0, #0]
 8005afe:	60c6      	str	r6, [r0, #12]
 8005b00:	b13c      	cbz	r4, 8005b12 <_Bfree+0x3a>
 8005b02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b04:	6862      	ldr	r2, [r4, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b0c:	6021      	str	r1, [r4, #0]
 8005b0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b12:	bd70      	pop	{r4, r5, r6, pc}
 8005b14:	08007085 	.word	0x08007085
 8005b18:	0800716c 	.word	0x0800716c

08005b1c <__multadd>:
 8005b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b20:	690e      	ldr	r6, [r1, #16]
 8005b22:	4607      	mov	r7, r0
 8005b24:	4698      	mov	r8, r3
 8005b26:	460c      	mov	r4, r1
 8005b28:	f101 0014 	add.w	r0, r1, #20
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	6805      	ldr	r5, [r0, #0]
 8005b30:	b2a9      	uxth	r1, r5
 8005b32:	fb02 8101 	mla	r1, r2, r1, r8
 8005b36:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005b3a:	0c2d      	lsrs	r5, r5, #16
 8005b3c:	fb02 c505 	mla	r5, r2, r5, ip
 8005b40:	b289      	uxth	r1, r1
 8005b42:	3301      	adds	r3, #1
 8005b44:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005b48:	429e      	cmp	r6, r3
 8005b4a:	f840 1b04 	str.w	r1, [r0], #4
 8005b4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005b52:	dcec      	bgt.n	8005b2e <__multadd+0x12>
 8005b54:	f1b8 0f00 	cmp.w	r8, #0
 8005b58:	d022      	beq.n	8005ba0 <__multadd+0x84>
 8005b5a:	68a3      	ldr	r3, [r4, #8]
 8005b5c:	42b3      	cmp	r3, r6
 8005b5e:	dc19      	bgt.n	8005b94 <__multadd+0x78>
 8005b60:	6861      	ldr	r1, [r4, #4]
 8005b62:	4638      	mov	r0, r7
 8005b64:	3101      	adds	r1, #1
 8005b66:	f7ff ff77 	bl	8005a58 <_Balloc>
 8005b6a:	4605      	mov	r5, r0
 8005b6c:	b928      	cbnz	r0, 8005b7a <__multadd+0x5e>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <__multadd+0x8c>)
 8005b72:	480e      	ldr	r0, [pc, #56]	; (8005bac <__multadd+0x90>)
 8005b74:	21b5      	movs	r1, #181	; 0xb5
 8005b76:	f000 ff83 	bl	8006a80 <__assert_func>
 8005b7a:	6922      	ldr	r2, [r4, #16]
 8005b7c:	3202      	adds	r2, #2
 8005b7e:	f104 010c 	add.w	r1, r4, #12
 8005b82:	0092      	lsls	r2, r2, #2
 8005b84:	300c      	adds	r0, #12
 8005b86:	f7ff ff59 	bl	8005a3c <memcpy>
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	f7ff ffa3 	bl	8005ad8 <_Bfree>
 8005b92:	462c      	mov	r4, r5
 8005b94:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005b98:	3601      	adds	r6, #1
 8005b9a:	f8c3 8014 	str.w	r8, [r3, #20]
 8005b9e:	6126      	str	r6, [r4, #16]
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba6:	bf00      	nop
 8005ba8:	080070fb 	.word	0x080070fb
 8005bac:	0800716c 	.word	0x0800716c

08005bb0 <__hi0bits>:
 8005bb0:	0c03      	lsrs	r3, r0, #16
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	b9d3      	cbnz	r3, 8005bec <__hi0bits+0x3c>
 8005bb6:	0400      	lsls	r0, r0, #16
 8005bb8:	2310      	movs	r3, #16
 8005bba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bbe:	bf04      	itt	eq
 8005bc0:	0200      	lsleq	r0, r0, #8
 8005bc2:	3308      	addeq	r3, #8
 8005bc4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bc8:	bf04      	itt	eq
 8005bca:	0100      	lsleq	r0, r0, #4
 8005bcc:	3304      	addeq	r3, #4
 8005bce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bd2:	bf04      	itt	eq
 8005bd4:	0080      	lsleq	r0, r0, #2
 8005bd6:	3302      	addeq	r3, #2
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	db05      	blt.n	8005be8 <__hi0bits+0x38>
 8005bdc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005be0:	f103 0301 	add.w	r3, r3, #1
 8005be4:	bf08      	it	eq
 8005be6:	2320      	moveq	r3, #32
 8005be8:	4618      	mov	r0, r3
 8005bea:	4770      	bx	lr
 8005bec:	2300      	movs	r3, #0
 8005bee:	e7e4      	b.n	8005bba <__hi0bits+0xa>

08005bf0 <__lo0bits>:
 8005bf0:	6803      	ldr	r3, [r0, #0]
 8005bf2:	f013 0207 	ands.w	r2, r3, #7
 8005bf6:	4601      	mov	r1, r0
 8005bf8:	d00b      	beq.n	8005c12 <__lo0bits+0x22>
 8005bfa:	07da      	lsls	r2, r3, #31
 8005bfc:	d424      	bmi.n	8005c48 <__lo0bits+0x58>
 8005bfe:	0798      	lsls	r0, r3, #30
 8005c00:	bf49      	itett	mi
 8005c02:	085b      	lsrmi	r3, r3, #1
 8005c04:	089b      	lsrpl	r3, r3, #2
 8005c06:	2001      	movmi	r0, #1
 8005c08:	600b      	strmi	r3, [r1, #0]
 8005c0a:	bf5c      	itt	pl
 8005c0c:	600b      	strpl	r3, [r1, #0]
 8005c0e:	2002      	movpl	r0, #2
 8005c10:	4770      	bx	lr
 8005c12:	b298      	uxth	r0, r3
 8005c14:	b9b0      	cbnz	r0, 8005c44 <__lo0bits+0x54>
 8005c16:	0c1b      	lsrs	r3, r3, #16
 8005c18:	2010      	movs	r0, #16
 8005c1a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c1e:	bf04      	itt	eq
 8005c20:	0a1b      	lsreq	r3, r3, #8
 8005c22:	3008      	addeq	r0, #8
 8005c24:	071a      	lsls	r2, r3, #28
 8005c26:	bf04      	itt	eq
 8005c28:	091b      	lsreq	r3, r3, #4
 8005c2a:	3004      	addeq	r0, #4
 8005c2c:	079a      	lsls	r2, r3, #30
 8005c2e:	bf04      	itt	eq
 8005c30:	089b      	lsreq	r3, r3, #2
 8005c32:	3002      	addeq	r0, #2
 8005c34:	07da      	lsls	r2, r3, #31
 8005c36:	d403      	bmi.n	8005c40 <__lo0bits+0x50>
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	f100 0001 	add.w	r0, r0, #1
 8005c3e:	d005      	beq.n	8005c4c <__lo0bits+0x5c>
 8005c40:	600b      	str	r3, [r1, #0]
 8005c42:	4770      	bx	lr
 8005c44:	4610      	mov	r0, r2
 8005c46:	e7e8      	b.n	8005c1a <__lo0bits+0x2a>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	4770      	bx	lr
 8005c4c:	2020      	movs	r0, #32
 8005c4e:	4770      	bx	lr

08005c50 <__i2b>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	2101      	movs	r1, #1
 8005c56:	f7ff feff 	bl	8005a58 <_Balloc>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	b928      	cbnz	r0, 8005c6a <__i2b+0x1a>
 8005c5e:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <__i2b+0x24>)
 8005c60:	4805      	ldr	r0, [pc, #20]	; (8005c78 <__i2b+0x28>)
 8005c62:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005c66:	f000 ff0b 	bl	8006a80 <__assert_func>
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	6144      	str	r4, [r0, #20]
 8005c6e:	6103      	str	r3, [r0, #16]
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	080070fb 	.word	0x080070fb
 8005c78:	0800716c 	.word	0x0800716c

08005c7c <__multiply>:
 8005c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c80:	4614      	mov	r4, r2
 8005c82:	690a      	ldr	r2, [r1, #16]
 8005c84:	6923      	ldr	r3, [r4, #16]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	bfb8      	it	lt
 8005c8a:	460b      	movlt	r3, r1
 8005c8c:	460d      	mov	r5, r1
 8005c8e:	bfbc      	itt	lt
 8005c90:	4625      	movlt	r5, r4
 8005c92:	461c      	movlt	r4, r3
 8005c94:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005c98:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c9c:	68ab      	ldr	r3, [r5, #8]
 8005c9e:	6869      	ldr	r1, [r5, #4]
 8005ca0:	eb0a 0709 	add.w	r7, sl, r9
 8005ca4:	42bb      	cmp	r3, r7
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	bfb8      	it	lt
 8005caa:	3101      	addlt	r1, #1
 8005cac:	f7ff fed4 	bl	8005a58 <_Balloc>
 8005cb0:	b930      	cbnz	r0, 8005cc0 <__multiply+0x44>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <__multiply+0x144>)
 8005cb6:	4843      	ldr	r0, [pc, #268]	; (8005dc4 <__multiply+0x148>)
 8005cb8:	f240 115d 	movw	r1, #349	; 0x15d
 8005cbc:	f000 fee0 	bl	8006a80 <__assert_func>
 8005cc0:	f100 0614 	add.w	r6, r0, #20
 8005cc4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005cc8:	4633      	mov	r3, r6
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4543      	cmp	r3, r8
 8005cce:	d31e      	bcc.n	8005d0e <__multiply+0x92>
 8005cd0:	f105 0c14 	add.w	ip, r5, #20
 8005cd4:	f104 0314 	add.w	r3, r4, #20
 8005cd8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005cdc:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005ce0:	9202      	str	r2, [sp, #8]
 8005ce2:	ebac 0205 	sub.w	r2, ip, r5
 8005ce6:	3a15      	subs	r2, #21
 8005ce8:	f022 0203 	bic.w	r2, r2, #3
 8005cec:	3204      	adds	r2, #4
 8005cee:	f105 0115 	add.w	r1, r5, #21
 8005cf2:	458c      	cmp	ip, r1
 8005cf4:	bf38      	it	cc
 8005cf6:	2204      	movcc	r2, #4
 8005cf8:	9201      	str	r2, [sp, #4]
 8005cfa:	9a02      	ldr	r2, [sp, #8]
 8005cfc:	9303      	str	r3, [sp, #12]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d808      	bhi.n	8005d14 <__multiply+0x98>
 8005d02:	2f00      	cmp	r7, #0
 8005d04:	dc55      	bgt.n	8005db2 <__multiply+0x136>
 8005d06:	6107      	str	r7, [r0, #16]
 8005d08:	b005      	add	sp, #20
 8005d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d0e:	f843 2b04 	str.w	r2, [r3], #4
 8005d12:	e7db      	b.n	8005ccc <__multiply+0x50>
 8005d14:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d18:	f1ba 0f00 	cmp.w	sl, #0
 8005d1c:	d020      	beq.n	8005d60 <__multiply+0xe4>
 8005d1e:	f105 0e14 	add.w	lr, r5, #20
 8005d22:	46b1      	mov	r9, r6
 8005d24:	2200      	movs	r2, #0
 8005d26:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005d2a:	f8d9 b000 	ldr.w	fp, [r9]
 8005d2e:	b2a1      	uxth	r1, r4
 8005d30:	fa1f fb8b 	uxth.w	fp, fp
 8005d34:	fb0a b101 	mla	r1, sl, r1, fp
 8005d38:	4411      	add	r1, r2
 8005d3a:	f8d9 2000 	ldr.w	r2, [r9]
 8005d3e:	0c24      	lsrs	r4, r4, #16
 8005d40:	0c12      	lsrs	r2, r2, #16
 8005d42:	fb0a 2404 	mla	r4, sl, r4, r2
 8005d46:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005d4a:	b289      	uxth	r1, r1
 8005d4c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005d50:	45f4      	cmp	ip, lr
 8005d52:	f849 1b04 	str.w	r1, [r9], #4
 8005d56:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005d5a:	d8e4      	bhi.n	8005d26 <__multiply+0xaa>
 8005d5c:	9901      	ldr	r1, [sp, #4]
 8005d5e:	5072      	str	r2, [r6, r1]
 8005d60:	9a03      	ldr	r2, [sp, #12]
 8005d62:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005d66:	3304      	adds	r3, #4
 8005d68:	f1b9 0f00 	cmp.w	r9, #0
 8005d6c:	d01f      	beq.n	8005dae <__multiply+0x132>
 8005d6e:	6834      	ldr	r4, [r6, #0]
 8005d70:	f105 0114 	add.w	r1, r5, #20
 8005d74:	46b6      	mov	lr, r6
 8005d76:	f04f 0a00 	mov.w	sl, #0
 8005d7a:	880a      	ldrh	r2, [r1, #0]
 8005d7c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005d80:	fb09 b202 	mla	r2, r9, r2, fp
 8005d84:	4492      	add	sl, r2
 8005d86:	b2a4      	uxth	r4, r4
 8005d88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005d8c:	f84e 4b04 	str.w	r4, [lr], #4
 8005d90:	f851 4b04 	ldr.w	r4, [r1], #4
 8005d94:	f8be 2000 	ldrh.w	r2, [lr]
 8005d98:	0c24      	lsrs	r4, r4, #16
 8005d9a:	fb09 2404 	mla	r4, r9, r4, r2
 8005d9e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005da2:	458c      	cmp	ip, r1
 8005da4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005da8:	d8e7      	bhi.n	8005d7a <__multiply+0xfe>
 8005daa:	9a01      	ldr	r2, [sp, #4]
 8005dac:	50b4      	str	r4, [r6, r2]
 8005dae:	3604      	adds	r6, #4
 8005db0:	e7a3      	b.n	8005cfa <__multiply+0x7e>
 8005db2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1a5      	bne.n	8005d06 <__multiply+0x8a>
 8005dba:	3f01      	subs	r7, #1
 8005dbc:	e7a1      	b.n	8005d02 <__multiply+0x86>
 8005dbe:	bf00      	nop
 8005dc0:	080070fb 	.word	0x080070fb
 8005dc4:	0800716c 	.word	0x0800716c

08005dc8 <__pow5mult>:
 8005dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dcc:	4615      	mov	r5, r2
 8005dce:	f012 0203 	ands.w	r2, r2, #3
 8005dd2:	4606      	mov	r6, r0
 8005dd4:	460f      	mov	r7, r1
 8005dd6:	d007      	beq.n	8005de8 <__pow5mult+0x20>
 8005dd8:	4c25      	ldr	r4, [pc, #148]	; (8005e70 <__pow5mult+0xa8>)
 8005dda:	3a01      	subs	r2, #1
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005de2:	f7ff fe9b 	bl	8005b1c <__multadd>
 8005de6:	4607      	mov	r7, r0
 8005de8:	10ad      	asrs	r5, r5, #2
 8005dea:	d03d      	beq.n	8005e68 <__pow5mult+0xa0>
 8005dec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dee:	b97c      	cbnz	r4, 8005e10 <__pow5mult+0x48>
 8005df0:	2010      	movs	r0, #16
 8005df2:	f7ff fe1b 	bl	8005a2c <malloc>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6270      	str	r0, [r6, #36]	; 0x24
 8005dfa:	b928      	cbnz	r0, 8005e08 <__pow5mult+0x40>
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	; (8005e74 <__pow5mult+0xac>)
 8005dfe:	481e      	ldr	r0, [pc, #120]	; (8005e78 <__pow5mult+0xb0>)
 8005e00:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e04:	f000 fe3c 	bl	8006a80 <__assert_func>
 8005e08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e0c:	6004      	str	r4, [r0, #0]
 8005e0e:	60c4      	str	r4, [r0, #12]
 8005e10:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e18:	b94c      	cbnz	r4, 8005e2e <__pow5mult+0x66>
 8005e1a:	f240 2171 	movw	r1, #625	; 0x271
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7ff ff16 	bl	8005c50 <__i2b>
 8005e24:	2300      	movs	r3, #0
 8005e26:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e2a:	4604      	mov	r4, r0
 8005e2c:	6003      	str	r3, [r0, #0]
 8005e2e:	f04f 0900 	mov.w	r9, #0
 8005e32:	07eb      	lsls	r3, r5, #31
 8005e34:	d50a      	bpl.n	8005e4c <__pow5mult+0x84>
 8005e36:	4639      	mov	r1, r7
 8005e38:	4622      	mov	r2, r4
 8005e3a:	4630      	mov	r0, r6
 8005e3c:	f7ff ff1e 	bl	8005c7c <__multiply>
 8005e40:	4639      	mov	r1, r7
 8005e42:	4680      	mov	r8, r0
 8005e44:	4630      	mov	r0, r6
 8005e46:	f7ff fe47 	bl	8005ad8 <_Bfree>
 8005e4a:	4647      	mov	r7, r8
 8005e4c:	106d      	asrs	r5, r5, #1
 8005e4e:	d00b      	beq.n	8005e68 <__pow5mult+0xa0>
 8005e50:	6820      	ldr	r0, [r4, #0]
 8005e52:	b938      	cbnz	r0, 8005e64 <__pow5mult+0x9c>
 8005e54:	4622      	mov	r2, r4
 8005e56:	4621      	mov	r1, r4
 8005e58:	4630      	mov	r0, r6
 8005e5a:	f7ff ff0f 	bl	8005c7c <__multiply>
 8005e5e:	6020      	str	r0, [r4, #0]
 8005e60:	f8c0 9000 	str.w	r9, [r0]
 8005e64:	4604      	mov	r4, r0
 8005e66:	e7e4      	b.n	8005e32 <__pow5mult+0x6a>
 8005e68:	4638      	mov	r0, r7
 8005e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e6e:	bf00      	nop
 8005e70:	080072c0 	.word	0x080072c0
 8005e74:	08007085 	.word	0x08007085
 8005e78:	0800716c 	.word	0x0800716c

08005e7c <__lshift>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	460c      	mov	r4, r1
 8005e82:	6849      	ldr	r1, [r1, #4]
 8005e84:	6923      	ldr	r3, [r4, #16]
 8005e86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005e8a:	68a3      	ldr	r3, [r4, #8]
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	4691      	mov	r9, r2
 8005e90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e94:	f108 0601 	add.w	r6, r8, #1
 8005e98:	42b3      	cmp	r3, r6
 8005e9a:	db0b      	blt.n	8005eb4 <__lshift+0x38>
 8005e9c:	4638      	mov	r0, r7
 8005e9e:	f7ff fddb 	bl	8005a58 <_Balloc>
 8005ea2:	4605      	mov	r5, r0
 8005ea4:	b948      	cbnz	r0, 8005eba <__lshift+0x3e>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	4b28      	ldr	r3, [pc, #160]	; (8005f4c <__lshift+0xd0>)
 8005eaa:	4829      	ldr	r0, [pc, #164]	; (8005f50 <__lshift+0xd4>)
 8005eac:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005eb0:	f000 fde6 	bl	8006a80 <__assert_func>
 8005eb4:	3101      	adds	r1, #1
 8005eb6:	005b      	lsls	r3, r3, #1
 8005eb8:	e7ee      	b.n	8005e98 <__lshift+0x1c>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	f100 0114 	add.w	r1, r0, #20
 8005ec0:	f100 0210 	add.w	r2, r0, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	4553      	cmp	r3, sl
 8005ec8:	db33      	blt.n	8005f32 <__lshift+0xb6>
 8005eca:	6920      	ldr	r0, [r4, #16]
 8005ecc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005ed0:	f104 0314 	add.w	r3, r4, #20
 8005ed4:	f019 091f 	ands.w	r9, r9, #31
 8005ed8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005edc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005ee0:	d02b      	beq.n	8005f3a <__lshift+0xbe>
 8005ee2:	f1c9 0e20 	rsb	lr, r9, #32
 8005ee6:	468a      	mov	sl, r1
 8005ee8:	2200      	movs	r2, #0
 8005eea:	6818      	ldr	r0, [r3, #0]
 8005eec:	fa00 f009 	lsl.w	r0, r0, r9
 8005ef0:	4302      	orrs	r2, r0
 8005ef2:	f84a 2b04 	str.w	r2, [sl], #4
 8005ef6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005efa:	459c      	cmp	ip, r3
 8005efc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f00:	d8f3      	bhi.n	8005eea <__lshift+0x6e>
 8005f02:	ebac 0304 	sub.w	r3, ip, r4
 8005f06:	3b15      	subs	r3, #21
 8005f08:	f023 0303 	bic.w	r3, r3, #3
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	f104 0015 	add.w	r0, r4, #21
 8005f12:	4584      	cmp	ip, r0
 8005f14:	bf38      	it	cc
 8005f16:	2304      	movcc	r3, #4
 8005f18:	50ca      	str	r2, [r1, r3]
 8005f1a:	b10a      	cbz	r2, 8005f20 <__lshift+0xa4>
 8005f1c:	f108 0602 	add.w	r6, r8, #2
 8005f20:	3e01      	subs	r6, #1
 8005f22:	4638      	mov	r0, r7
 8005f24:	612e      	str	r6, [r5, #16]
 8005f26:	4621      	mov	r1, r4
 8005f28:	f7ff fdd6 	bl	8005ad8 <_Bfree>
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f32:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f36:	3301      	adds	r3, #1
 8005f38:	e7c5      	b.n	8005ec6 <__lshift+0x4a>
 8005f3a:	3904      	subs	r1, #4
 8005f3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f40:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f44:	459c      	cmp	ip, r3
 8005f46:	d8f9      	bhi.n	8005f3c <__lshift+0xc0>
 8005f48:	e7ea      	b.n	8005f20 <__lshift+0xa4>
 8005f4a:	bf00      	nop
 8005f4c:	080070fb 	.word	0x080070fb
 8005f50:	0800716c 	.word	0x0800716c

08005f54 <__mcmp>:
 8005f54:	b530      	push	{r4, r5, lr}
 8005f56:	6902      	ldr	r2, [r0, #16]
 8005f58:	690c      	ldr	r4, [r1, #16]
 8005f5a:	1b12      	subs	r2, r2, r4
 8005f5c:	d10e      	bne.n	8005f7c <__mcmp+0x28>
 8005f5e:	f100 0314 	add.w	r3, r0, #20
 8005f62:	3114      	adds	r1, #20
 8005f64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005f68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005f6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005f70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005f74:	42a5      	cmp	r5, r4
 8005f76:	d003      	beq.n	8005f80 <__mcmp+0x2c>
 8005f78:	d305      	bcc.n	8005f86 <__mcmp+0x32>
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	4610      	mov	r0, r2
 8005f7e:	bd30      	pop	{r4, r5, pc}
 8005f80:	4283      	cmp	r3, r0
 8005f82:	d3f3      	bcc.n	8005f6c <__mcmp+0x18>
 8005f84:	e7fa      	b.n	8005f7c <__mcmp+0x28>
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	e7f7      	b.n	8005f7c <__mcmp+0x28>

08005f8c <__mdiff>:
 8005f8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f90:	460c      	mov	r4, r1
 8005f92:	4606      	mov	r6, r0
 8005f94:	4611      	mov	r1, r2
 8005f96:	4620      	mov	r0, r4
 8005f98:	4617      	mov	r7, r2
 8005f9a:	f7ff ffdb 	bl	8005f54 <__mcmp>
 8005f9e:	1e05      	subs	r5, r0, #0
 8005fa0:	d110      	bne.n	8005fc4 <__mdiff+0x38>
 8005fa2:	4629      	mov	r1, r5
 8005fa4:	4630      	mov	r0, r6
 8005fa6:	f7ff fd57 	bl	8005a58 <_Balloc>
 8005faa:	b930      	cbnz	r0, 8005fba <__mdiff+0x2e>
 8005fac:	4b39      	ldr	r3, [pc, #228]	; (8006094 <__mdiff+0x108>)
 8005fae:	4602      	mov	r2, r0
 8005fb0:	f240 2132 	movw	r1, #562	; 0x232
 8005fb4:	4838      	ldr	r0, [pc, #224]	; (8006098 <__mdiff+0x10c>)
 8005fb6:	f000 fd63 	bl	8006a80 <__assert_func>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005fc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fc4:	bfa4      	itt	ge
 8005fc6:	463b      	movge	r3, r7
 8005fc8:	4627      	movge	r7, r4
 8005fca:	4630      	mov	r0, r6
 8005fcc:	6879      	ldr	r1, [r7, #4]
 8005fce:	bfa6      	itte	ge
 8005fd0:	461c      	movge	r4, r3
 8005fd2:	2500      	movge	r5, #0
 8005fd4:	2501      	movlt	r5, #1
 8005fd6:	f7ff fd3f 	bl	8005a58 <_Balloc>
 8005fda:	b920      	cbnz	r0, 8005fe6 <__mdiff+0x5a>
 8005fdc:	4b2d      	ldr	r3, [pc, #180]	; (8006094 <__mdiff+0x108>)
 8005fde:	4602      	mov	r2, r0
 8005fe0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005fe4:	e7e6      	b.n	8005fb4 <__mdiff+0x28>
 8005fe6:	693e      	ldr	r6, [r7, #16]
 8005fe8:	60c5      	str	r5, [r0, #12]
 8005fea:	6925      	ldr	r5, [r4, #16]
 8005fec:	f107 0114 	add.w	r1, r7, #20
 8005ff0:	f104 0914 	add.w	r9, r4, #20
 8005ff4:	f100 0e14 	add.w	lr, r0, #20
 8005ff8:	f107 0210 	add.w	r2, r7, #16
 8005ffc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006000:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006004:	46f2      	mov	sl, lr
 8006006:	2700      	movs	r7, #0
 8006008:	f859 3b04 	ldr.w	r3, [r9], #4
 800600c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006010:	fa1f f883 	uxth.w	r8, r3
 8006014:	fa17 f78b 	uxtah	r7, r7, fp
 8006018:	0c1b      	lsrs	r3, r3, #16
 800601a:	eba7 0808 	sub.w	r8, r7, r8
 800601e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006022:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006026:	fa1f f888 	uxth.w	r8, r8
 800602a:	141f      	asrs	r7, r3, #16
 800602c:	454d      	cmp	r5, r9
 800602e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006032:	f84a 3b04 	str.w	r3, [sl], #4
 8006036:	d8e7      	bhi.n	8006008 <__mdiff+0x7c>
 8006038:	1b2b      	subs	r3, r5, r4
 800603a:	3b15      	subs	r3, #21
 800603c:	f023 0303 	bic.w	r3, r3, #3
 8006040:	3304      	adds	r3, #4
 8006042:	3415      	adds	r4, #21
 8006044:	42a5      	cmp	r5, r4
 8006046:	bf38      	it	cc
 8006048:	2304      	movcc	r3, #4
 800604a:	4419      	add	r1, r3
 800604c:	4473      	add	r3, lr
 800604e:	469e      	mov	lr, r3
 8006050:	460d      	mov	r5, r1
 8006052:	4565      	cmp	r5, ip
 8006054:	d30e      	bcc.n	8006074 <__mdiff+0xe8>
 8006056:	f10c 0203 	add.w	r2, ip, #3
 800605a:	1a52      	subs	r2, r2, r1
 800605c:	f022 0203 	bic.w	r2, r2, #3
 8006060:	3903      	subs	r1, #3
 8006062:	458c      	cmp	ip, r1
 8006064:	bf38      	it	cc
 8006066:	2200      	movcc	r2, #0
 8006068:	441a      	add	r2, r3
 800606a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800606e:	b17b      	cbz	r3, 8006090 <__mdiff+0x104>
 8006070:	6106      	str	r6, [r0, #16]
 8006072:	e7a5      	b.n	8005fc0 <__mdiff+0x34>
 8006074:	f855 8b04 	ldr.w	r8, [r5], #4
 8006078:	fa17 f488 	uxtah	r4, r7, r8
 800607c:	1422      	asrs	r2, r4, #16
 800607e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006082:	b2a4      	uxth	r4, r4
 8006084:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006088:	f84e 4b04 	str.w	r4, [lr], #4
 800608c:	1417      	asrs	r7, r2, #16
 800608e:	e7e0      	b.n	8006052 <__mdiff+0xc6>
 8006090:	3e01      	subs	r6, #1
 8006092:	e7ea      	b.n	800606a <__mdiff+0xde>
 8006094:	080070fb 	.word	0x080070fb
 8006098:	0800716c 	.word	0x0800716c

0800609c <__d2b>:
 800609c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060a0:	4689      	mov	r9, r1
 80060a2:	2101      	movs	r1, #1
 80060a4:	ec57 6b10 	vmov	r6, r7, d0
 80060a8:	4690      	mov	r8, r2
 80060aa:	f7ff fcd5 	bl	8005a58 <_Balloc>
 80060ae:	4604      	mov	r4, r0
 80060b0:	b930      	cbnz	r0, 80060c0 <__d2b+0x24>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b25      	ldr	r3, [pc, #148]	; (800614c <__d2b+0xb0>)
 80060b6:	4826      	ldr	r0, [pc, #152]	; (8006150 <__d2b+0xb4>)
 80060b8:	f240 310a 	movw	r1, #778	; 0x30a
 80060bc:	f000 fce0 	bl	8006a80 <__assert_func>
 80060c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80060c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80060c8:	bb35      	cbnz	r5, 8006118 <__d2b+0x7c>
 80060ca:	2e00      	cmp	r6, #0
 80060cc:	9301      	str	r3, [sp, #4]
 80060ce:	d028      	beq.n	8006122 <__d2b+0x86>
 80060d0:	4668      	mov	r0, sp
 80060d2:	9600      	str	r6, [sp, #0]
 80060d4:	f7ff fd8c 	bl	8005bf0 <__lo0bits>
 80060d8:	9900      	ldr	r1, [sp, #0]
 80060da:	b300      	cbz	r0, 800611e <__d2b+0x82>
 80060dc:	9a01      	ldr	r2, [sp, #4]
 80060de:	f1c0 0320 	rsb	r3, r0, #32
 80060e2:	fa02 f303 	lsl.w	r3, r2, r3
 80060e6:	430b      	orrs	r3, r1
 80060e8:	40c2      	lsrs	r2, r0
 80060ea:	6163      	str	r3, [r4, #20]
 80060ec:	9201      	str	r2, [sp, #4]
 80060ee:	9b01      	ldr	r3, [sp, #4]
 80060f0:	61a3      	str	r3, [r4, #24]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	bf14      	ite	ne
 80060f6:	2202      	movne	r2, #2
 80060f8:	2201      	moveq	r2, #1
 80060fa:	6122      	str	r2, [r4, #16]
 80060fc:	b1d5      	cbz	r5, 8006134 <__d2b+0x98>
 80060fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006102:	4405      	add	r5, r0
 8006104:	f8c9 5000 	str.w	r5, [r9]
 8006108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800610c:	f8c8 0000 	str.w	r0, [r8]
 8006110:	4620      	mov	r0, r4
 8006112:	b003      	add	sp, #12
 8006114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800611c:	e7d5      	b.n	80060ca <__d2b+0x2e>
 800611e:	6161      	str	r1, [r4, #20]
 8006120:	e7e5      	b.n	80060ee <__d2b+0x52>
 8006122:	a801      	add	r0, sp, #4
 8006124:	f7ff fd64 	bl	8005bf0 <__lo0bits>
 8006128:	9b01      	ldr	r3, [sp, #4]
 800612a:	6163      	str	r3, [r4, #20]
 800612c:	2201      	movs	r2, #1
 800612e:	6122      	str	r2, [r4, #16]
 8006130:	3020      	adds	r0, #32
 8006132:	e7e3      	b.n	80060fc <__d2b+0x60>
 8006134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800613c:	f8c9 0000 	str.w	r0, [r9]
 8006140:	6918      	ldr	r0, [r3, #16]
 8006142:	f7ff fd35 	bl	8005bb0 <__hi0bits>
 8006146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800614a:	e7df      	b.n	800610c <__d2b+0x70>
 800614c:	080070fb 	.word	0x080070fb
 8006150:	0800716c 	.word	0x0800716c

08006154 <_calloc_r>:
 8006154:	b513      	push	{r0, r1, r4, lr}
 8006156:	434a      	muls	r2, r1
 8006158:	4611      	mov	r1, r2
 800615a:	9201      	str	r2, [sp, #4]
 800615c:	f000 f85a 	bl	8006214 <_malloc_r>
 8006160:	4604      	mov	r4, r0
 8006162:	b118      	cbz	r0, 800616c <_calloc_r+0x18>
 8006164:	9a01      	ldr	r2, [sp, #4]
 8006166:	2100      	movs	r1, #0
 8006168:	f7fe f840 	bl	80041ec <memset>
 800616c:	4620      	mov	r0, r4
 800616e:	b002      	add	sp, #8
 8006170:	bd10      	pop	{r4, pc}
	...

08006174 <_free_r>:
 8006174:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006176:	2900      	cmp	r1, #0
 8006178:	d048      	beq.n	800620c <_free_r+0x98>
 800617a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800617e:	9001      	str	r0, [sp, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	f1a1 0404 	sub.w	r4, r1, #4
 8006186:	bfb8      	it	lt
 8006188:	18e4      	addlt	r4, r4, r3
 800618a:	f000 fe1d 	bl	8006dc8 <__malloc_lock>
 800618e:	4a20      	ldr	r2, [pc, #128]	; (8006210 <_free_r+0x9c>)
 8006190:	9801      	ldr	r0, [sp, #4]
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	4615      	mov	r5, r2
 8006196:	b933      	cbnz	r3, 80061a6 <_free_r+0x32>
 8006198:	6063      	str	r3, [r4, #4]
 800619a:	6014      	str	r4, [r2, #0]
 800619c:	b003      	add	sp, #12
 800619e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061a2:	f000 be17 	b.w	8006dd4 <__malloc_unlock>
 80061a6:	42a3      	cmp	r3, r4
 80061a8:	d90b      	bls.n	80061c2 <_free_r+0x4e>
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	1862      	adds	r2, r4, r1
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bf04      	itt	eq
 80061b2:	681a      	ldreq	r2, [r3, #0]
 80061b4:	685b      	ldreq	r3, [r3, #4]
 80061b6:	6063      	str	r3, [r4, #4]
 80061b8:	bf04      	itt	eq
 80061ba:	1852      	addeq	r2, r2, r1
 80061bc:	6022      	streq	r2, [r4, #0]
 80061be:	602c      	str	r4, [r5, #0]
 80061c0:	e7ec      	b.n	800619c <_free_r+0x28>
 80061c2:	461a      	mov	r2, r3
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	b10b      	cbz	r3, 80061cc <_free_r+0x58>
 80061c8:	42a3      	cmp	r3, r4
 80061ca:	d9fa      	bls.n	80061c2 <_free_r+0x4e>
 80061cc:	6811      	ldr	r1, [r2, #0]
 80061ce:	1855      	adds	r5, r2, r1
 80061d0:	42a5      	cmp	r5, r4
 80061d2:	d10b      	bne.n	80061ec <_free_r+0x78>
 80061d4:	6824      	ldr	r4, [r4, #0]
 80061d6:	4421      	add	r1, r4
 80061d8:	1854      	adds	r4, r2, r1
 80061da:	42a3      	cmp	r3, r4
 80061dc:	6011      	str	r1, [r2, #0]
 80061de:	d1dd      	bne.n	800619c <_free_r+0x28>
 80061e0:	681c      	ldr	r4, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	6053      	str	r3, [r2, #4]
 80061e6:	4421      	add	r1, r4
 80061e8:	6011      	str	r1, [r2, #0]
 80061ea:	e7d7      	b.n	800619c <_free_r+0x28>
 80061ec:	d902      	bls.n	80061f4 <_free_r+0x80>
 80061ee:	230c      	movs	r3, #12
 80061f0:	6003      	str	r3, [r0, #0]
 80061f2:	e7d3      	b.n	800619c <_free_r+0x28>
 80061f4:	6825      	ldr	r5, [r4, #0]
 80061f6:	1961      	adds	r1, r4, r5
 80061f8:	428b      	cmp	r3, r1
 80061fa:	bf04      	itt	eq
 80061fc:	6819      	ldreq	r1, [r3, #0]
 80061fe:	685b      	ldreq	r3, [r3, #4]
 8006200:	6063      	str	r3, [r4, #4]
 8006202:	bf04      	itt	eq
 8006204:	1949      	addeq	r1, r1, r5
 8006206:	6021      	streq	r1, [r4, #0]
 8006208:	6054      	str	r4, [r2, #4]
 800620a:	e7c7      	b.n	800619c <_free_r+0x28>
 800620c:	b003      	add	sp, #12
 800620e:	bd30      	pop	{r4, r5, pc}
 8006210:	20000200 	.word	0x20000200

08006214 <_malloc_r>:
 8006214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006216:	1ccd      	adds	r5, r1, #3
 8006218:	f025 0503 	bic.w	r5, r5, #3
 800621c:	3508      	adds	r5, #8
 800621e:	2d0c      	cmp	r5, #12
 8006220:	bf38      	it	cc
 8006222:	250c      	movcc	r5, #12
 8006224:	2d00      	cmp	r5, #0
 8006226:	4606      	mov	r6, r0
 8006228:	db01      	blt.n	800622e <_malloc_r+0x1a>
 800622a:	42a9      	cmp	r1, r5
 800622c:	d903      	bls.n	8006236 <_malloc_r+0x22>
 800622e:	230c      	movs	r3, #12
 8006230:	6033      	str	r3, [r6, #0]
 8006232:	2000      	movs	r0, #0
 8006234:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006236:	f000 fdc7 	bl	8006dc8 <__malloc_lock>
 800623a:	4921      	ldr	r1, [pc, #132]	; (80062c0 <_malloc_r+0xac>)
 800623c:	680a      	ldr	r2, [r1, #0]
 800623e:	4614      	mov	r4, r2
 8006240:	b99c      	cbnz	r4, 800626a <_malloc_r+0x56>
 8006242:	4f20      	ldr	r7, [pc, #128]	; (80062c4 <_malloc_r+0xb0>)
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	b923      	cbnz	r3, 8006252 <_malloc_r+0x3e>
 8006248:	4621      	mov	r1, r4
 800624a:	4630      	mov	r0, r6
 800624c:	f000 faf2 	bl	8006834 <_sbrk_r>
 8006250:	6038      	str	r0, [r7, #0]
 8006252:	4629      	mov	r1, r5
 8006254:	4630      	mov	r0, r6
 8006256:	f000 faed 	bl	8006834 <_sbrk_r>
 800625a:	1c43      	adds	r3, r0, #1
 800625c:	d123      	bne.n	80062a6 <_malloc_r+0x92>
 800625e:	230c      	movs	r3, #12
 8006260:	6033      	str	r3, [r6, #0]
 8006262:	4630      	mov	r0, r6
 8006264:	f000 fdb6 	bl	8006dd4 <__malloc_unlock>
 8006268:	e7e3      	b.n	8006232 <_malloc_r+0x1e>
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	1b5b      	subs	r3, r3, r5
 800626e:	d417      	bmi.n	80062a0 <_malloc_r+0x8c>
 8006270:	2b0b      	cmp	r3, #11
 8006272:	d903      	bls.n	800627c <_malloc_r+0x68>
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	441c      	add	r4, r3
 8006278:	6025      	str	r5, [r4, #0]
 800627a:	e004      	b.n	8006286 <_malloc_r+0x72>
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	42a2      	cmp	r2, r4
 8006280:	bf0c      	ite	eq
 8006282:	600b      	streq	r3, [r1, #0]
 8006284:	6053      	strne	r3, [r2, #4]
 8006286:	4630      	mov	r0, r6
 8006288:	f000 fda4 	bl	8006dd4 <__malloc_unlock>
 800628c:	f104 000b 	add.w	r0, r4, #11
 8006290:	1d23      	adds	r3, r4, #4
 8006292:	f020 0007 	bic.w	r0, r0, #7
 8006296:	1ac2      	subs	r2, r0, r3
 8006298:	d0cc      	beq.n	8006234 <_malloc_r+0x20>
 800629a:	1a1b      	subs	r3, r3, r0
 800629c:	50a3      	str	r3, [r4, r2]
 800629e:	e7c9      	b.n	8006234 <_malloc_r+0x20>
 80062a0:	4622      	mov	r2, r4
 80062a2:	6864      	ldr	r4, [r4, #4]
 80062a4:	e7cc      	b.n	8006240 <_malloc_r+0x2c>
 80062a6:	1cc4      	adds	r4, r0, #3
 80062a8:	f024 0403 	bic.w	r4, r4, #3
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d0e3      	beq.n	8006278 <_malloc_r+0x64>
 80062b0:	1a21      	subs	r1, r4, r0
 80062b2:	4630      	mov	r0, r6
 80062b4:	f000 fabe 	bl	8006834 <_sbrk_r>
 80062b8:	3001      	adds	r0, #1
 80062ba:	d1dd      	bne.n	8006278 <_malloc_r+0x64>
 80062bc:	e7cf      	b.n	800625e <_malloc_r+0x4a>
 80062be:	bf00      	nop
 80062c0:	20000200 	.word	0x20000200
 80062c4:	20000204 	.word	0x20000204

080062c8 <__ssputs_r>:
 80062c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062cc:	688e      	ldr	r6, [r1, #8]
 80062ce:	429e      	cmp	r6, r3
 80062d0:	4682      	mov	sl, r0
 80062d2:	460c      	mov	r4, r1
 80062d4:	4690      	mov	r8, r2
 80062d6:	461f      	mov	r7, r3
 80062d8:	d838      	bhi.n	800634c <__ssputs_r+0x84>
 80062da:	898a      	ldrh	r2, [r1, #12]
 80062dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062e0:	d032      	beq.n	8006348 <__ssputs_r+0x80>
 80062e2:	6825      	ldr	r5, [r4, #0]
 80062e4:	6909      	ldr	r1, [r1, #16]
 80062e6:	eba5 0901 	sub.w	r9, r5, r1
 80062ea:	6965      	ldr	r5, [r4, #20]
 80062ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062f4:	3301      	adds	r3, #1
 80062f6:	444b      	add	r3, r9
 80062f8:	106d      	asrs	r5, r5, #1
 80062fa:	429d      	cmp	r5, r3
 80062fc:	bf38      	it	cc
 80062fe:	461d      	movcc	r5, r3
 8006300:	0553      	lsls	r3, r2, #21
 8006302:	d531      	bpl.n	8006368 <__ssputs_r+0xa0>
 8006304:	4629      	mov	r1, r5
 8006306:	f7ff ff85 	bl	8006214 <_malloc_r>
 800630a:	4606      	mov	r6, r0
 800630c:	b950      	cbnz	r0, 8006324 <__ssputs_r+0x5c>
 800630e:	230c      	movs	r3, #12
 8006310:	f8ca 3000 	str.w	r3, [sl]
 8006314:	89a3      	ldrh	r3, [r4, #12]
 8006316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800631a:	81a3      	strh	r3, [r4, #12]
 800631c:	f04f 30ff 	mov.w	r0, #4294967295
 8006320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006324:	6921      	ldr	r1, [r4, #16]
 8006326:	464a      	mov	r2, r9
 8006328:	f7ff fb88 	bl	8005a3c <memcpy>
 800632c:	89a3      	ldrh	r3, [r4, #12]
 800632e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006336:	81a3      	strh	r3, [r4, #12]
 8006338:	6126      	str	r6, [r4, #16]
 800633a:	6165      	str	r5, [r4, #20]
 800633c:	444e      	add	r6, r9
 800633e:	eba5 0509 	sub.w	r5, r5, r9
 8006342:	6026      	str	r6, [r4, #0]
 8006344:	60a5      	str	r5, [r4, #8]
 8006346:	463e      	mov	r6, r7
 8006348:	42be      	cmp	r6, r7
 800634a:	d900      	bls.n	800634e <__ssputs_r+0x86>
 800634c:	463e      	mov	r6, r7
 800634e:	4632      	mov	r2, r6
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	4641      	mov	r1, r8
 8006354:	f000 fd1e 	bl	8006d94 <memmove>
 8006358:	68a3      	ldr	r3, [r4, #8]
 800635a:	6822      	ldr	r2, [r4, #0]
 800635c:	1b9b      	subs	r3, r3, r6
 800635e:	4432      	add	r2, r6
 8006360:	60a3      	str	r3, [r4, #8]
 8006362:	6022      	str	r2, [r4, #0]
 8006364:	2000      	movs	r0, #0
 8006366:	e7db      	b.n	8006320 <__ssputs_r+0x58>
 8006368:	462a      	mov	r2, r5
 800636a:	f000 fd39 	bl	8006de0 <_realloc_r>
 800636e:	4606      	mov	r6, r0
 8006370:	2800      	cmp	r0, #0
 8006372:	d1e1      	bne.n	8006338 <__ssputs_r+0x70>
 8006374:	6921      	ldr	r1, [r4, #16]
 8006376:	4650      	mov	r0, sl
 8006378:	f7ff fefc 	bl	8006174 <_free_r>
 800637c:	e7c7      	b.n	800630e <__ssputs_r+0x46>
	...

08006380 <_svfiprintf_r>:
 8006380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006384:	4698      	mov	r8, r3
 8006386:	898b      	ldrh	r3, [r1, #12]
 8006388:	061b      	lsls	r3, r3, #24
 800638a:	b09d      	sub	sp, #116	; 0x74
 800638c:	4607      	mov	r7, r0
 800638e:	460d      	mov	r5, r1
 8006390:	4614      	mov	r4, r2
 8006392:	d50e      	bpl.n	80063b2 <_svfiprintf_r+0x32>
 8006394:	690b      	ldr	r3, [r1, #16]
 8006396:	b963      	cbnz	r3, 80063b2 <_svfiprintf_r+0x32>
 8006398:	2140      	movs	r1, #64	; 0x40
 800639a:	f7ff ff3b 	bl	8006214 <_malloc_r>
 800639e:	6028      	str	r0, [r5, #0]
 80063a0:	6128      	str	r0, [r5, #16]
 80063a2:	b920      	cbnz	r0, 80063ae <_svfiprintf_r+0x2e>
 80063a4:	230c      	movs	r3, #12
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	f04f 30ff 	mov.w	r0, #4294967295
 80063ac:	e0d1      	b.n	8006552 <_svfiprintf_r+0x1d2>
 80063ae:	2340      	movs	r3, #64	; 0x40
 80063b0:	616b      	str	r3, [r5, #20]
 80063b2:	2300      	movs	r3, #0
 80063b4:	9309      	str	r3, [sp, #36]	; 0x24
 80063b6:	2320      	movs	r3, #32
 80063b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80063c0:	2330      	movs	r3, #48	; 0x30
 80063c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800656c <_svfiprintf_r+0x1ec>
 80063c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ca:	f04f 0901 	mov.w	r9, #1
 80063ce:	4623      	mov	r3, r4
 80063d0:	469a      	mov	sl, r3
 80063d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063d6:	b10a      	cbz	r2, 80063dc <_svfiprintf_r+0x5c>
 80063d8:	2a25      	cmp	r2, #37	; 0x25
 80063da:	d1f9      	bne.n	80063d0 <_svfiprintf_r+0x50>
 80063dc:	ebba 0b04 	subs.w	fp, sl, r4
 80063e0:	d00b      	beq.n	80063fa <_svfiprintf_r+0x7a>
 80063e2:	465b      	mov	r3, fp
 80063e4:	4622      	mov	r2, r4
 80063e6:	4629      	mov	r1, r5
 80063e8:	4638      	mov	r0, r7
 80063ea:	f7ff ff6d 	bl	80062c8 <__ssputs_r>
 80063ee:	3001      	adds	r0, #1
 80063f0:	f000 80aa 	beq.w	8006548 <_svfiprintf_r+0x1c8>
 80063f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063f6:	445a      	add	r2, fp
 80063f8:	9209      	str	r2, [sp, #36]	; 0x24
 80063fa:	f89a 3000 	ldrb.w	r3, [sl]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80a2 	beq.w	8006548 <_svfiprintf_r+0x1c8>
 8006404:	2300      	movs	r3, #0
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800640e:	f10a 0a01 	add.w	sl, sl, #1
 8006412:	9304      	str	r3, [sp, #16]
 8006414:	9307      	str	r3, [sp, #28]
 8006416:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800641a:	931a      	str	r3, [sp, #104]	; 0x68
 800641c:	4654      	mov	r4, sl
 800641e:	2205      	movs	r2, #5
 8006420:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006424:	4851      	ldr	r0, [pc, #324]	; (800656c <_svfiprintf_r+0x1ec>)
 8006426:	f7f9 fee3 	bl	80001f0 <memchr>
 800642a:	9a04      	ldr	r2, [sp, #16]
 800642c:	b9d8      	cbnz	r0, 8006466 <_svfiprintf_r+0xe6>
 800642e:	06d0      	lsls	r0, r2, #27
 8006430:	bf44      	itt	mi
 8006432:	2320      	movmi	r3, #32
 8006434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006438:	0711      	lsls	r1, r2, #28
 800643a:	bf44      	itt	mi
 800643c:	232b      	movmi	r3, #43	; 0x2b
 800643e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006442:	f89a 3000 	ldrb.w	r3, [sl]
 8006446:	2b2a      	cmp	r3, #42	; 0x2a
 8006448:	d015      	beq.n	8006476 <_svfiprintf_r+0xf6>
 800644a:	9a07      	ldr	r2, [sp, #28]
 800644c:	4654      	mov	r4, sl
 800644e:	2000      	movs	r0, #0
 8006450:	f04f 0c0a 	mov.w	ip, #10
 8006454:	4621      	mov	r1, r4
 8006456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800645a:	3b30      	subs	r3, #48	; 0x30
 800645c:	2b09      	cmp	r3, #9
 800645e:	d94e      	bls.n	80064fe <_svfiprintf_r+0x17e>
 8006460:	b1b0      	cbz	r0, 8006490 <_svfiprintf_r+0x110>
 8006462:	9207      	str	r2, [sp, #28]
 8006464:	e014      	b.n	8006490 <_svfiprintf_r+0x110>
 8006466:	eba0 0308 	sub.w	r3, r0, r8
 800646a:	fa09 f303 	lsl.w	r3, r9, r3
 800646e:	4313      	orrs	r3, r2
 8006470:	9304      	str	r3, [sp, #16]
 8006472:	46a2      	mov	sl, r4
 8006474:	e7d2      	b.n	800641c <_svfiprintf_r+0x9c>
 8006476:	9b03      	ldr	r3, [sp, #12]
 8006478:	1d19      	adds	r1, r3, #4
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	9103      	str	r1, [sp, #12]
 800647e:	2b00      	cmp	r3, #0
 8006480:	bfbb      	ittet	lt
 8006482:	425b      	neglt	r3, r3
 8006484:	f042 0202 	orrlt.w	r2, r2, #2
 8006488:	9307      	strge	r3, [sp, #28]
 800648a:	9307      	strlt	r3, [sp, #28]
 800648c:	bfb8      	it	lt
 800648e:	9204      	strlt	r2, [sp, #16]
 8006490:	7823      	ldrb	r3, [r4, #0]
 8006492:	2b2e      	cmp	r3, #46	; 0x2e
 8006494:	d10c      	bne.n	80064b0 <_svfiprintf_r+0x130>
 8006496:	7863      	ldrb	r3, [r4, #1]
 8006498:	2b2a      	cmp	r3, #42	; 0x2a
 800649a:	d135      	bne.n	8006508 <_svfiprintf_r+0x188>
 800649c:	9b03      	ldr	r3, [sp, #12]
 800649e:	1d1a      	adds	r2, r3, #4
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	9203      	str	r2, [sp, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	bfb8      	it	lt
 80064a8:	f04f 33ff 	movlt.w	r3, #4294967295
 80064ac:	3402      	adds	r4, #2
 80064ae:	9305      	str	r3, [sp, #20]
 80064b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800657c <_svfiprintf_r+0x1fc>
 80064b4:	7821      	ldrb	r1, [r4, #0]
 80064b6:	2203      	movs	r2, #3
 80064b8:	4650      	mov	r0, sl
 80064ba:	f7f9 fe99 	bl	80001f0 <memchr>
 80064be:	b140      	cbz	r0, 80064d2 <_svfiprintf_r+0x152>
 80064c0:	2340      	movs	r3, #64	; 0x40
 80064c2:	eba0 000a 	sub.w	r0, r0, sl
 80064c6:	fa03 f000 	lsl.w	r0, r3, r0
 80064ca:	9b04      	ldr	r3, [sp, #16]
 80064cc:	4303      	orrs	r3, r0
 80064ce:	3401      	adds	r4, #1
 80064d0:	9304      	str	r3, [sp, #16]
 80064d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d6:	4826      	ldr	r0, [pc, #152]	; (8006570 <_svfiprintf_r+0x1f0>)
 80064d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064dc:	2206      	movs	r2, #6
 80064de:	f7f9 fe87 	bl	80001f0 <memchr>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	d038      	beq.n	8006558 <_svfiprintf_r+0x1d8>
 80064e6:	4b23      	ldr	r3, [pc, #140]	; (8006574 <_svfiprintf_r+0x1f4>)
 80064e8:	bb1b      	cbnz	r3, 8006532 <_svfiprintf_r+0x1b2>
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	3307      	adds	r3, #7
 80064ee:	f023 0307 	bic.w	r3, r3, #7
 80064f2:	3308      	adds	r3, #8
 80064f4:	9303      	str	r3, [sp, #12]
 80064f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f8:	4433      	add	r3, r6
 80064fa:	9309      	str	r3, [sp, #36]	; 0x24
 80064fc:	e767      	b.n	80063ce <_svfiprintf_r+0x4e>
 80064fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006502:	460c      	mov	r4, r1
 8006504:	2001      	movs	r0, #1
 8006506:	e7a5      	b.n	8006454 <_svfiprintf_r+0xd4>
 8006508:	2300      	movs	r3, #0
 800650a:	3401      	adds	r4, #1
 800650c:	9305      	str	r3, [sp, #20]
 800650e:	4619      	mov	r1, r3
 8006510:	f04f 0c0a 	mov.w	ip, #10
 8006514:	4620      	mov	r0, r4
 8006516:	f810 2b01 	ldrb.w	r2, [r0], #1
 800651a:	3a30      	subs	r2, #48	; 0x30
 800651c:	2a09      	cmp	r2, #9
 800651e:	d903      	bls.n	8006528 <_svfiprintf_r+0x1a8>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0c5      	beq.n	80064b0 <_svfiprintf_r+0x130>
 8006524:	9105      	str	r1, [sp, #20]
 8006526:	e7c3      	b.n	80064b0 <_svfiprintf_r+0x130>
 8006528:	fb0c 2101 	mla	r1, ip, r1, r2
 800652c:	4604      	mov	r4, r0
 800652e:	2301      	movs	r3, #1
 8006530:	e7f0      	b.n	8006514 <_svfiprintf_r+0x194>
 8006532:	ab03      	add	r3, sp, #12
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	462a      	mov	r2, r5
 8006538:	4b0f      	ldr	r3, [pc, #60]	; (8006578 <_svfiprintf_r+0x1f8>)
 800653a:	a904      	add	r1, sp, #16
 800653c:	4638      	mov	r0, r7
 800653e:	f7fd fefd 	bl	800433c <_printf_float>
 8006542:	1c42      	adds	r2, r0, #1
 8006544:	4606      	mov	r6, r0
 8006546:	d1d6      	bne.n	80064f6 <_svfiprintf_r+0x176>
 8006548:	89ab      	ldrh	r3, [r5, #12]
 800654a:	065b      	lsls	r3, r3, #25
 800654c:	f53f af2c 	bmi.w	80063a8 <_svfiprintf_r+0x28>
 8006550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006552:	b01d      	add	sp, #116	; 0x74
 8006554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006558:	ab03      	add	r3, sp, #12
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	462a      	mov	r2, r5
 800655e:	4b06      	ldr	r3, [pc, #24]	; (8006578 <_svfiprintf_r+0x1f8>)
 8006560:	a904      	add	r1, sp, #16
 8006562:	4638      	mov	r0, r7
 8006564:	f7fe f98e 	bl	8004884 <_printf_i>
 8006568:	e7eb      	b.n	8006542 <_svfiprintf_r+0x1c2>
 800656a:	bf00      	nop
 800656c:	080072cc 	.word	0x080072cc
 8006570:	080072d6 	.word	0x080072d6
 8006574:	0800433d 	.word	0x0800433d
 8006578:	080062c9 	.word	0x080062c9
 800657c:	080072d2 	.word	0x080072d2

08006580 <__sfputc_r>:
 8006580:	6893      	ldr	r3, [r2, #8]
 8006582:	3b01      	subs	r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	b410      	push	{r4}
 8006588:	6093      	str	r3, [r2, #8]
 800658a:	da08      	bge.n	800659e <__sfputc_r+0x1e>
 800658c:	6994      	ldr	r4, [r2, #24]
 800658e:	42a3      	cmp	r3, r4
 8006590:	db01      	blt.n	8006596 <__sfputc_r+0x16>
 8006592:	290a      	cmp	r1, #10
 8006594:	d103      	bne.n	800659e <__sfputc_r+0x1e>
 8006596:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659a:	f000 b99f 	b.w	80068dc <__swbuf_r>
 800659e:	6813      	ldr	r3, [r2, #0]
 80065a0:	1c58      	adds	r0, r3, #1
 80065a2:	6010      	str	r0, [r2, #0]
 80065a4:	7019      	strb	r1, [r3, #0]
 80065a6:	4608      	mov	r0, r1
 80065a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <__sfputs_r>:
 80065ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b0:	4606      	mov	r6, r0
 80065b2:	460f      	mov	r7, r1
 80065b4:	4614      	mov	r4, r2
 80065b6:	18d5      	adds	r5, r2, r3
 80065b8:	42ac      	cmp	r4, r5
 80065ba:	d101      	bne.n	80065c0 <__sfputs_r+0x12>
 80065bc:	2000      	movs	r0, #0
 80065be:	e007      	b.n	80065d0 <__sfputs_r+0x22>
 80065c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065c4:	463a      	mov	r2, r7
 80065c6:	4630      	mov	r0, r6
 80065c8:	f7ff ffda 	bl	8006580 <__sfputc_r>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d1f3      	bne.n	80065b8 <__sfputs_r+0xa>
 80065d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065d4 <_vfiprintf_r>:
 80065d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d8:	460d      	mov	r5, r1
 80065da:	b09d      	sub	sp, #116	; 0x74
 80065dc:	4614      	mov	r4, r2
 80065de:	4698      	mov	r8, r3
 80065e0:	4606      	mov	r6, r0
 80065e2:	b118      	cbz	r0, 80065ec <_vfiprintf_r+0x18>
 80065e4:	6983      	ldr	r3, [r0, #24]
 80065e6:	b90b      	cbnz	r3, 80065ec <_vfiprintf_r+0x18>
 80065e8:	f7ff f97a 	bl	80058e0 <__sinit>
 80065ec:	4b89      	ldr	r3, [pc, #548]	; (8006814 <_vfiprintf_r+0x240>)
 80065ee:	429d      	cmp	r5, r3
 80065f0:	d11b      	bne.n	800662a <_vfiprintf_r+0x56>
 80065f2:	6875      	ldr	r5, [r6, #4]
 80065f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f6:	07d9      	lsls	r1, r3, #31
 80065f8:	d405      	bmi.n	8006606 <_vfiprintf_r+0x32>
 80065fa:	89ab      	ldrh	r3, [r5, #12]
 80065fc:	059a      	lsls	r2, r3, #22
 80065fe:	d402      	bmi.n	8006606 <_vfiprintf_r+0x32>
 8006600:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006602:	f7ff fa10 	bl	8005a26 <__retarget_lock_acquire_recursive>
 8006606:	89ab      	ldrh	r3, [r5, #12]
 8006608:	071b      	lsls	r3, r3, #28
 800660a:	d501      	bpl.n	8006610 <_vfiprintf_r+0x3c>
 800660c:	692b      	ldr	r3, [r5, #16]
 800660e:	b9eb      	cbnz	r3, 800664c <_vfiprintf_r+0x78>
 8006610:	4629      	mov	r1, r5
 8006612:	4630      	mov	r0, r6
 8006614:	f000 f9c6 	bl	80069a4 <__swsetup_r>
 8006618:	b1c0      	cbz	r0, 800664c <_vfiprintf_r+0x78>
 800661a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800661c:	07dc      	lsls	r4, r3, #31
 800661e:	d50e      	bpl.n	800663e <_vfiprintf_r+0x6a>
 8006620:	f04f 30ff 	mov.w	r0, #4294967295
 8006624:	b01d      	add	sp, #116	; 0x74
 8006626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800662a:	4b7b      	ldr	r3, [pc, #492]	; (8006818 <_vfiprintf_r+0x244>)
 800662c:	429d      	cmp	r5, r3
 800662e:	d101      	bne.n	8006634 <_vfiprintf_r+0x60>
 8006630:	68b5      	ldr	r5, [r6, #8]
 8006632:	e7df      	b.n	80065f4 <_vfiprintf_r+0x20>
 8006634:	4b79      	ldr	r3, [pc, #484]	; (800681c <_vfiprintf_r+0x248>)
 8006636:	429d      	cmp	r5, r3
 8006638:	bf08      	it	eq
 800663a:	68f5      	ldreq	r5, [r6, #12]
 800663c:	e7da      	b.n	80065f4 <_vfiprintf_r+0x20>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	0598      	lsls	r0, r3, #22
 8006642:	d4ed      	bmi.n	8006620 <_vfiprintf_r+0x4c>
 8006644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006646:	f7ff f9ef 	bl	8005a28 <__retarget_lock_release_recursive>
 800664a:	e7e9      	b.n	8006620 <_vfiprintf_r+0x4c>
 800664c:	2300      	movs	r3, #0
 800664e:	9309      	str	r3, [sp, #36]	; 0x24
 8006650:	2320      	movs	r3, #32
 8006652:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006656:	f8cd 800c 	str.w	r8, [sp, #12]
 800665a:	2330      	movs	r3, #48	; 0x30
 800665c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006820 <_vfiprintf_r+0x24c>
 8006660:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006664:	f04f 0901 	mov.w	r9, #1
 8006668:	4623      	mov	r3, r4
 800666a:	469a      	mov	sl, r3
 800666c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006670:	b10a      	cbz	r2, 8006676 <_vfiprintf_r+0xa2>
 8006672:	2a25      	cmp	r2, #37	; 0x25
 8006674:	d1f9      	bne.n	800666a <_vfiprintf_r+0x96>
 8006676:	ebba 0b04 	subs.w	fp, sl, r4
 800667a:	d00b      	beq.n	8006694 <_vfiprintf_r+0xc0>
 800667c:	465b      	mov	r3, fp
 800667e:	4622      	mov	r2, r4
 8006680:	4629      	mov	r1, r5
 8006682:	4630      	mov	r0, r6
 8006684:	f7ff ff93 	bl	80065ae <__sfputs_r>
 8006688:	3001      	adds	r0, #1
 800668a:	f000 80aa 	beq.w	80067e2 <_vfiprintf_r+0x20e>
 800668e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006690:	445a      	add	r2, fp
 8006692:	9209      	str	r2, [sp, #36]	; 0x24
 8006694:	f89a 3000 	ldrb.w	r3, [sl]
 8006698:	2b00      	cmp	r3, #0
 800669a:	f000 80a2 	beq.w	80067e2 <_vfiprintf_r+0x20e>
 800669e:	2300      	movs	r3, #0
 80066a0:	f04f 32ff 	mov.w	r2, #4294967295
 80066a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a8:	f10a 0a01 	add.w	sl, sl, #1
 80066ac:	9304      	str	r3, [sp, #16]
 80066ae:	9307      	str	r3, [sp, #28]
 80066b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066b4:	931a      	str	r3, [sp, #104]	; 0x68
 80066b6:	4654      	mov	r4, sl
 80066b8:	2205      	movs	r2, #5
 80066ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066be:	4858      	ldr	r0, [pc, #352]	; (8006820 <_vfiprintf_r+0x24c>)
 80066c0:	f7f9 fd96 	bl	80001f0 <memchr>
 80066c4:	9a04      	ldr	r2, [sp, #16]
 80066c6:	b9d8      	cbnz	r0, 8006700 <_vfiprintf_r+0x12c>
 80066c8:	06d1      	lsls	r1, r2, #27
 80066ca:	bf44      	itt	mi
 80066cc:	2320      	movmi	r3, #32
 80066ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066d2:	0713      	lsls	r3, r2, #28
 80066d4:	bf44      	itt	mi
 80066d6:	232b      	movmi	r3, #43	; 0x2b
 80066d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066dc:	f89a 3000 	ldrb.w	r3, [sl]
 80066e0:	2b2a      	cmp	r3, #42	; 0x2a
 80066e2:	d015      	beq.n	8006710 <_vfiprintf_r+0x13c>
 80066e4:	9a07      	ldr	r2, [sp, #28]
 80066e6:	4654      	mov	r4, sl
 80066e8:	2000      	movs	r0, #0
 80066ea:	f04f 0c0a 	mov.w	ip, #10
 80066ee:	4621      	mov	r1, r4
 80066f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f4:	3b30      	subs	r3, #48	; 0x30
 80066f6:	2b09      	cmp	r3, #9
 80066f8:	d94e      	bls.n	8006798 <_vfiprintf_r+0x1c4>
 80066fa:	b1b0      	cbz	r0, 800672a <_vfiprintf_r+0x156>
 80066fc:	9207      	str	r2, [sp, #28]
 80066fe:	e014      	b.n	800672a <_vfiprintf_r+0x156>
 8006700:	eba0 0308 	sub.w	r3, r0, r8
 8006704:	fa09 f303 	lsl.w	r3, r9, r3
 8006708:	4313      	orrs	r3, r2
 800670a:	9304      	str	r3, [sp, #16]
 800670c:	46a2      	mov	sl, r4
 800670e:	e7d2      	b.n	80066b6 <_vfiprintf_r+0xe2>
 8006710:	9b03      	ldr	r3, [sp, #12]
 8006712:	1d19      	adds	r1, r3, #4
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	9103      	str	r1, [sp, #12]
 8006718:	2b00      	cmp	r3, #0
 800671a:	bfbb      	ittet	lt
 800671c:	425b      	neglt	r3, r3
 800671e:	f042 0202 	orrlt.w	r2, r2, #2
 8006722:	9307      	strge	r3, [sp, #28]
 8006724:	9307      	strlt	r3, [sp, #28]
 8006726:	bfb8      	it	lt
 8006728:	9204      	strlt	r2, [sp, #16]
 800672a:	7823      	ldrb	r3, [r4, #0]
 800672c:	2b2e      	cmp	r3, #46	; 0x2e
 800672e:	d10c      	bne.n	800674a <_vfiprintf_r+0x176>
 8006730:	7863      	ldrb	r3, [r4, #1]
 8006732:	2b2a      	cmp	r3, #42	; 0x2a
 8006734:	d135      	bne.n	80067a2 <_vfiprintf_r+0x1ce>
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	1d1a      	adds	r2, r3, #4
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	9203      	str	r2, [sp, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	bfb8      	it	lt
 8006742:	f04f 33ff 	movlt.w	r3, #4294967295
 8006746:	3402      	adds	r4, #2
 8006748:	9305      	str	r3, [sp, #20]
 800674a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006830 <_vfiprintf_r+0x25c>
 800674e:	7821      	ldrb	r1, [r4, #0]
 8006750:	2203      	movs	r2, #3
 8006752:	4650      	mov	r0, sl
 8006754:	f7f9 fd4c 	bl	80001f0 <memchr>
 8006758:	b140      	cbz	r0, 800676c <_vfiprintf_r+0x198>
 800675a:	2340      	movs	r3, #64	; 0x40
 800675c:	eba0 000a 	sub.w	r0, r0, sl
 8006760:	fa03 f000 	lsl.w	r0, r3, r0
 8006764:	9b04      	ldr	r3, [sp, #16]
 8006766:	4303      	orrs	r3, r0
 8006768:	3401      	adds	r4, #1
 800676a:	9304      	str	r3, [sp, #16]
 800676c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006770:	482c      	ldr	r0, [pc, #176]	; (8006824 <_vfiprintf_r+0x250>)
 8006772:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006776:	2206      	movs	r2, #6
 8006778:	f7f9 fd3a 	bl	80001f0 <memchr>
 800677c:	2800      	cmp	r0, #0
 800677e:	d03f      	beq.n	8006800 <_vfiprintf_r+0x22c>
 8006780:	4b29      	ldr	r3, [pc, #164]	; (8006828 <_vfiprintf_r+0x254>)
 8006782:	bb1b      	cbnz	r3, 80067cc <_vfiprintf_r+0x1f8>
 8006784:	9b03      	ldr	r3, [sp, #12]
 8006786:	3307      	adds	r3, #7
 8006788:	f023 0307 	bic.w	r3, r3, #7
 800678c:	3308      	adds	r3, #8
 800678e:	9303      	str	r3, [sp, #12]
 8006790:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006792:	443b      	add	r3, r7
 8006794:	9309      	str	r3, [sp, #36]	; 0x24
 8006796:	e767      	b.n	8006668 <_vfiprintf_r+0x94>
 8006798:	fb0c 3202 	mla	r2, ip, r2, r3
 800679c:	460c      	mov	r4, r1
 800679e:	2001      	movs	r0, #1
 80067a0:	e7a5      	b.n	80066ee <_vfiprintf_r+0x11a>
 80067a2:	2300      	movs	r3, #0
 80067a4:	3401      	adds	r4, #1
 80067a6:	9305      	str	r3, [sp, #20]
 80067a8:	4619      	mov	r1, r3
 80067aa:	f04f 0c0a 	mov.w	ip, #10
 80067ae:	4620      	mov	r0, r4
 80067b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067b4:	3a30      	subs	r2, #48	; 0x30
 80067b6:	2a09      	cmp	r2, #9
 80067b8:	d903      	bls.n	80067c2 <_vfiprintf_r+0x1ee>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d0c5      	beq.n	800674a <_vfiprintf_r+0x176>
 80067be:	9105      	str	r1, [sp, #20]
 80067c0:	e7c3      	b.n	800674a <_vfiprintf_r+0x176>
 80067c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80067c6:	4604      	mov	r4, r0
 80067c8:	2301      	movs	r3, #1
 80067ca:	e7f0      	b.n	80067ae <_vfiprintf_r+0x1da>
 80067cc:	ab03      	add	r3, sp, #12
 80067ce:	9300      	str	r3, [sp, #0]
 80067d0:	462a      	mov	r2, r5
 80067d2:	4b16      	ldr	r3, [pc, #88]	; (800682c <_vfiprintf_r+0x258>)
 80067d4:	a904      	add	r1, sp, #16
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7fd fdb0 	bl	800433c <_printf_float>
 80067dc:	4607      	mov	r7, r0
 80067de:	1c78      	adds	r0, r7, #1
 80067e0:	d1d6      	bne.n	8006790 <_vfiprintf_r+0x1bc>
 80067e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e4:	07d9      	lsls	r1, r3, #31
 80067e6:	d405      	bmi.n	80067f4 <_vfiprintf_r+0x220>
 80067e8:	89ab      	ldrh	r3, [r5, #12]
 80067ea:	059a      	lsls	r2, r3, #22
 80067ec:	d402      	bmi.n	80067f4 <_vfiprintf_r+0x220>
 80067ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067f0:	f7ff f91a 	bl	8005a28 <__retarget_lock_release_recursive>
 80067f4:	89ab      	ldrh	r3, [r5, #12]
 80067f6:	065b      	lsls	r3, r3, #25
 80067f8:	f53f af12 	bmi.w	8006620 <_vfiprintf_r+0x4c>
 80067fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067fe:	e711      	b.n	8006624 <_vfiprintf_r+0x50>
 8006800:	ab03      	add	r3, sp, #12
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	462a      	mov	r2, r5
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <_vfiprintf_r+0x258>)
 8006808:	a904      	add	r1, sp, #16
 800680a:	4630      	mov	r0, r6
 800680c:	f7fe f83a 	bl	8004884 <_printf_i>
 8006810:	e7e4      	b.n	80067dc <_vfiprintf_r+0x208>
 8006812:	bf00      	nop
 8006814:	0800712c 	.word	0x0800712c
 8006818:	0800714c 	.word	0x0800714c
 800681c:	0800710c 	.word	0x0800710c
 8006820:	080072cc 	.word	0x080072cc
 8006824:	080072d6 	.word	0x080072d6
 8006828:	0800433d 	.word	0x0800433d
 800682c:	080065af 	.word	0x080065af
 8006830:	080072d2 	.word	0x080072d2

08006834 <_sbrk_r>:
 8006834:	b538      	push	{r3, r4, r5, lr}
 8006836:	4d06      	ldr	r5, [pc, #24]	; (8006850 <_sbrk_r+0x1c>)
 8006838:	2300      	movs	r3, #0
 800683a:	4604      	mov	r4, r0
 800683c:	4608      	mov	r0, r1
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	f7fa fd6e 	bl	8001320 <_sbrk>
 8006844:	1c43      	adds	r3, r0, #1
 8006846:	d102      	bne.n	800684e <_sbrk_r+0x1a>
 8006848:	682b      	ldr	r3, [r5, #0]
 800684a:	b103      	cbz	r3, 800684e <_sbrk_r+0x1a>
 800684c:	6023      	str	r3, [r4, #0]
 800684e:	bd38      	pop	{r3, r4, r5, pc}
 8006850:	2000036c 	.word	0x2000036c

08006854 <__sread>:
 8006854:	b510      	push	{r4, lr}
 8006856:	460c      	mov	r4, r1
 8006858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685c:	f000 fae6 	bl	8006e2c <_read_r>
 8006860:	2800      	cmp	r0, #0
 8006862:	bfab      	itete	ge
 8006864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006866:	89a3      	ldrhlt	r3, [r4, #12]
 8006868:	181b      	addge	r3, r3, r0
 800686a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800686e:	bfac      	ite	ge
 8006870:	6563      	strge	r3, [r4, #84]	; 0x54
 8006872:	81a3      	strhlt	r3, [r4, #12]
 8006874:	bd10      	pop	{r4, pc}

08006876 <__swrite>:
 8006876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687a:	461f      	mov	r7, r3
 800687c:	898b      	ldrh	r3, [r1, #12]
 800687e:	05db      	lsls	r3, r3, #23
 8006880:	4605      	mov	r5, r0
 8006882:	460c      	mov	r4, r1
 8006884:	4616      	mov	r6, r2
 8006886:	d505      	bpl.n	8006894 <__swrite+0x1e>
 8006888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688c:	2302      	movs	r3, #2
 800688e:	2200      	movs	r2, #0
 8006890:	f000 f9f8 	bl	8006c84 <_lseek_r>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800689a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	4632      	mov	r2, r6
 80068a2:	463b      	mov	r3, r7
 80068a4:	4628      	mov	r0, r5
 80068a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068aa:	f000 b869 	b.w	8006980 <_write_r>

080068ae <__sseek>:
 80068ae:	b510      	push	{r4, lr}
 80068b0:	460c      	mov	r4, r1
 80068b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b6:	f000 f9e5 	bl	8006c84 <_lseek_r>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	bf15      	itete	ne
 80068c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80068c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068ca:	81a3      	strheq	r3, [r4, #12]
 80068cc:	bf18      	it	ne
 80068ce:	81a3      	strhne	r3, [r4, #12]
 80068d0:	bd10      	pop	{r4, pc}

080068d2 <__sclose>:
 80068d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d6:	f000 b8f1 	b.w	8006abc <_close_r>
	...

080068dc <__swbuf_r>:
 80068dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068de:	460e      	mov	r6, r1
 80068e0:	4614      	mov	r4, r2
 80068e2:	4605      	mov	r5, r0
 80068e4:	b118      	cbz	r0, 80068ee <__swbuf_r+0x12>
 80068e6:	6983      	ldr	r3, [r0, #24]
 80068e8:	b90b      	cbnz	r3, 80068ee <__swbuf_r+0x12>
 80068ea:	f7fe fff9 	bl	80058e0 <__sinit>
 80068ee:	4b21      	ldr	r3, [pc, #132]	; (8006974 <__swbuf_r+0x98>)
 80068f0:	429c      	cmp	r4, r3
 80068f2:	d12b      	bne.n	800694c <__swbuf_r+0x70>
 80068f4:	686c      	ldr	r4, [r5, #4]
 80068f6:	69a3      	ldr	r3, [r4, #24]
 80068f8:	60a3      	str	r3, [r4, #8]
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	071a      	lsls	r2, r3, #28
 80068fe:	d52f      	bpl.n	8006960 <__swbuf_r+0x84>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	b36b      	cbz	r3, 8006960 <__swbuf_r+0x84>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	6820      	ldr	r0, [r4, #0]
 8006908:	1ac0      	subs	r0, r0, r3
 800690a:	6963      	ldr	r3, [r4, #20]
 800690c:	b2f6      	uxtb	r6, r6
 800690e:	4283      	cmp	r3, r0
 8006910:	4637      	mov	r7, r6
 8006912:	dc04      	bgt.n	800691e <__swbuf_r+0x42>
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f966 	bl	8006be8 <_fflush_r>
 800691c:	bb30      	cbnz	r0, 800696c <__swbuf_r+0x90>
 800691e:	68a3      	ldr	r3, [r4, #8]
 8006920:	3b01      	subs	r3, #1
 8006922:	60a3      	str	r3, [r4, #8]
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	6022      	str	r2, [r4, #0]
 800692a:	701e      	strb	r6, [r3, #0]
 800692c:	6963      	ldr	r3, [r4, #20]
 800692e:	3001      	adds	r0, #1
 8006930:	4283      	cmp	r3, r0
 8006932:	d004      	beq.n	800693e <__swbuf_r+0x62>
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	07db      	lsls	r3, r3, #31
 8006938:	d506      	bpl.n	8006948 <__swbuf_r+0x6c>
 800693a:	2e0a      	cmp	r6, #10
 800693c:	d104      	bne.n	8006948 <__swbuf_r+0x6c>
 800693e:	4621      	mov	r1, r4
 8006940:	4628      	mov	r0, r5
 8006942:	f000 f951 	bl	8006be8 <_fflush_r>
 8006946:	b988      	cbnz	r0, 800696c <__swbuf_r+0x90>
 8006948:	4638      	mov	r0, r7
 800694a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800694c:	4b0a      	ldr	r3, [pc, #40]	; (8006978 <__swbuf_r+0x9c>)
 800694e:	429c      	cmp	r4, r3
 8006950:	d101      	bne.n	8006956 <__swbuf_r+0x7a>
 8006952:	68ac      	ldr	r4, [r5, #8]
 8006954:	e7cf      	b.n	80068f6 <__swbuf_r+0x1a>
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <__swbuf_r+0xa0>)
 8006958:	429c      	cmp	r4, r3
 800695a:	bf08      	it	eq
 800695c:	68ec      	ldreq	r4, [r5, #12]
 800695e:	e7ca      	b.n	80068f6 <__swbuf_r+0x1a>
 8006960:	4621      	mov	r1, r4
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f81e 	bl	80069a4 <__swsetup_r>
 8006968:	2800      	cmp	r0, #0
 800696a:	d0cb      	beq.n	8006904 <__swbuf_r+0x28>
 800696c:	f04f 37ff 	mov.w	r7, #4294967295
 8006970:	e7ea      	b.n	8006948 <__swbuf_r+0x6c>
 8006972:	bf00      	nop
 8006974:	0800712c 	.word	0x0800712c
 8006978:	0800714c 	.word	0x0800714c
 800697c:	0800710c 	.word	0x0800710c

08006980 <_write_r>:
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	4d07      	ldr	r5, [pc, #28]	; (80069a0 <_write_r+0x20>)
 8006984:	4604      	mov	r4, r0
 8006986:	4608      	mov	r0, r1
 8006988:	4611      	mov	r1, r2
 800698a:	2200      	movs	r2, #0
 800698c:	602a      	str	r2, [r5, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	f7fa fc75 	bl	800127e <_write>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_write_r+0x1e>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_write_r+0x1e>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	2000036c 	.word	0x2000036c

080069a4 <__swsetup_r>:
 80069a4:	4b32      	ldr	r3, [pc, #200]	; (8006a70 <__swsetup_r+0xcc>)
 80069a6:	b570      	push	{r4, r5, r6, lr}
 80069a8:	681d      	ldr	r5, [r3, #0]
 80069aa:	4606      	mov	r6, r0
 80069ac:	460c      	mov	r4, r1
 80069ae:	b125      	cbz	r5, 80069ba <__swsetup_r+0x16>
 80069b0:	69ab      	ldr	r3, [r5, #24]
 80069b2:	b913      	cbnz	r3, 80069ba <__swsetup_r+0x16>
 80069b4:	4628      	mov	r0, r5
 80069b6:	f7fe ff93 	bl	80058e0 <__sinit>
 80069ba:	4b2e      	ldr	r3, [pc, #184]	; (8006a74 <__swsetup_r+0xd0>)
 80069bc:	429c      	cmp	r4, r3
 80069be:	d10f      	bne.n	80069e0 <__swsetup_r+0x3c>
 80069c0:	686c      	ldr	r4, [r5, #4]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069c8:	0719      	lsls	r1, r3, #28
 80069ca:	d42c      	bmi.n	8006a26 <__swsetup_r+0x82>
 80069cc:	06dd      	lsls	r5, r3, #27
 80069ce:	d411      	bmi.n	80069f4 <__swsetup_r+0x50>
 80069d0:	2309      	movs	r3, #9
 80069d2:	6033      	str	r3, [r6, #0]
 80069d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	f04f 30ff 	mov.w	r0, #4294967295
 80069de:	e03e      	b.n	8006a5e <__swsetup_r+0xba>
 80069e0:	4b25      	ldr	r3, [pc, #148]	; (8006a78 <__swsetup_r+0xd4>)
 80069e2:	429c      	cmp	r4, r3
 80069e4:	d101      	bne.n	80069ea <__swsetup_r+0x46>
 80069e6:	68ac      	ldr	r4, [r5, #8]
 80069e8:	e7eb      	b.n	80069c2 <__swsetup_r+0x1e>
 80069ea:	4b24      	ldr	r3, [pc, #144]	; (8006a7c <__swsetup_r+0xd8>)
 80069ec:	429c      	cmp	r4, r3
 80069ee:	bf08      	it	eq
 80069f0:	68ec      	ldreq	r4, [r5, #12]
 80069f2:	e7e6      	b.n	80069c2 <__swsetup_r+0x1e>
 80069f4:	0758      	lsls	r0, r3, #29
 80069f6:	d512      	bpl.n	8006a1e <__swsetup_r+0x7a>
 80069f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069fa:	b141      	cbz	r1, 8006a0e <__swsetup_r+0x6a>
 80069fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a00:	4299      	cmp	r1, r3
 8006a02:	d002      	beq.n	8006a0a <__swsetup_r+0x66>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff fbb5 	bl	8006174 <_free_r>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	6363      	str	r3, [r4, #52]	; 0x34
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a14:	81a3      	strh	r3, [r4, #12]
 8006a16:	2300      	movs	r3, #0
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	89a3      	ldrh	r3, [r4, #12]
 8006a20:	f043 0308 	orr.w	r3, r3, #8
 8006a24:	81a3      	strh	r3, [r4, #12]
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	b94b      	cbnz	r3, 8006a3e <__swsetup_r+0x9a>
 8006a2a:	89a3      	ldrh	r3, [r4, #12]
 8006a2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a34:	d003      	beq.n	8006a3e <__swsetup_r+0x9a>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4630      	mov	r0, r6
 8006a3a:	f000 f959 	bl	8006cf0 <__smakebuf_r>
 8006a3e:	89a0      	ldrh	r0, [r4, #12]
 8006a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a44:	f010 0301 	ands.w	r3, r0, #1
 8006a48:	d00a      	beq.n	8006a60 <__swsetup_r+0xbc>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60a3      	str	r3, [r4, #8]
 8006a4e:	6963      	ldr	r3, [r4, #20]
 8006a50:	425b      	negs	r3, r3
 8006a52:	61a3      	str	r3, [r4, #24]
 8006a54:	6923      	ldr	r3, [r4, #16]
 8006a56:	b943      	cbnz	r3, 8006a6a <__swsetup_r+0xc6>
 8006a58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a5c:	d1ba      	bne.n	80069d4 <__swsetup_r+0x30>
 8006a5e:	bd70      	pop	{r4, r5, r6, pc}
 8006a60:	0781      	lsls	r1, r0, #30
 8006a62:	bf58      	it	pl
 8006a64:	6963      	ldrpl	r3, [r4, #20]
 8006a66:	60a3      	str	r3, [r4, #8]
 8006a68:	e7f4      	b.n	8006a54 <__swsetup_r+0xb0>
 8006a6a:	2000      	movs	r0, #0
 8006a6c:	e7f7      	b.n	8006a5e <__swsetup_r+0xba>
 8006a6e:	bf00      	nop
 8006a70:	2000000c 	.word	0x2000000c
 8006a74:	0800712c 	.word	0x0800712c
 8006a78:	0800714c 	.word	0x0800714c
 8006a7c:	0800710c 	.word	0x0800710c

08006a80 <__assert_func>:
 8006a80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a82:	4614      	mov	r4, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	4b09      	ldr	r3, [pc, #36]	; (8006aac <__assert_func+0x2c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4605      	mov	r5, r0
 8006a8c:	68d8      	ldr	r0, [r3, #12]
 8006a8e:	b14c      	cbz	r4, 8006aa4 <__assert_func+0x24>
 8006a90:	4b07      	ldr	r3, [pc, #28]	; (8006ab0 <__assert_func+0x30>)
 8006a92:	9100      	str	r1, [sp, #0]
 8006a94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a98:	4906      	ldr	r1, [pc, #24]	; (8006ab4 <__assert_func+0x34>)
 8006a9a:	462b      	mov	r3, r5
 8006a9c:	f000 f8e0 	bl	8006c60 <fiprintf>
 8006aa0:	f000 f9e3 	bl	8006e6a <abort>
 8006aa4:	4b04      	ldr	r3, [pc, #16]	; (8006ab8 <__assert_func+0x38>)
 8006aa6:	461c      	mov	r4, r3
 8006aa8:	e7f3      	b.n	8006a92 <__assert_func+0x12>
 8006aaa:	bf00      	nop
 8006aac:	2000000c 	.word	0x2000000c
 8006ab0:	080072dd 	.word	0x080072dd
 8006ab4:	080072ea 	.word	0x080072ea
 8006ab8:	08007318 	.word	0x08007318

08006abc <_close_r>:
 8006abc:	b538      	push	{r3, r4, r5, lr}
 8006abe:	4d06      	ldr	r5, [pc, #24]	; (8006ad8 <_close_r+0x1c>)
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	4604      	mov	r4, r0
 8006ac4:	4608      	mov	r0, r1
 8006ac6:	602b      	str	r3, [r5, #0]
 8006ac8:	f7fa fbf5 	bl	80012b6 <_close>
 8006acc:	1c43      	adds	r3, r0, #1
 8006ace:	d102      	bne.n	8006ad6 <_close_r+0x1a>
 8006ad0:	682b      	ldr	r3, [r5, #0]
 8006ad2:	b103      	cbz	r3, 8006ad6 <_close_r+0x1a>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	2000036c 	.word	0x2000036c

08006adc <__sflush_r>:
 8006adc:	898a      	ldrh	r2, [r1, #12]
 8006ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	0710      	lsls	r0, r2, #28
 8006ae6:	460c      	mov	r4, r1
 8006ae8:	d458      	bmi.n	8006b9c <__sflush_r+0xc0>
 8006aea:	684b      	ldr	r3, [r1, #4]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	dc05      	bgt.n	8006afc <__sflush_r+0x20>
 8006af0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	dc02      	bgt.n	8006afc <__sflush_r+0x20>
 8006af6:	2000      	movs	r0, #0
 8006af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006afc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006afe:	2e00      	cmp	r6, #0
 8006b00:	d0f9      	beq.n	8006af6 <__sflush_r+0x1a>
 8006b02:	2300      	movs	r3, #0
 8006b04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006b08:	682f      	ldr	r7, [r5, #0]
 8006b0a:	602b      	str	r3, [r5, #0]
 8006b0c:	d032      	beq.n	8006b74 <__sflush_r+0x98>
 8006b0e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	075a      	lsls	r2, r3, #29
 8006b14:	d505      	bpl.n	8006b22 <__sflush_r+0x46>
 8006b16:	6863      	ldr	r3, [r4, #4]
 8006b18:	1ac0      	subs	r0, r0, r3
 8006b1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006b1c:	b10b      	cbz	r3, 8006b22 <__sflush_r+0x46>
 8006b1e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006b20:	1ac0      	subs	r0, r0, r3
 8006b22:	2300      	movs	r3, #0
 8006b24:	4602      	mov	r2, r0
 8006b26:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b28:	6a21      	ldr	r1, [r4, #32]
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	47b0      	blx	r6
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	89a3      	ldrh	r3, [r4, #12]
 8006b32:	d106      	bne.n	8006b42 <__sflush_r+0x66>
 8006b34:	6829      	ldr	r1, [r5, #0]
 8006b36:	291d      	cmp	r1, #29
 8006b38:	d82c      	bhi.n	8006b94 <__sflush_r+0xb8>
 8006b3a:	4a2a      	ldr	r2, [pc, #168]	; (8006be4 <__sflush_r+0x108>)
 8006b3c:	40ca      	lsrs	r2, r1
 8006b3e:	07d6      	lsls	r6, r2, #31
 8006b40:	d528      	bpl.n	8006b94 <__sflush_r+0xb8>
 8006b42:	2200      	movs	r2, #0
 8006b44:	6062      	str	r2, [r4, #4]
 8006b46:	04d9      	lsls	r1, r3, #19
 8006b48:	6922      	ldr	r2, [r4, #16]
 8006b4a:	6022      	str	r2, [r4, #0]
 8006b4c:	d504      	bpl.n	8006b58 <__sflush_r+0x7c>
 8006b4e:	1c42      	adds	r2, r0, #1
 8006b50:	d101      	bne.n	8006b56 <__sflush_r+0x7a>
 8006b52:	682b      	ldr	r3, [r5, #0]
 8006b54:	b903      	cbnz	r3, 8006b58 <__sflush_r+0x7c>
 8006b56:	6560      	str	r0, [r4, #84]	; 0x54
 8006b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b5a:	602f      	str	r7, [r5, #0]
 8006b5c:	2900      	cmp	r1, #0
 8006b5e:	d0ca      	beq.n	8006af6 <__sflush_r+0x1a>
 8006b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b64:	4299      	cmp	r1, r3
 8006b66:	d002      	beq.n	8006b6e <__sflush_r+0x92>
 8006b68:	4628      	mov	r0, r5
 8006b6a:	f7ff fb03 	bl	8006174 <_free_r>
 8006b6e:	2000      	movs	r0, #0
 8006b70:	6360      	str	r0, [r4, #52]	; 0x34
 8006b72:	e7c1      	b.n	8006af8 <__sflush_r+0x1c>
 8006b74:	6a21      	ldr	r1, [r4, #32]
 8006b76:	2301      	movs	r3, #1
 8006b78:	4628      	mov	r0, r5
 8006b7a:	47b0      	blx	r6
 8006b7c:	1c41      	adds	r1, r0, #1
 8006b7e:	d1c7      	bne.n	8006b10 <__sflush_r+0x34>
 8006b80:	682b      	ldr	r3, [r5, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0c4      	beq.n	8006b10 <__sflush_r+0x34>
 8006b86:	2b1d      	cmp	r3, #29
 8006b88:	d001      	beq.n	8006b8e <__sflush_r+0xb2>
 8006b8a:	2b16      	cmp	r3, #22
 8006b8c:	d101      	bne.n	8006b92 <__sflush_r+0xb6>
 8006b8e:	602f      	str	r7, [r5, #0]
 8006b90:	e7b1      	b.n	8006af6 <__sflush_r+0x1a>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	e7ad      	b.n	8006af8 <__sflush_r+0x1c>
 8006b9c:	690f      	ldr	r7, [r1, #16]
 8006b9e:	2f00      	cmp	r7, #0
 8006ba0:	d0a9      	beq.n	8006af6 <__sflush_r+0x1a>
 8006ba2:	0793      	lsls	r3, r2, #30
 8006ba4:	680e      	ldr	r6, [r1, #0]
 8006ba6:	bf08      	it	eq
 8006ba8:	694b      	ldreq	r3, [r1, #20]
 8006baa:	600f      	str	r7, [r1, #0]
 8006bac:	bf18      	it	ne
 8006bae:	2300      	movne	r3, #0
 8006bb0:	eba6 0807 	sub.w	r8, r6, r7
 8006bb4:	608b      	str	r3, [r1, #8]
 8006bb6:	f1b8 0f00 	cmp.w	r8, #0
 8006bba:	dd9c      	ble.n	8006af6 <__sflush_r+0x1a>
 8006bbc:	6a21      	ldr	r1, [r4, #32]
 8006bbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006bc0:	4643      	mov	r3, r8
 8006bc2:	463a      	mov	r2, r7
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	47b0      	blx	r6
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	dc06      	bgt.n	8006bda <__sflush_r+0xfe>
 8006bcc:	89a3      	ldrh	r3, [r4, #12]
 8006bce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bd2:	81a3      	strh	r3, [r4, #12]
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	e78e      	b.n	8006af8 <__sflush_r+0x1c>
 8006bda:	4407      	add	r7, r0
 8006bdc:	eba8 0800 	sub.w	r8, r8, r0
 8006be0:	e7e9      	b.n	8006bb6 <__sflush_r+0xda>
 8006be2:	bf00      	nop
 8006be4:	20400001 	.word	0x20400001

08006be8 <_fflush_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	690b      	ldr	r3, [r1, #16]
 8006bec:	4605      	mov	r5, r0
 8006bee:	460c      	mov	r4, r1
 8006bf0:	b913      	cbnz	r3, 8006bf8 <_fflush_r+0x10>
 8006bf2:	2500      	movs	r5, #0
 8006bf4:	4628      	mov	r0, r5
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	b118      	cbz	r0, 8006c02 <_fflush_r+0x1a>
 8006bfa:	6983      	ldr	r3, [r0, #24]
 8006bfc:	b90b      	cbnz	r3, 8006c02 <_fflush_r+0x1a>
 8006bfe:	f7fe fe6f 	bl	80058e0 <__sinit>
 8006c02:	4b14      	ldr	r3, [pc, #80]	; (8006c54 <_fflush_r+0x6c>)
 8006c04:	429c      	cmp	r4, r3
 8006c06:	d11b      	bne.n	8006c40 <_fflush_r+0x58>
 8006c08:	686c      	ldr	r4, [r5, #4]
 8006c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0ef      	beq.n	8006bf2 <_fflush_r+0xa>
 8006c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006c14:	07d0      	lsls	r0, r2, #31
 8006c16:	d404      	bmi.n	8006c22 <_fflush_r+0x3a>
 8006c18:	0599      	lsls	r1, r3, #22
 8006c1a:	d402      	bmi.n	8006c22 <_fflush_r+0x3a>
 8006c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c1e:	f7fe ff02 	bl	8005a26 <__retarget_lock_acquire_recursive>
 8006c22:	4628      	mov	r0, r5
 8006c24:	4621      	mov	r1, r4
 8006c26:	f7ff ff59 	bl	8006adc <__sflush_r>
 8006c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006c2c:	07da      	lsls	r2, r3, #31
 8006c2e:	4605      	mov	r5, r0
 8006c30:	d4e0      	bmi.n	8006bf4 <_fflush_r+0xc>
 8006c32:	89a3      	ldrh	r3, [r4, #12]
 8006c34:	059b      	lsls	r3, r3, #22
 8006c36:	d4dd      	bmi.n	8006bf4 <_fflush_r+0xc>
 8006c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006c3a:	f7fe fef5 	bl	8005a28 <__retarget_lock_release_recursive>
 8006c3e:	e7d9      	b.n	8006bf4 <_fflush_r+0xc>
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <_fflush_r+0x70>)
 8006c42:	429c      	cmp	r4, r3
 8006c44:	d101      	bne.n	8006c4a <_fflush_r+0x62>
 8006c46:	68ac      	ldr	r4, [r5, #8]
 8006c48:	e7df      	b.n	8006c0a <_fflush_r+0x22>
 8006c4a:	4b04      	ldr	r3, [pc, #16]	; (8006c5c <_fflush_r+0x74>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	bf08      	it	eq
 8006c50:	68ec      	ldreq	r4, [r5, #12]
 8006c52:	e7da      	b.n	8006c0a <_fflush_r+0x22>
 8006c54:	0800712c 	.word	0x0800712c
 8006c58:	0800714c 	.word	0x0800714c
 8006c5c:	0800710c 	.word	0x0800710c

08006c60 <fiprintf>:
 8006c60:	b40e      	push	{r1, r2, r3}
 8006c62:	b503      	push	{r0, r1, lr}
 8006c64:	4601      	mov	r1, r0
 8006c66:	ab03      	add	r3, sp, #12
 8006c68:	4805      	ldr	r0, [pc, #20]	; (8006c80 <fiprintf+0x20>)
 8006c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c6e:	6800      	ldr	r0, [r0, #0]
 8006c70:	9301      	str	r3, [sp, #4]
 8006c72:	f7ff fcaf 	bl	80065d4 <_vfiprintf_r>
 8006c76:	b002      	add	sp, #8
 8006c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c7c:	b003      	add	sp, #12
 8006c7e:	4770      	bx	lr
 8006c80:	2000000c 	.word	0x2000000c

08006c84 <_lseek_r>:
 8006c84:	b538      	push	{r3, r4, r5, lr}
 8006c86:	4d07      	ldr	r5, [pc, #28]	; (8006ca4 <_lseek_r+0x20>)
 8006c88:	4604      	mov	r4, r0
 8006c8a:	4608      	mov	r0, r1
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	2200      	movs	r2, #0
 8006c90:	602a      	str	r2, [r5, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f7fa fb36 	bl	8001304 <_lseek>
 8006c98:	1c43      	adds	r3, r0, #1
 8006c9a:	d102      	bne.n	8006ca2 <_lseek_r+0x1e>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	b103      	cbz	r3, 8006ca2 <_lseek_r+0x1e>
 8006ca0:	6023      	str	r3, [r4, #0]
 8006ca2:	bd38      	pop	{r3, r4, r5, pc}
 8006ca4:	2000036c 	.word	0x2000036c

08006ca8 <__swhatbuf_r>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	460e      	mov	r6, r1
 8006cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cb0:	2900      	cmp	r1, #0
 8006cb2:	b096      	sub	sp, #88	; 0x58
 8006cb4:	4614      	mov	r4, r2
 8006cb6:	461d      	mov	r5, r3
 8006cb8:	da07      	bge.n	8006cca <__swhatbuf_r+0x22>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	602b      	str	r3, [r5, #0]
 8006cbe:	89b3      	ldrh	r3, [r6, #12]
 8006cc0:	061a      	lsls	r2, r3, #24
 8006cc2:	d410      	bmi.n	8006ce6 <__swhatbuf_r+0x3e>
 8006cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cc8:	e00e      	b.n	8006ce8 <__swhatbuf_r+0x40>
 8006cca:	466a      	mov	r2, sp
 8006ccc:	f000 f8d4 	bl	8006e78 <_fstat_r>
 8006cd0:	2800      	cmp	r0, #0
 8006cd2:	dbf2      	blt.n	8006cba <__swhatbuf_r+0x12>
 8006cd4:	9a01      	ldr	r2, [sp, #4]
 8006cd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cde:	425a      	negs	r2, r3
 8006ce0:	415a      	adcs	r2, r3
 8006ce2:	602a      	str	r2, [r5, #0]
 8006ce4:	e7ee      	b.n	8006cc4 <__swhatbuf_r+0x1c>
 8006ce6:	2340      	movs	r3, #64	; 0x40
 8006ce8:	2000      	movs	r0, #0
 8006cea:	6023      	str	r3, [r4, #0]
 8006cec:	b016      	add	sp, #88	; 0x58
 8006cee:	bd70      	pop	{r4, r5, r6, pc}

08006cf0 <__smakebuf_r>:
 8006cf0:	898b      	ldrh	r3, [r1, #12]
 8006cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006cf4:	079d      	lsls	r5, r3, #30
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	460c      	mov	r4, r1
 8006cfa:	d507      	bpl.n	8006d0c <__smakebuf_r+0x1c>
 8006cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	6123      	str	r3, [r4, #16]
 8006d04:	2301      	movs	r3, #1
 8006d06:	6163      	str	r3, [r4, #20]
 8006d08:	b002      	add	sp, #8
 8006d0a:	bd70      	pop	{r4, r5, r6, pc}
 8006d0c:	ab01      	add	r3, sp, #4
 8006d0e:	466a      	mov	r2, sp
 8006d10:	f7ff ffca 	bl	8006ca8 <__swhatbuf_r>
 8006d14:	9900      	ldr	r1, [sp, #0]
 8006d16:	4605      	mov	r5, r0
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7ff fa7b 	bl	8006214 <_malloc_r>
 8006d1e:	b948      	cbnz	r0, 8006d34 <__smakebuf_r+0x44>
 8006d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d24:	059a      	lsls	r2, r3, #22
 8006d26:	d4ef      	bmi.n	8006d08 <__smakebuf_r+0x18>
 8006d28:	f023 0303 	bic.w	r3, r3, #3
 8006d2c:	f043 0302 	orr.w	r3, r3, #2
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	e7e3      	b.n	8006cfc <__smakebuf_r+0xc>
 8006d34:	4b0d      	ldr	r3, [pc, #52]	; (8006d6c <__smakebuf_r+0x7c>)
 8006d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d38:	89a3      	ldrh	r3, [r4, #12]
 8006d3a:	6020      	str	r0, [r4, #0]
 8006d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d40:	81a3      	strh	r3, [r4, #12]
 8006d42:	9b00      	ldr	r3, [sp, #0]
 8006d44:	6163      	str	r3, [r4, #20]
 8006d46:	9b01      	ldr	r3, [sp, #4]
 8006d48:	6120      	str	r0, [r4, #16]
 8006d4a:	b15b      	cbz	r3, 8006d64 <__smakebuf_r+0x74>
 8006d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d50:	4630      	mov	r0, r6
 8006d52:	f000 f8a3 	bl	8006e9c <_isatty_r>
 8006d56:	b128      	cbz	r0, 8006d64 <__smakebuf_r+0x74>
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	f023 0303 	bic.w	r3, r3, #3
 8006d5e:	f043 0301 	orr.w	r3, r3, #1
 8006d62:	81a3      	strh	r3, [r4, #12]
 8006d64:	89a0      	ldrh	r0, [r4, #12]
 8006d66:	4305      	orrs	r5, r0
 8006d68:	81a5      	strh	r5, [r4, #12]
 8006d6a:	e7cd      	b.n	8006d08 <__smakebuf_r+0x18>
 8006d6c:	08005879 	.word	0x08005879

08006d70 <__ascii_mbtowc>:
 8006d70:	b082      	sub	sp, #8
 8006d72:	b901      	cbnz	r1, 8006d76 <__ascii_mbtowc+0x6>
 8006d74:	a901      	add	r1, sp, #4
 8006d76:	b142      	cbz	r2, 8006d8a <__ascii_mbtowc+0x1a>
 8006d78:	b14b      	cbz	r3, 8006d8e <__ascii_mbtowc+0x1e>
 8006d7a:	7813      	ldrb	r3, [r2, #0]
 8006d7c:	600b      	str	r3, [r1, #0]
 8006d7e:	7812      	ldrb	r2, [r2, #0]
 8006d80:	1e10      	subs	r0, r2, #0
 8006d82:	bf18      	it	ne
 8006d84:	2001      	movne	r0, #1
 8006d86:	b002      	add	sp, #8
 8006d88:	4770      	bx	lr
 8006d8a:	4610      	mov	r0, r2
 8006d8c:	e7fb      	b.n	8006d86 <__ascii_mbtowc+0x16>
 8006d8e:	f06f 0001 	mvn.w	r0, #1
 8006d92:	e7f8      	b.n	8006d86 <__ascii_mbtowc+0x16>

08006d94 <memmove>:
 8006d94:	4288      	cmp	r0, r1
 8006d96:	b510      	push	{r4, lr}
 8006d98:	eb01 0402 	add.w	r4, r1, r2
 8006d9c:	d902      	bls.n	8006da4 <memmove+0x10>
 8006d9e:	4284      	cmp	r4, r0
 8006da0:	4623      	mov	r3, r4
 8006da2:	d807      	bhi.n	8006db4 <memmove+0x20>
 8006da4:	1e43      	subs	r3, r0, #1
 8006da6:	42a1      	cmp	r1, r4
 8006da8:	d008      	beq.n	8006dbc <memmove+0x28>
 8006daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db2:	e7f8      	b.n	8006da6 <memmove+0x12>
 8006db4:	4402      	add	r2, r0
 8006db6:	4601      	mov	r1, r0
 8006db8:	428a      	cmp	r2, r1
 8006dba:	d100      	bne.n	8006dbe <memmove+0x2a>
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dc6:	e7f7      	b.n	8006db8 <memmove+0x24>

08006dc8 <__malloc_lock>:
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <__malloc_lock+0x8>)
 8006dca:	f7fe be2c 	b.w	8005a26 <__retarget_lock_acquire_recursive>
 8006dce:	bf00      	nop
 8006dd0:	20000364 	.word	0x20000364

08006dd4 <__malloc_unlock>:
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <__malloc_unlock+0x8>)
 8006dd6:	f7fe be27 	b.w	8005a28 <__retarget_lock_release_recursive>
 8006dda:	bf00      	nop
 8006ddc:	20000364 	.word	0x20000364

08006de0 <_realloc_r>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	4607      	mov	r7, r0
 8006de4:	4614      	mov	r4, r2
 8006de6:	460e      	mov	r6, r1
 8006de8:	b921      	cbnz	r1, 8006df4 <_realloc_r+0x14>
 8006dea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006dee:	4611      	mov	r1, r2
 8006df0:	f7ff ba10 	b.w	8006214 <_malloc_r>
 8006df4:	b922      	cbnz	r2, 8006e00 <_realloc_r+0x20>
 8006df6:	f7ff f9bd 	bl	8006174 <_free_r>
 8006dfa:	4625      	mov	r5, r4
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e00:	f000 f85c 	bl	8006ebc <_malloc_usable_size_r>
 8006e04:	42a0      	cmp	r0, r4
 8006e06:	d20f      	bcs.n	8006e28 <_realloc_r+0x48>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4638      	mov	r0, r7
 8006e0c:	f7ff fa02 	bl	8006214 <_malloc_r>
 8006e10:	4605      	mov	r5, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d0f2      	beq.n	8006dfc <_realloc_r+0x1c>
 8006e16:	4631      	mov	r1, r6
 8006e18:	4622      	mov	r2, r4
 8006e1a:	f7fe fe0f 	bl	8005a3c <memcpy>
 8006e1e:	4631      	mov	r1, r6
 8006e20:	4638      	mov	r0, r7
 8006e22:	f7ff f9a7 	bl	8006174 <_free_r>
 8006e26:	e7e9      	b.n	8006dfc <_realloc_r+0x1c>
 8006e28:	4635      	mov	r5, r6
 8006e2a:	e7e7      	b.n	8006dfc <_realloc_r+0x1c>

08006e2c <_read_r>:
 8006e2c:	b538      	push	{r3, r4, r5, lr}
 8006e2e:	4d07      	ldr	r5, [pc, #28]	; (8006e4c <_read_r+0x20>)
 8006e30:	4604      	mov	r4, r0
 8006e32:	4608      	mov	r0, r1
 8006e34:	4611      	mov	r1, r2
 8006e36:	2200      	movs	r2, #0
 8006e38:	602a      	str	r2, [r5, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f7fa fa02 	bl	8001244 <_read>
 8006e40:	1c43      	adds	r3, r0, #1
 8006e42:	d102      	bne.n	8006e4a <_read_r+0x1e>
 8006e44:	682b      	ldr	r3, [r5, #0]
 8006e46:	b103      	cbz	r3, 8006e4a <_read_r+0x1e>
 8006e48:	6023      	str	r3, [r4, #0]
 8006e4a:	bd38      	pop	{r3, r4, r5, pc}
 8006e4c:	2000036c 	.word	0x2000036c

08006e50 <__ascii_wctomb>:
 8006e50:	b149      	cbz	r1, 8006e66 <__ascii_wctomb+0x16>
 8006e52:	2aff      	cmp	r2, #255	; 0xff
 8006e54:	bf85      	ittet	hi
 8006e56:	238a      	movhi	r3, #138	; 0x8a
 8006e58:	6003      	strhi	r3, [r0, #0]
 8006e5a:	700a      	strbls	r2, [r1, #0]
 8006e5c:	f04f 30ff 	movhi.w	r0, #4294967295
 8006e60:	bf98      	it	ls
 8006e62:	2001      	movls	r0, #1
 8006e64:	4770      	bx	lr
 8006e66:	4608      	mov	r0, r1
 8006e68:	4770      	bx	lr

08006e6a <abort>:
 8006e6a:	b508      	push	{r3, lr}
 8006e6c:	2006      	movs	r0, #6
 8006e6e:	f000 f855 	bl	8006f1c <raise>
 8006e72:	2001      	movs	r0, #1
 8006e74:	f7fa f9dc 	bl	8001230 <_exit>

08006e78 <_fstat_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4d07      	ldr	r5, [pc, #28]	; (8006e98 <_fstat_r+0x20>)
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	4604      	mov	r4, r0
 8006e80:	4608      	mov	r0, r1
 8006e82:	4611      	mov	r1, r2
 8006e84:	602b      	str	r3, [r5, #0]
 8006e86:	f7fa fa22 	bl	80012ce <_fstat>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d102      	bne.n	8006e94 <_fstat_r+0x1c>
 8006e8e:	682b      	ldr	r3, [r5, #0]
 8006e90:	b103      	cbz	r3, 8006e94 <_fstat_r+0x1c>
 8006e92:	6023      	str	r3, [r4, #0]
 8006e94:	bd38      	pop	{r3, r4, r5, pc}
 8006e96:	bf00      	nop
 8006e98:	2000036c 	.word	0x2000036c

08006e9c <_isatty_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	4d06      	ldr	r5, [pc, #24]	; (8006eb8 <_isatty_r+0x1c>)
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fa fa21 	bl	80012ee <_isatty>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_isatty_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_isatty_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	2000036c 	.word	0x2000036c

08006ebc <_malloc_usable_size_r>:
 8006ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ec0:	1f18      	subs	r0, r3, #4
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	bfbc      	itt	lt
 8006ec6:	580b      	ldrlt	r3, [r1, r0]
 8006ec8:	18c0      	addlt	r0, r0, r3
 8006eca:	4770      	bx	lr

08006ecc <_raise_r>:
 8006ecc:	291f      	cmp	r1, #31
 8006ece:	b538      	push	{r3, r4, r5, lr}
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
 8006ed4:	d904      	bls.n	8006ee0 <_raise_r+0x14>
 8006ed6:	2316      	movs	r3, #22
 8006ed8:	6003      	str	r3, [r0, #0]
 8006eda:	f04f 30ff 	mov.w	r0, #4294967295
 8006ede:	bd38      	pop	{r3, r4, r5, pc}
 8006ee0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ee2:	b112      	cbz	r2, 8006eea <_raise_r+0x1e>
 8006ee4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ee8:	b94b      	cbnz	r3, 8006efe <_raise_r+0x32>
 8006eea:	4620      	mov	r0, r4
 8006eec:	f000 f830 	bl	8006f50 <_getpid_r>
 8006ef0:	462a      	mov	r2, r5
 8006ef2:	4601      	mov	r1, r0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006efa:	f000 b817 	b.w	8006f2c <_kill_r>
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d00a      	beq.n	8006f18 <_raise_r+0x4c>
 8006f02:	1c59      	adds	r1, r3, #1
 8006f04:	d103      	bne.n	8006f0e <_raise_r+0x42>
 8006f06:	2316      	movs	r3, #22
 8006f08:	6003      	str	r3, [r0, #0]
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	e7e7      	b.n	8006ede <_raise_r+0x12>
 8006f0e:	2400      	movs	r4, #0
 8006f10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006f14:	4628      	mov	r0, r5
 8006f16:	4798      	blx	r3
 8006f18:	2000      	movs	r0, #0
 8006f1a:	e7e0      	b.n	8006ede <_raise_r+0x12>

08006f1c <raise>:
 8006f1c:	4b02      	ldr	r3, [pc, #8]	; (8006f28 <raise+0xc>)
 8006f1e:	4601      	mov	r1, r0
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	f7ff bfd3 	b.w	8006ecc <_raise_r>
 8006f26:	bf00      	nop
 8006f28:	2000000c 	.word	0x2000000c

08006f2c <_kill_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	; (8006f4c <_kill_r+0x20>)
 8006f30:	2300      	movs	r3, #0
 8006f32:	4604      	mov	r4, r0
 8006f34:	4608      	mov	r0, r1
 8006f36:	4611      	mov	r1, r2
 8006f38:	602b      	str	r3, [r5, #0]
 8006f3a:	f7fa f969 	bl	8001210 <_kill>
 8006f3e:	1c43      	adds	r3, r0, #1
 8006f40:	d102      	bne.n	8006f48 <_kill_r+0x1c>
 8006f42:	682b      	ldr	r3, [r5, #0]
 8006f44:	b103      	cbz	r3, 8006f48 <_kill_r+0x1c>
 8006f46:	6023      	str	r3, [r4, #0]
 8006f48:	bd38      	pop	{r3, r4, r5, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2000036c 	.word	0x2000036c

08006f50 <_getpid_r>:
 8006f50:	f7fa b956 	b.w	8001200 <_getpid>

08006f54 <_init>:
 8006f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f56:	bf00      	nop
 8006f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5a:	bc08      	pop	{r3}
 8006f5c:	469e      	mov	lr, r3
 8006f5e:	4770      	bx	lr

08006f60 <_fini>:
 8006f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f62:	bf00      	nop
 8006f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f66:	bc08      	pop	{r3}
 8006f68:	469e      	mov	lr, r3
 8006f6a:	4770      	bx	lr
