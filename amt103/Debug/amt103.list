
amt103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c94  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08006e38  08006e38  00016e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072c4  080072c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080072c4  080072c4  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072c4  080072c4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072c4  080072c4  000172c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072c8  080072c8  000172c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080072cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00000190  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000036c  2000036c  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010297  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eca  00000000  00000000  000304a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  00032370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000be8  00000000  00000000  00033010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218af  00000000  00000000  00033bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fb78  00000000  00000000  000554a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb674  00000000  00000000  0006501f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00130693  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046f8  00000000  00000000  001306e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006e1c 	.word	0x08006e1c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08006e1c 	.word	0x08006e1c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bba:	b095      	sub	sp, #84	; 0x54
 8000bbc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bbe:	f000 fbd3 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc2:	f000 f881 	bl	8000cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc6:	f000 f98d 	bl	8000ee4 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000bca:	f000 f8d5 	bl	8000d78 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000bce:	f000 f929 	bl	8000e24 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000bd2:	f000 f957 	bl	8000e84 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000bd6:	213c      	movs	r1, #60	; 0x3c
 8000bd8:	4834      	ldr	r0, [pc, #208]	; (8000cac <main+0xf4>)
 8000bda:	f002 facf 	bl	800317c <HAL_TIM_Encoder_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t quad_enc_value = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t quad_enc_raw_last = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  uint16_t quad_enc_raw_now = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  float current_angle = 0;
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  float quad_cpr = 8192.0;
 8000bf6:	f04f 438c 	mov.w	r3, #1174405120	; 0x46000000
 8000bfa:	63bb      	str	r3, [r7, #56]	; 0x38
	   * PB9 is J I2C SDA
	   * Datasheet: https://www.cuidevices.com/product/resource/amt10.pdf
	   * Device is AMT103 2048 N4000.
	   *
	   */
		quad_enc_raw_now = TIM3->CNT;
 8000bfc:	4b2c      	ldr	r3, [pc, #176]	; (8000cb0 <main+0xf8>)
 8000bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		quad_enc_value = (int16_t)(quad_enc_raw_now - quad_enc_raw_last) + quad_enc_value;
 8000c04:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8000c08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c14:	4413      	add	r3, r2
 8000c16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		quad_enc_raw_last = quad_enc_raw_now;
 8000c1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000c1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

//		current_angle = (((float)(quad_enc_value % 4096)) / 4096 * 360);
		current_angle = (((float)(quad_enc_value)) / 4096 * 360);
 8000c22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000c26:	ee07 3a90 	vmov	s15, r3
 8000c2a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c2e:	eddf 6a21 	vldr	s13, [pc, #132]	; 8000cb4 <main+0xfc>
 8000c32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c36:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000cb8 <main+0x100>
 8000c3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		printf("Quad val: %u, quad now: %u, quad last: %u, current_angle: %f \r\n", quad_enc_value, quad_enc_raw_now, quad_enc_raw_last, current_angle);
 8000c42:	f8b7 4046 	ldrh.w	r4, [r7, #70]	; 0x46
 8000c46:	f8b7 5042 	ldrh.w	r5, [r7, #66]	; 0x42
 8000c4a:	f8b7 6044 	ldrh.w	r6, [r7, #68]	; 0x44
 8000c4e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000c50:	f7ff fc82 	bl	8000558 <__aeabi_f2d>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	e9cd 2300 	strd	r2, r3, [sp]
 8000c5c:	4633      	mov	r3, r6
 8000c5e:	462a      	mov	r2, r5
 8000c60:	4621      	mov	r1, r4
 8000c62:	4816      	ldr	r0, [pc, #88]	; (8000cbc <main+0x104>)
 8000c64:	f003 fe96 	bl	8004994 <iprintf>

		char string[50] = "";
 8000c68:	2300      	movs	r3, #0
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	f107 0308 	add.w	r3, r7, #8
 8000c70:	222e      	movs	r2, #46	; 0x2e
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f003 fa1b 	bl	80040b0 <memset>

		sprintf((char *)string, "Quad val is %u, quad now is %u, quad last is%u,\r\n", quad_enc_value, quad_enc_raw_now, quad_enc_raw_last);
 8000c7a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000c7e:	f8b7 1042 	ldrh.w	r1, [r7, #66]	; 0x42
 8000c82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8000c86:	1d38      	adds	r0, r7, #4
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	490c      	ldr	r1, [pc, #48]	; (8000cc0 <main+0x108>)
 8000c8e:	f003 fe99 	bl	80049c4 <siprintf>
		HAL_Delay(100);
 8000c92:	2064      	movs	r0, #100	; 0x64
 8000c94:	f000 fbce 	bl	8001434 <HAL_Delay>
		HAL_UART_Transmit_IT(&huart1, (uint8_t *)string, sizeof(string));
 8000c98:	1d3b      	adds	r3, r7, #4
 8000c9a:	2232      	movs	r2, #50	; 0x32
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <main+0x10c>)
 8000ca0:	f002 fd2c 	bl	80036fc <HAL_UART_Transmit_IT>
		HAL_Delay(15);
 8000ca4:	200f      	movs	r0, #15
 8000ca6:	f000 fbc5 	bl	8001434 <HAL_Delay>
  {
 8000caa:	e7a7      	b.n	8000bfc <main+0x44>
 8000cac:	20000204 	.word	0x20000204
 8000cb0:	40000400 	.word	0x40000400
 8000cb4:	45800000 	.word	0x45800000
 8000cb8:	43b40000 	.word	0x43b40000
 8000cbc:	08006e38 	.word	0x08006e38
 8000cc0:	08006e78 	.word	0x08006e78
 8000cc4:	20000250 	.word	0x20000250

08000cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0a6      	sub	sp, #152	; 0x98
 8000ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000cd2:	2228      	movs	r2, #40	; 0x28
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 f9ea 	bl	80040b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cdc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2258      	movs	r2, #88	; 0x58
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 f9dc 	bl	80040b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d00:	2310      	movs	r3, #16
 8000d02:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000d10:	4618      	mov	r0, r3
 8000d12:	f000 fe23 	bl	800195c <HAL_RCC_OscConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000d1c:	f000 f918 	bl	8000f50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d20:	230f      	movs	r3, #15
 8000d22:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d24:	2300      	movs	r3, #0
 8000d26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d30:	2300      	movs	r3, #0
 8000d32:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d34:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fd24 	bl	8002788 <HAL_RCC_ClockConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d46:	f000 f903 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <SystemClock_Config+0xac>)
 8000d4c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 ff49 	bl	8002bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000d68:	f000 f8f2 	bl	8000f50 <Error_Handler>
  }
}
 8000d6c:	bf00      	nop
 8000d6e:	3798      	adds	r7, #152	; 0x98
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	00200003 	.word	0x00200003

08000d78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08c      	sub	sp, #48	; 0x30
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2224      	movs	r2, #36	; 0x24
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 f992 	bl	80040b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d96:	4b21      	ldr	r3, [pc, #132]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000d98:	4a21      	ldr	r2, [pc, #132]	; (8000e20 <MX_TIM3_Init+0xa8>)
 8000d9a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da2:	4b1e      	ldr	r3, [pc, #120]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = QUADRATURE_FILTER;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = QUADRATURE_FILTER;
 8000ddc:	2308      	movs	r3, #8
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4619      	mov	r1, r3
 8000de6:	480d      	ldr	r0, [pc, #52]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000de8:	f002 f922 	bl	8003030 <HAL_TIM_Encoder_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000df2:	f000 f8ad 	bl	8000f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df6:	2300      	movs	r3, #0
 8000df8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dfe:	463b      	mov	r3, r7
 8000e00:	4619      	mov	r1, r3
 8000e02:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MX_TIM3_Init+0xa4>)
 8000e04:	f002 fb0c 	bl	8003420 <HAL_TIMEx_MasterConfigSynchronization>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000e0e:	f000 f89f 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	3730      	adds	r7, #48	; 0x30
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000204 	.word	0x20000204
 8000e20:	40000400 	.word	0x40000400

08000e24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e2a:	4a15      	ldr	r2, [pc, #84]	; (8000e80 <MX_USART1_UART_Init+0x5c>)
 8000e2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000e34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e48:	4b0c      	ldr	r3, [pc, #48]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e54:	4b09      	ldr	r3, [pc, #36]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e5a:	4b08      	ldr	r3, [pc, #32]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_USART1_UART_Init+0x58>)
 8000e68:	f002 fb66 	bl	8003538 <HAL_UART_Init>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e72:	f000 f86d 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000250 	.word	0x20000250
 8000e80:	40013800 	.word	0x40013800

08000e84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e8a:	4a15      	ldr	r2, [pc, #84]	; (8000ee0 <MX_USART2_UART_Init+0x5c>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	; (8000edc <MX_USART2_UART_Init+0x58>)
 8000ec8:	f002 fb36 	bl	8003538 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ed2:	f000 f83d 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200002d4 	.word	0x200002d4
 8000ee0:	40004400 	.word	0x40004400

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <MX_GPIO_Init+0x44>)
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	4a0e      	ldr	r2, [pc, #56]	; (8000f28 <MX_GPIO_Init+0x44>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6153      	str	r3, [r2, #20]
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <MX_GPIO_Init+0x44>)
 8000ef8:	695b      	ldr	r3, [r3, #20]
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <MX_GPIO_Init+0x44>)
 8000f04:	695b      	ldr	r3, [r3, #20]
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <MX_GPIO_Init+0x44>)
 8000f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f0c:	6153      	str	r3, [r2, #20]
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <MX_GPIO_Init+0x44>)
 8000f10:	695b      	ldr	r3, [r3, #20]
 8000f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	40021000 	.word	0x40021000

08000f2c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f34:	1d39      	adds	r1, r7, #4
 8000f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4803      	ldr	r0, [pc, #12]	; (8000f4c <__io_putchar+0x20>)
 8000f3e:	f002 fb49 	bl	80035d4 <HAL_UART_Transmit>
  return ch;
 8000f42:	687b      	ldr	r3, [r7, #4]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200002d4 	.word	0x200002d4

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0f      	ldr	r3, [pc, #60]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	4a0e      	ldr	r2, [pc, #56]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f68:	f043 0301 	orr.w	r3, r3, #1
 8000f6c:	6193      	str	r3, [r2, #24]
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f70:	699b      	ldr	r3, [r3, #24]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a08      	ldr	r2, [pc, #32]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	61d3      	str	r3, [r2, #28]
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <HAL_MspInit+0x44>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	40021000 	.word	0x40021000

08000fa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <HAL_TIM_Encoder_MspInit+0x7c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d128      	bne.n	8001018 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	4a16      	ldr	r2, [pc, #88]	; (8001024 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fcc:	f043 0302 	orr.w	r3, r3, #2
 8000fd0:	61d3      	str	r3, [r2, #28]
 8000fd2:	4b14      	ldr	r3, [pc, #80]	; (8001024 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fd4:	69db      	ldr	r3, [r3, #28]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	613b      	str	r3, [r7, #16]
 8000fdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fde:	4b11      	ldr	r3, [pc, #68]	; (8001024 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	4a10      	ldr	r2, [pc, #64]	; (8001024 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	6153      	str	r3, [r2, #20]
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <HAL_TIM_Encoder_MspInit+0x80>)
 8000fec:	695b      	ldr	r3, [r3, #20]
 8000fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000ff6:	2350      	movs	r3, #80	; 0x50
 8000ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001006:	2302      	movs	r3, #2
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001014:	f000 fb18 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	; 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40000400 	.word	0x40000400
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08c      	sub	sp, #48	; 0x30
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a2e      	ldr	r2, [pc, #184]	; (8001100 <HAL_UART_MspInit+0xd8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d128      	bne.n	800109c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <HAL_UART_MspInit+0xdc>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <HAL_UART_MspInit+0xdc>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6193      	str	r3, [r2, #24]
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <HAL_UART_MspInit+0xdc>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <HAL_UART_MspInit+0xdc>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a27      	ldr	r2, [pc, #156]	; (8001104 <HAL_UART_MspInit+0xdc>)
 8001068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800106c:	6153      	str	r3, [r2, #20]
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <HAL_UART_MspInit+0xdc>)
 8001070:	695b      	ldr	r3, [r3, #20]
 8001072:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800107a:	2330      	movs	r3, #48	; 0x30
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800108a:	2307      	movs	r3, #7
 800108c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 031c 	add.w	r3, r7, #28
 8001092:	4619      	mov	r1, r3
 8001094:	481c      	ldr	r0, [pc, #112]	; (8001108 <HAL_UART_MspInit+0xe0>)
 8001096:	f000 fad7 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800109a:	e02d      	b.n	80010f8 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART2)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1a      	ldr	r2, [pc, #104]	; (800110c <HAL_UART_MspInit+0xe4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d128      	bne.n	80010f8 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <HAL_UART_MspInit+0xdc>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	4a16      	ldr	r2, [pc, #88]	; (8001104 <HAL_UART_MspInit+0xdc>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	61d3      	str	r3, [r2, #28]
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_UART_MspInit+0xdc>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <HAL_UART_MspInit+0xdc>)
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	4a10      	ldr	r2, [pc, #64]	; (8001104 <HAL_UART_MspInit+0xdc>)
 80010c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c8:	6153      	str	r3, [r2, #20]
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <HAL_UART_MspInit+0xdc>)
 80010cc:	695b      	ldr	r3, [r3, #20]
 80010ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010d6:	230c      	movs	r3, #12
 80010d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010da:	2302      	movs	r3, #2
 80010dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010e2:	2303      	movs	r3, #3
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e6:	2307      	movs	r3, #7
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ea:	f107 031c 	add.w	r3, r7, #28
 80010ee:	4619      	mov	r1, r3
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f000 faa8 	bl	8001648 <HAL_GPIO_Init>
}
 80010f8:	bf00      	nop
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40013800 	.word	0x40013800
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800
 800110c:	40004400 	.word	0x40004400

08001110 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <NMI_Handler+0x4>

08001116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <HardFault_Handler+0x4>

0800111c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <MemManage_Handler+0x4>

08001122 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001126:	e7fe      	b.n	8001126 <BusFault_Handler+0x4>

08001128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800112c:	e7fe      	b.n	800112c <UsageFault_Handler+0x4>

0800112e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800115c:	f000 f94a 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
	return 1;
 8001168:	2301      	movs	r3, #1
}
 800116a:	4618      	mov	r0, r3
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_kill>:

int _kill(int pid, int sig)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800117e:	f002 ff6d 	bl	800405c <__errno>
 8001182:	4603      	mov	r3, r0
 8001184:	2216      	movs	r2, #22
 8001186:	601a      	str	r2, [r3, #0]
	return -1;
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_exit>:

void _exit (int status)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ffe7 	bl	8001174 <_kill>
	while (1) {}		/* Make sure we hang here */
 80011a6:	e7fe      	b.n	80011a6 <_exit+0x12>

080011a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
 80011b8:	e00a      	b.n	80011d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80011ba:	f3af 8000 	nop.w
 80011be:	4601      	mov	r1, r0
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	1c5a      	adds	r2, r3, #1
 80011c4:	60ba      	str	r2, [r7, #8]
 80011c6:	b2ca      	uxtb	r2, r1
 80011c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	3301      	adds	r3, #1
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dbf0      	blt.n	80011ba <_read+0x12>
	}

return len;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3718      	adds	r7, #24
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	e009      	b.n	8001208 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	1c5a      	adds	r2, r3, #1
 80011f8:	60ba      	str	r2, [r7, #8]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fe95 	bl	8000f2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	3301      	adds	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	429a      	cmp	r2, r3
 800120e:	dbf1      	blt.n	80011f4 <_write+0x12>
	}
	return len;
 8001210:	687b      	ldr	r3, [r7, #4]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <_close>:

int _close(int file)
{
 800121a:	b480      	push	{r7}
 800121c:	b083      	sub	sp, #12
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
	return -1;
 8001222:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001226:	4618      	mov	r0, r3
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr

08001232 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
 800123a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001242:	605a      	str	r2, [r3, #4]
	return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <_isatty>:

int _isatty(int file)
{
 8001252:	b480      	push	{r7}
 8001254:	b083      	sub	sp, #12
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
	return 1;
 800125a:	2301      	movs	r3, #1
}
 800125c:	4618      	mov	r0, r3
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
	return 0;
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
	...

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f002 fed2 	bl	800405c <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20010000 	.word	0x20010000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	200001f8 	.word	0x200001f8
 80012ec:	20000370 	.word	0x20000370

080012f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800134c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <LoopForever+0x6>)
  ldr r1, =_edata
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <LoopForever+0xa>)
  ldr r2, =_sidata
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <LoopForever+0xe>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001330:	4c0b      	ldr	r4, [pc, #44]	; (8001360 <LoopForever+0x16>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800133e:	f7ff ffd7 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f002 fe91 	bl	8004068 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001346:	f7ff fc37 	bl	8000bb8 <main>

0800134a <LoopForever>:

LoopForever:
    b LoopForever
 800134a:	e7fe      	b.n	800134a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800134c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001358:	080072cc 	.word	0x080072cc
  ldr r2, =_sbss
 800135c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001360:	2000036c 	.word	0x2000036c

08001364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_2_IRQHandler>
	...

08001368 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x28>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x28>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 f931 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fdea 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 f93b 	bl	800162e <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 f911 	bl	80015f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000008 	.word	0x20000008
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_IncTick+0x20>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <HAL_IncTick+0x24>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a04      	ldr	r2, [pc, #16]	; (8001418 <HAL_IncTick+0x24>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000008 	.word	0x20000008
 8001418:	20000358 	.word	0x20000358

0800141c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001420:	4b03      	ldr	r3, [pc, #12]	; (8001430 <HAL_GetTick+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	20000358 	.word	0x20000358

08001434 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800143c:	f7ff ffee 	bl	800141c <HAL_GetTick>
 8001440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d005      	beq.n	800145a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800144e:	4b0a      	ldr	r3, [pc, #40]	; (8001478 <HAL_Delay+0x44>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800145a:	bf00      	nop
 800145c:	f7ff ffde 	bl	800141c <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	68fa      	ldr	r2, [r7, #12]
 8001468:	429a      	cmp	r2, r3
 800146a:	d8f7      	bhi.n	800145c <HAL_Delay+0x28>
  {
  }
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000008 	.word	0x20000008

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0112      	lsls	r2, r2, #4
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0112      	lsls	r2, r2, #4
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b04      	cmp	r3, #4
 8001550:	bf28      	it	cs
 8001552:	2304      	movcs	r3, #4
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3304      	adds	r3, #4
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b03      	subs	r3, #3
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	210f      	movs	r1, #15
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff47 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001608:	f7ff ff5c 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 800160c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	68b9      	ldr	r1, [r7, #8]
 8001612:	6978      	ldr	r0, [r7, #20]
 8001614:	f7ff ff8e 	bl	8001534 <NVIC_EncodePriority>
 8001618:	4602      	mov	r2, r0
 800161a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161e:	4611      	mov	r1, r2
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff5d 	bl	80014e0 <__NVIC_SetPriority>
}
 8001626:	bf00      	nop
 8001628:	3718      	adds	r7, #24
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffb0 	bl	800159c <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b087      	sub	sp, #28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001656:	e160      	b.n	800191a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	2101      	movs	r1, #1
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	fa01 f303 	lsl.w	r3, r1, r3
 8001664:	4013      	ands	r3, r2
 8001666:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	f000 8152 	beq.w	8001914 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b01      	cmp	r3, #1
 800167a:	d005      	beq.n	8001688 <HAL_GPIO_Init+0x40>
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	2b02      	cmp	r3, #2
 8001686:	d130      	bne.n	80016ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	2203      	movs	r2, #3
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	43db      	mvns	r3, r3
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	693a      	ldr	r2, [r7, #16]
 80016b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016be:	2201      	movs	r2, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	091b      	lsrs	r3, r3, #4
 80016d4:	f003 0201 	and.w	r2, r3, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b03      	cmp	r3, #3
 80016f4:	d017      	beq.n	8001726 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	2203      	movs	r2, #3
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43db      	mvns	r3, r3
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	4013      	ands	r3, r2
 800170c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	689a      	ldr	r2, [r3, #8]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d123      	bne.n	800177a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	08da      	lsrs	r2, r3, #3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	3208      	adds	r2, #8
 800173a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800173e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	220f      	movs	r2, #15
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	f003 0307 	and.w	r3, r3, #7
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	08da      	lsrs	r2, r3, #3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3208      	adds	r2, #8
 8001774:	6939      	ldr	r1, [r7, #16]
 8001776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	2203      	movs	r2, #3
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43db      	mvns	r3, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0203 	and.w	r2, r3, #3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80ac 	beq.w	8001914 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017bc:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a5d      	ldr	r2, [pc, #372]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b5b      	ldr	r3, [pc, #364]	; (8001938 <HAL_GPIO_Init+0x2f0>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0301 	and.w	r3, r3, #1
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017d4:	4a59      	ldr	r2, [pc, #356]	; (800193c <HAL_GPIO_Init+0x2f4>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	220f      	movs	r2, #15
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	43db      	mvns	r3, r3
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017fe:	d025      	beq.n	800184c <HAL_GPIO_Init+0x204>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4a4f      	ldr	r2, [pc, #316]	; (8001940 <HAL_GPIO_Init+0x2f8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d01f      	beq.n	8001848 <HAL_GPIO_Init+0x200>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	4a4e      	ldr	r2, [pc, #312]	; (8001944 <HAL_GPIO_Init+0x2fc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d019      	beq.n	8001844 <HAL_GPIO_Init+0x1fc>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4a4d      	ldr	r2, [pc, #308]	; (8001948 <HAL_GPIO_Init+0x300>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d013      	beq.n	8001840 <HAL_GPIO_Init+0x1f8>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_GPIO_Init+0x304>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d00d      	beq.n	800183c <HAL_GPIO_Init+0x1f4>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4b      	ldr	r2, [pc, #300]	; (8001950 <HAL_GPIO_Init+0x308>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d007      	beq.n	8001838 <HAL_GPIO_Init+0x1f0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <HAL_GPIO_Init+0x30c>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d101      	bne.n	8001834 <HAL_GPIO_Init+0x1ec>
 8001830:	2306      	movs	r3, #6
 8001832:	e00c      	b.n	800184e <HAL_GPIO_Init+0x206>
 8001834:	2307      	movs	r3, #7
 8001836:	e00a      	b.n	800184e <HAL_GPIO_Init+0x206>
 8001838:	2305      	movs	r3, #5
 800183a:	e008      	b.n	800184e <HAL_GPIO_Init+0x206>
 800183c:	2304      	movs	r3, #4
 800183e:	e006      	b.n	800184e <HAL_GPIO_Init+0x206>
 8001840:	2303      	movs	r3, #3
 8001842:	e004      	b.n	800184e <HAL_GPIO_Init+0x206>
 8001844:	2302      	movs	r3, #2
 8001846:	e002      	b.n	800184e <HAL_GPIO_Init+0x206>
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_GPIO_Init+0x206>
 800184c:	2300      	movs	r3, #0
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	f002 0203 	and.w	r2, r2, #3
 8001854:	0092      	lsls	r2, r2, #2
 8001856:	4093      	lsls	r3, r2
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800185e:	4937      	ldr	r1, [pc, #220]	; (800193c <HAL_GPIO_Init+0x2f4>)
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	089b      	lsrs	r3, r3, #2
 8001864:	3302      	adds	r3, #2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_GPIO_Init+0x310>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	43db      	mvns	r3, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001890:	4a31      	ldr	r2, [pc, #196]	; (8001958 <HAL_GPIO_Init+0x310>)
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001896:	4b30      	ldr	r3, [pc, #192]	; (8001958 <HAL_GPIO_Init+0x310>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018ba:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_GPIO_Init+0x310>)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018c0:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_GPIO_Init+0x310>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	43db      	mvns	r3, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4013      	ands	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d003      	beq.n	80018e4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80018e4:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <HAL_GPIO_Init+0x310>)
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ea:	4b1b      	ldr	r3, [pc, #108]	; (8001958 <HAL_GPIO_Init+0x310>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	43db      	mvns	r3, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4013      	ands	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4313      	orrs	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <HAL_GPIO_Init+0x310>)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	fa22 f303 	lsr.w	r3, r2, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	f47f ae97 	bne.w	8001658 <HAL_GPIO_Init+0x10>
  }
}
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	40021000 	.word	0x40021000
 800193c:	40010000 	.word	0x40010000
 8001940:	48000400 	.word	0x48000400
 8001944:	48000800 	.word	0x48000800
 8001948:	48000c00 	.word	0x48000c00
 800194c:	48001000 	.word	0x48001000
 8001950:	48001400 	.word	0x48001400
 8001954:	48001800 	.word	0x48001800
 8001958:	40010400 	.word	0x40010400

0800195c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001962:	af00      	add	r7, sp, #0
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001968:	1d3b      	adds	r3, r7, #4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d102      	bne.n	8001976 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	f000 bf01 	b.w	8002778 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001976:	1d3b      	adds	r3, r7, #4
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8160 	beq.w	8001c46 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001986:	4bae      	ldr	r3, [pc, #696]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001992:	4bab      	ldr	r3, [pc, #684]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d159      	bne.n	8001a52 <HAL_RCC_OscConfig+0xf6>
 800199e:	4ba8      	ldr	r3, [pc, #672]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d152      	bne.n	8001a52 <HAL_RCC_OscConfig+0xf6>
 80019ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80019b8:	fa93 f3a3 	rbit	r3, r3
 80019bc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f043 0301 	orr.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d102      	bne.n	80019de <HAL_RCC_OscConfig+0x82>
 80019d8:	4b99      	ldr	r3, [pc, #612]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	e015      	b.n	8001a0a <HAL_RCC_OscConfig+0xae>
 80019de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80019ea:	fa93 f3a3 	rbit	r3, r3
 80019ee:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80019f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019f6:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80019fa:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80019fe:	fa93 f3a3 	rbit	r3, r3
 8001a02:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001a06:	4b8e      	ldr	r3, [pc, #568]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a0e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001a12:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001a16:	fa92 f2a2 	rbit	r2, r2
 8001a1a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001a1e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001a22:	fab2 f282 	clz	r2, r2
 8001a26:	b2d2      	uxtb	r2, r2
 8001a28:	f042 0220 	orr.w	r2, r2, #32
 8001a2c:	b2d2      	uxtb	r2, r2
 8001a2e:	f002 021f 	and.w	r2, r2, #31
 8001a32:	2101      	movs	r1, #1
 8001a34:	fa01 f202 	lsl.w	r2, r1, r2
 8001a38:	4013      	ands	r3, r2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8102 	beq.w	8001c44 <HAL_RCC_OscConfig+0x2e8>
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 80fc 	bne.w	8001c44 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f000 be93 	b.w	8002778 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a5c:	d106      	bne.n	8001a6c <HAL_RCC_OscConfig+0x110>
 8001a5e:	4b78      	ldr	r3, [pc, #480]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a77      	ldr	r2, [pc, #476]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e030      	b.n	8001ace <HAL_RCC_OscConfig+0x172>
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x134>
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a71      	ldr	r2, [pc, #452]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	4b6f      	ldr	r3, [pc, #444]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6e      	ldr	r2, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	e01e      	b.n	8001ace <HAL_RCC_OscConfig+0x172>
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x15a>
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a67      	ldr	r2, [pc, #412]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001aa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b65      	ldr	r3, [pc, #404]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a64      	ldr	r2, [pc, #400]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	e00b      	b.n	8001ace <HAL_RCC_OscConfig+0x172>
 8001ab6:	4b62      	ldr	r3, [pc, #392]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a61      	ldr	r2, [pc, #388]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001abc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	4b5f      	ldr	r3, [pc, #380]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a5e      	ldr	r2, [pc, #376]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001ac8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001acc:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d059      	beq.n	8001b8c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fca0 	bl	800141c <HAL_GetTick>
 8001adc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae0:	e00a      	b.n	8001af8 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ae2:	f7ff fc9b 	bl	800141c <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b64      	cmp	r3, #100	; 0x64
 8001af0:	d902      	bls.n	8001af8 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	f000 be40 	b.w	8002778 <HAL_RCC_OscConfig+0xe1c>
 8001af8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001afc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001b0c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b10:	fab3 f383 	clz	r3, r3
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d102      	bne.n	8001b2a <HAL_RCC_OscConfig+0x1ce>
 8001b24:	4b46      	ldr	r3, [pc, #280]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	e015      	b.n	8001b56 <HAL_RCC_OscConfig+0x1fa>
 8001b2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001b36:	fa93 f3a3 	rbit	r3, r3
 8001b3a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001b3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b42:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001b46:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001b4a:	fa93 f3a3 	rbit	r3, r3
 8001b4e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001b52:	4b3b      	ldr	r3, [pc, #236]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b5a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001b5e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001b62:	fa92 f2a2 	rbit	r2, r2
 8001b66:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001b6a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f042 0220 	orr.w	r2, r2, #32
 8001b78:	b2d2      	uxtb	r2, r2
 8001b7a:	f002 021f 	and.w	r2, r2, #31
 8001b7e:	2101      	movs	r1, #1
 8001b80:	fa01 f202 	lsl.w	r2, r1, r2
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0ab      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x186>
 8001b8a:	e05c      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fc46 	bl	800141c <HAL_GetTick>
 8001b90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b94:	e00a      	b.n	8001bac <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b96:	f7ff fc41 	bl	800141c <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	; 0x64
 8001ba4:	d902      	bls.n	8001bac <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	f000 bde6 	b.w	8002778 <HAL_RCC_OscConfig+0xe1c>
 8001bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bb0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001bb8:	fa93 f3a3 	rbit	r3, r3
 8001bbc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001bc0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d102      	bne.n	8001bde <HAL_RCC_OscConfig+0x282>
 8001bd8:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	e015      	b.n	8001c0a <HAL_RCC_OscConfig+0x2ae>
 8001bde:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001be2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001bea:	fa93 f3a3 	rbit	r3, r3
 8001bee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001bf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bf6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001bfa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001bfe:	fa93 f3a3 	rbit	r3, r3
 8001c02:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <HAL_RCC_OscConfig+0x2e4>)
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c0e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001c12:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001c16:	fa92 f2a2 	rbit	r2, r2
 8001c1a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001c1e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001c22:	fab2 f282 	clz	r2, r2
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f042 0220 	orr.w	r2, r2, #32
 8001c2c:	b2d2      	uxtb	r2, r2
 8001c2e:	f002 021f 	and.w	r2, r2, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ab      	bne.n	8001b96 <HAL_RCC_OscConfig+0x23a>
 8001c3e:	e002      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ea>
 8001c40:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8170 	beq.w	8001f36 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c56:	4bd0      	ldr	r3, [pc, #832]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c62:	4bcd      	ldr	r3, [pc, #820]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d16d      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3ee>
 8001c6e:	4bca      	ldr	r3, [pc, #808]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001c76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c7a:	d166      	bne.n	8001d4a <HAL_RCC_OscConfig+0x3ee>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c82:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001c86:	fa93 f3a3 	rbit	r3, r3
 8001c8a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001c8e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	fab3 f383 	clz	r3, r3
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	095b      	lsrs	r3, r3, #5
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d102      	bne.n	8001cac <HAL_RCC_OscConfig+0x350>
 8001ca6:	4bbc      	ldr	r3, [pc, #752]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	e013      	b.n	8001cd4 <HAL_RCC_OscConfig+0x378>
 8001cac:	2302      	movs	r3, #2
 8001cae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001cb6:	fa93 f3a3 	rbit	r3, r3
 8001cba:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001cc4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001cc8:	fa93 f3a3 	rbit	r3, r3
 8001ccc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001cd0:	4bb1      	ldr	r3, [pc, #708]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001cda:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001cde:	fa92 f2a2 	rbit	r2, r2
 8001ce2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001ce6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cea:	fab2 f282 	clz	r2, r2
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	f042 0220 	orr.w	r2, r2, #32
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	f002 021f 	and.w	r2, r2, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001d00:	4013      	ands	r3, r2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3ba>
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d002      	beq.n	8001d16 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f000 bd31 	b.w	8002778 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4ba0      	ldr	r3, [pc, #640]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	21f8      	movs	r1, #248	; 0xf8
 8001d26:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d2a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001d2e:	fa91 f1a1 	rbit	r1, r1
 8001d32:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001d36:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001d3a:	fab1 f181 	clz	r1, r1
 8001d3e:	b2c9      	uxtb	r1, r1
 8001d40:	408b      	lsls	r3, r1
 8001d42:	4995      	ldr	r1, [pc, #596]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d48:	e0f5      	b.n	8001f36 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d4a:	1d3b      	adds	r3, r7, #4
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	f000 8085 	beq.w	8001e60 <HAL_RCC_OscConfig+0x504>
 8001d56:	2301      	movs	r3, #1
 8001d58:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001d68:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	fab3 f383 	clz	r3, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d76:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2301      	movs	r3, #1
 8001d80:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7ff fb4b 	bl	800141c <HAL_GetTick>
 8001d86:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8a:	e00a      	b.n	8001da2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff fb46 	bl	800141c <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d902      	bls.n	8001da2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f000 bceb 	b.w	8002778 <HAL_RCC_OscConfig+0xe1c>
 8001da2:	2302      	movs	r3, #2
 8001da4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001dac:	fa93 f3a3 	rbit	r3, r3
 8001db0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001db4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	fab3 f383 	clz	r3, r3
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d102      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x476>
 8001dcc:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	e013      	b.n	8001dfa <HAL_RCC_OscConfig+0x49e>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001ddc:	fa93 f3a3 	rbit	r3, r3
 8001de0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001de4:	2302      	movs	r3, #2
 8001de6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001dea:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001df6:	4b68      	ldr	r3, [pc, #416]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001e00:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001e04:	fa92 f2a2 	rbit	r2, r2
 8001e08:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001e0c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001e10:	fab2 f282 	clz	r2, r2
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	f042 0220 	orr.w	r2, r2, #32
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	f002 021f 	and.w	r2, r2, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f202 	lsl.w	r2, r1, r2
 8001e26:	4013      	ands	r3, r2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0af      	beq.n	8001d8c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2c:	4b5a      	ldr	r3, [pc, #360]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	21f8      	movs	r1, #248	; 0xf8
 8001e3c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e40:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001e44:	fa91 f1a1 	rbit	r1, r1
 8001e48:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001e4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001e50:	fab1 f181 	clz	r1, r1
 8001e54:	b2c9      	uxtb	r1, r1
 8001e56:	408b      	lsls	r3, r1
 8001e58:	494f      	ldr	r1, [pc, #316]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
 8001e5e:	e06a      	b.n	8001f36 <HAL_RCC_OscConfig+0x5da>
 8001e60:	2301      	movs	r3, #1
 8001e62:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e66:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e6a:	fa93 f3a3 	rbit	r3, r3
 8001e6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001e72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e80:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	461a      	mov	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e8c:	f7ff fac6 	bl	800141c <HAL_GetTick>
 8001e90:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e94:	e00a      	b.n	8001eac <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e96:	f7ff fac1 	bl	800141c <HAL_GetTick>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d902      	bls.n	8001eac <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	f000 bc66 	b.w	8002778 <HAL_RCC_OscConfig+0xe1c>
 8001eac:	2302      	movs	r3, #2
 8001eae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001eb6:	fa93 f3a3 	rbit	r3, r3
 8001eba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ebe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_OscConfig+0x580>
 8001ed6:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	e013      	b.n	8001f04 <HAL_RCC_OscConfig+0x5a8>
 8001edc:	2302      	movs	r3, #2
 8001ede:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001ef4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f00:	4b25      	ldr	r3, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0x63c>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2202      	movs	r2, #2
 8001f06:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001f0a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001f0e:	fa92 f2a2 	rbit	r2, r2
 8001f12:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001f16:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1af      	bne.n	8001e96 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 80da 	beq.w	80020fa <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d069      	beq.n	8002024 <HAL_RCC_OscConfig+0x6c8>
 8001f50:	2301      	movs	r3, #1
 8001f52:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001f62:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f66:	fab3 f383 	clz	r3, r3
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <HAL_RCC_OscConfig+0x640>)
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	461a      	mov	r2, r3
 8001f76:	2301      	movs	r3, #1
 8001f78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fa4f 	bl	800141c <HAL_GetTick>
 8001f7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	e00d      	b.n	8001fa0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f84:	f7ff fa4a 	bl	800141c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d905      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e3ef      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	10908120 	.word	0x10908120
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001faa:	fa93 f2a3 	rbit	r2, r3
 8001fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001fb8:	2202      	movs	r2, #2
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	fa93 f2a3 	rbit	r2, r3
 8001fc6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	fa93 f2a3 	rbit	r2, r3
 8001fde:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001fe2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fe4:	4ba4      	ldr	r3, [pc, #656]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 8001fe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fe8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001fec:	2102      	movs	r1, #2
 8001fee:	6019      	str	r1, [r3, #0]
 8001ff0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	fa93 f1a3 	rbit	r1, r3
 8001ffa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ffe:	6019      	str	r1, [r3, #0]
  return result;
 8002000:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002010:	b2db      	uxtb	r3, r3
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	2101      	movs	r1, #1
 8002018:	fa01 f303 	lsl.w	r3, r1, r3
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0b0      	beq.n	8001f84 <HAL_RCC_OscConfig+0x628>
 8002022:	e06a      	b.n	80020fa <HAL_RCC_OscConfig+0x79e>
 8002024:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	fa93 f2a3 	rbit	r2, r3
 8002036:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800203a:	601a      	str	r2, [r3, #0]
  return result;
 800203c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002040:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002042:	fab3 f383 	clz	r3, r3
 8002046:	b2db      	uxtb	r3, r3
 8002048:	461a      	mov	r2, r3
 800204a:	4b8c      	ldr	r3, [pc, #560]	; (800227c <HAL_RCC_OscConfig+0x920>)
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	461a      	mov	r2, r3
 8002052:	2300      	movs	r3, #0
 8002054:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7ff f9e1 	bl	800141c <HAL_GetTick>
 800205a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800205e:	e009      	b.n	8002074 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff f9dc 	bl	800141c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e381      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
 8002074:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	fa93 f2a3 	rbit	r2, r3
 8002086:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002090:	2202      	movs	r2, #2
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020a8:	2202      	movs	r2, #2
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	fa93 f2a3 	rbit	r2, r3
 80020b6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80020ba:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b6e      	ldr	r3, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80020be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020c4:	2102      	movs	r1, #2
 80020c6:	6019      	str	r1, [r3, #0]
 80020c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	fa93 f1a3 	rbit	r1, r3
 80020d2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020d6:	6019      	str	r1, [r3, #0]
  return result;
 80020d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f003 031f 	and.w	r3, r3, #31
 80020ee:	2101      	movs	r1, #1
 80020f0:	fa01 f303 	lsl.w	r3, r1, r3
 80020f4:	4013      	ands	r3, r2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1b2      	bne.n	8002060 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	f000 8157 	beq.w	80023b8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800210a:	2300      	movs	r3, #0
 800210c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002110:	4b59      	ldr	r3, [pc, #356]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d112      	bne.n	8002142 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b56      	ldr	r3, [pc, #344]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	4a55      	ldr	r2, [pc, #340]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	61d3      	str	r3, [r2, #28]
 8002128:	4b53      	ldr	r3, [pc, #332]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f107 030c 	add.w	r3, r7, #12
 800213a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <HAL_RCC_OscConfig+0x924>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d11a      	bne.n	8002184 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214e:	4b4c      	ldr	r3, [pc, #304]	; (8002280 <HAL_RCC_OscConfig+0x924>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a4b      	ldr	r2, [pc, #300]	; (8002280 <HAL_RCC_OscConfig+0x924>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215a:	f7ff f95f 	bl	800141c <HAL_GetTick>
 800215e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002162:	e009      	b.n	8002178 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002164:	f7ff f95a 	bl	800141c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b64      	cmp	r3, #100	; 0x64
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e2ff      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_OscConfig+0x924>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0ef      	beq.n	8002164 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002184:	1d3b      	adds	r3, r7, #4
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d106      	bne.n	800219c <HAL_RCC_OscConfig+0x840>
 800218e:	4b3a      	ldr	r3, [pc, #232]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4a39      	ldr	r2, [pc, #228]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6213      	str	r3, [r2, #32]
 800219a:	e02f      	b.n	80021fc <HAL_RCC_OscConfig+0x8a0>
 800219c:	1d3b      	adds	r3, r7, #4
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10c      	bne.n	80021c0 <HAL_RCC_OscConfig+0x864>
 80021a6:	4b34      	ldr	r3, [pc, #208]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	4a33      	ldr	r2, [pc, #204]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021ac:	f023 0301 	bic.w	r3, r3, #1
 80021b0:	6213      	str	r3, [r2, #32]
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	4a30      	ldr	r2, [pc, #192]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021b8:	f023 0304 	bic.w	r3, r3, #4
 80021bc:	6213      	str	r3, [r2, #32]
 80021be:	e01d      	b.n	80021fc <HAL_RCC_OscConfig+0x8a0>
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	2b05      	cmp	r3, #5
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x888>
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021d0:	f043 0304 	orr.w	r3, r3, #4
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a27      	ldr	r2, [pc, #156]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	e00b      	b.n	80021fc <HAL_RCC_OscConfig+0x8a0>
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a23      	ldr	r2, [pc, #140]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	4b21      	ldr	r3, [pc, #132]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a20      	ldr	r2, [pc, #128]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 80021f6:	f023 0304 	bic.w	r3, r3, #4
 80021fa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d06a      	beq.n	80022dc <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002206:	f7ff f909 	bl	800141c <HAL_GetTick>
 800220a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800220e:	e00b      	b.n	8002228 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002210:	f7ff f904 	bl	800141c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002220:	4293      	cmp	r3, r2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e2a7      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
 8002228:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800222c:	2202      	movs	r2, #2
 800222e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002230:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	fa93 f2a3 	rbit	r2, r3
 800223a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002244:	2202      	movs	r2, #2
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	fa93 f2a3 	rbit	r2, r3
 8002252:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002256:	601a      	str	r2, [r3, #0]
  return result;
 8002258:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800225c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	095b      	lsrs	r3, r3, #5
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d108      	bne.n	8002284 <HAL_RCC_OscConfig+0x928>
 8002272:	4b01      	ldr	r3, [pc, #4]	; (8002278 <HAL_RCC_OscConfig+0x91c>)
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	e013      	b.n	80022a0 <HAL_RCC_OscConfig+0x944>
 8002278:	40021000 	.word	0x40021000
 800227c:	10908120 	.word	0x10908120
 8002280:	40007000 	.word	0x40007000
 8002284:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002288:	2202      	movs	r2, #2
 800228a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	4bc0      	ldr	r3, [pc, #768]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022a4:	2102      	movs	r1, #2
 80022a6:	6011      	str	r1, [r2, #0]
 80022a8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80022ac:	6812      	ldr	r2, [r2, #0]
 80022ae:	fa92 f1a2 	rbit	r1, r2
 80022b2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022b6:	6011      	str	r1, [r2, #0]
  return result;
 80022b8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	b2d2      	uxtb	r2, r2
 80022c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f002 021f 	and.w	r2, r2, #31
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d09a      	beq.n	8002210 <HAL_RCC_OscConfig+0x8b4>
 80022da:	e063      	b.n	80023a4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7ff f89e 	bl	800141c <HAL_GetTick>
 80022e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e4:	e00b      	b.n	80022fe <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff f899 	bl	800141c <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e23c      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
 80022fe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002302:	2202      	movs	r2, #2
 8002304:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002306:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	fa93 f2a3 	rbit	r2, r3
 8002310:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800231a:	2202      	movs	r2, #2
 800231c:	601a      	str	r2, [r3, #0]
 800231e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800232c:	601a      	str	r2, [r3, #0]
  return result;
 800232e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002332:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002334:	fab3 f383 	clz	r3, r3
 8002338:	b2db      	uxtb	r3, r3
 800233a:	095b      	lsrs	r3, r3, #5
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d102      	bne.n	800234e <HAL_RCC_OscConfig+0x9f2>
 8002348:	4b95      	ldr	r3, [pc, #596]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	e00d      	b.n	800236a <HAL_RCC_OscConfig+0xa0e>
 800234e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	fa93 f2a3 	rbit	r2, r3
 8002360:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	4b8e      	ldr	r3, [pc, #568]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800236e:	2102      	movs	r1, #2
 8002370:	6011      	str	r1, [r2, #0]
 8002372:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	fa92 f1a2 	rbit	r1, r2
 800237c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002380:	6011      	str	r1, [r2, #0]
  return result;
 8002382:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002386:	6812      	ldr	r2, [r2, #0]
 8002388:	fab2 f282 	clz	r2, r2
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	f002 021f 	and.w	r2, r2, #31
 8002398:	2101      	movs	r1, #1
 800239a:	fa01 f202 	lsl.w	r2, r1, r2
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1a0      	bne.n	80022e6 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023a4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d105      	bne.n	80023b8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ac:	4b7c      	ldr	r3, [pc, #496]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	4a7b      	ldr	r2, [pc, #492]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 80023b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023b6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b8:	1d3b      	adds	r3, r7, #4
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f000 81d9 	beq.w	8002776 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c4:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 030c 	and.w	r3, r3, #12
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	f000 81a6 	beq.w	800271e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d2:	1d3b      	adds	r3, r7, #4
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	f040 811e 	bne.w	800261a <HAL_RCC_OscConfig+0xcbe>
 80023de:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80023e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	fa93 f2a3 	rbit	r2, r3
 80023f2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023f6:	601a      	str	r2, [r3, #0]
  return result;
 80023f8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80023fc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002408:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	461a      	mov	r2, r3
 8002410:	2300      	movs	r3, #0
 8002412:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002414:	f7ff f802 	bl	800141c <HAL_GetTick>
 8002418:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241c:	e009      	b.n	8002432 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241e:	f7fe fffd 	bl	800141c <HAL_GetTick>
 8002422:	4602      	mov	r2, r0
 8002424:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1a2      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
 8002432:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	fa93 f2a3 	rbit	r2, r3
 8002446:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800244a:	601a      	str	r2, [r3, #0]
  return result;
 800244c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002450:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	095b      	lsrs	r3, r3, #5
 800245a:	b2db      	uxtb	r3, r3
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b01      	cmp	r3, #1
 8002464:	d102      	bne.n	800246c <HAL_RCC_OscConfig+0xb10>
 8002466:	4b4e      	ldr	r3, [pc, #312]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	e01b      	b.n	80024a4 <HAL_RCC_OscConfig+0xb48>
 800246c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002470:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002474:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	fa93 f2a3 	rbit	r2, r3
 8002480:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800248a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	fa93 f2a3 	rbit	r2, r3
 800249a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80024a8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80024ac:	6011      	str	r1, [r2, #0]
 80024ae:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	fa92 f1a2 	rbit	r1, r2
 80024b8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024bc:	6011      	str	r1, [r2, #0]
  return result;
 80024be:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	f042 0220 	orr.w	r2, r2, #32
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f002 021f 	and.w	r2, r2, #31
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f202 	lsl.w	r2, r1, r2
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d19e      	bne.n	800241e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024e0:	4b2f      	ldr	r3, [pc, #188]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f023 020f 	bic.w	r2, r3, #15
 80024e8:	1d3b      	adds	r3, r7, #4
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	492c      	ldr	r1, [pc, #176]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	62cb      	str	r3, [r1, #44]	; 0x2c
 80024f4:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80024fc:	1d3b      	adds	r3, r7, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6a19      	ldr	r1, [r3, #32]
 8002502:	1d3b      	adds	r3, r7, #4
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	430b      	orrs	r3, r1
 800250a:	4925      	ldr	r1, [pc, #148]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
 8002510:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002528:	601a      	str	r2, [r3, #0]
  return result;
 800252a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800252e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002530:	fab3 f383 	clz	r3, r3
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800253a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	461a      	mov	r2, r3
 8002542:	2301      	movs	r3, #1
 8002544:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7fe ff69 	bl	800141c <HAL_GetTick>
 800254a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254e:	e009      	b.n	8002564 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002550:	f7fe ff64 	bl	800141c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e109      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
 8002564:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002568:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800256c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	fa93 f2a3 	rbit	r2, r3
 8002578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800257c:	601a      	str	r2, [r3, #0]
  return result;
 800257e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002582:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCC_OscConfig+0xc48>
 8002598:	4b01      	ldr	r3, [pc, #4]	; (80025a0 <HAL_RCC_OscConfig+0xc44>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	e01e      	b.n	80025dc <HAL_RCC_OscConfig+0xc80>
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ae:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80025bc:	601a      	str	r2, [r3, #0]
 80025be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	fa93 f2a3 	rbit	r2, r3
 80025d2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	4b6a      	ldr	r3, [pc, #424]	; (8002784 <HAL_RCC_OscConfig+0xe28>)
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80025e0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025e4:	6011      	str	r1, [r2, #0]
 80025e6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	fa92 f1a2 	rbit	r1, r2
 80025f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025f4:	6011      	str	r1, [r2, #0]
  return result;
 80025f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	fab2 f282 	clz	r2, r2
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	f002 021f 	and.w	r2, r2, #31
 800260c:	2101      	movs	r1, #1
 800260e:	fa01 f202 	lsl.w	r2, r1, r2
 8002612:	4013      	ands	r3, r2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d09b      	beq.n	8002550 <HAL_RCC_OscConfig+0xbf4>
 8002618:	e0ad      	b.n	8002776 <HAL_RCC_OscConfig+0xe1a>
 800261a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800261e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002632:	601a      	str	r2, [r3, #0]
  return result;
 8002634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002638:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	b2db      	uxtb	r3, r3
 8002640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	461a      	mov	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fee4 	bl	800141c <HAL_GetTick>
 8002654:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002658:	e009      	b.n	800266e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800265a:	f7fe fedf 	bl	800141c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e084      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
 800266e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002672:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	fa93 f2a3 	rbit	r2, r3
 8002682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002686:	601a      	str	r2, [r3, #0]
  return result;
 8002688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	fab3 f383 	clz	r3, r3
 8002692:	b2db      	uxtb	r3, r3
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	b2db      	uxtb	r3, r3
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_RCC_OscConfig+0xd4c>
 80026a2:	4b38      	ldr	r3, [pc, #224]	; (8002784 <HAL_RCC_OscConfig+0xe28>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	e01b      	b.n	80026e0 <HAL_RCC_OscConfig+0xd84>
 80026a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f107 0320 	add.w	r3, r7, #32
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	f107 031c 	add.w	r3, r7, #28
 80026c6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f107 031c 	add.w	r3, r7, #28
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	fa93 f2a3 	rbit	r2, r3
 80026d6:	f107 0318 	add.w	r3, r7, #24
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCC_OscConfig+0xe28>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	f107 0214 	add.w	r2, r7, #20
 80026e4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026e8:	6011      	str	r1, [r2, #0]
 80026ea:	f107 0214 	add.w	r2, r7, #20
 80026ee:	6812      	ldr	r2, [r2, #0]
 80026f0:	fa92 f1a2 	rbit	r1, r2
 80026f4:	f107 0210 	add.w	r2, r7, #16
 80026f8:	6011      	str	r1, [r2, #0]
  return result;
 80026fa:	f107 0210 	add.w	r2, r7, #16
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	fab2 f282 	clz	r2, r2
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	f042 0220 	orr.w	r2, r2, #32
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f002 021f 	and.w	r2, r2, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d19e      	bne.n	800265a <HAL_RCC_OscConfig+0xcfe>
 800271c:	e02b      	b.n	8002776 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800271e:	1d3b      	adds	r3, r7, #4
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e025      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800272c:	4b15      	ldr	r3, [pc, #84]	; (8002784 <HAL_RCC_OscConfig+0xe28>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002734:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCC_OscConfig+0xe28>)
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800273c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002740:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002744:	1d3b      	adds	r3, r7, #4
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	429a      	cmp	r2, r3
 800274c:	d111      	bne.n	8002772 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800274e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002752:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002756:	1d3b      	adds	r3, r7, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800275c:	429a      	cmp	r2, r3
 800275e:	d108      	bne.n	8002772 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002760:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800276e:	429a      	cmp	r2, r3
 8002770:	d001      	beq.n	8002776 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8002776:	2300      	movs	r3, #0
}
 8002778:	4618      	mov	r0, r3
 800277a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40021000 	.word	0x40021000

08002788 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b09e      	sub	sp, #120	; 0x78
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d101      	bne.n	80027a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e162      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a0:	4b90      	ldr	r3, [pc, #576]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d910      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ae:	4b8d      	ldr	r3, [pc, #564]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f023 0207 	bic.w	r2, r3, #7
 80027b6:	498b      	ldr	r1, [pc, #556]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b89      	ldr	r3, [pc, #548]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e14a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d008      	beq.n	80027ee <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027dc:	4b82      	ldr	r3, [pc, #520]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	497f      	ldr	r1, [pc, #508]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80dc 	beq.w	80029b4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d13c      	bne.n	800287e <HAL_RCC_ClockConfig+0xf6>
 8002804:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002808:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800280c:	fa93 f3a3 	rbit	r3, r3
 8002810:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002812:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	b2db      	uxtb	r3, r3
 800281e:	f043 0301 	orr.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d102      	bne.n	800282e <HAL_RCC_ClockConfig+0xa6>
 8002828:	4b6f      	ldr	r3, [pc, #444]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	e00f      	b.n	800284e <HAL_RCC_ClockConfig+0xc6>
 800282e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002832:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002834:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002836:	fa93 f3a3 	rbit	r3, r3
 800283a:	667b      	str	r3, [r7, #100]	; 0x64
 800283c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002840:	663b      	str	r3, [r7, #96]	; 0x60
 8002842:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	65fb      	str	r3, [r7, #92]	; 0x5c
 800284a:	4b67      	ldr	r3, [pc, #412]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002852:	65ba      	str	r2, [r7, #88]	; 0x58
 8002854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002856:	fa92 f2a2 	rbit	r2, r2
 800285a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800285c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800285e:	fab2 f282 	clz	r2, r2
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f042 0220 	orr.w	r2, r2, #32
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f002 021f 	and.w	r2, r2, #31
 800286e:	2101      	movs	r1, #1
 8002870:	fa01 f202 	lsl.w	r2, r1, r2
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d17b      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e0f3      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d13c      	bne.n	8002900 <HAL_RCC_ClockConfig+0x178>
 8002886:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800288a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_ClockConfig+0x128>
 80028aa:	4b4f      	ldr	r3, [pc, #316]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e00f      	b.n	80028d0 <HAL_RCC_ClockConfig+0x148>
 80028b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	647b      	str	r3, [r7, #68]	; 0x44
 80028be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c2:	643b      	str	r3, [r7, #64]	; 0x40
 80028c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028c6:	fa93 f3a3 	rbit	r3, r3
 80028ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028cc:	4b46      	ldr	r3, [pc, #280]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d4:	63ba      	str	r2, [r7, #56]	; 0x38
 80028d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028d8:	fa92 f2a2 	rbit	r2, r2
 80028dc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80028de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028e0:	fab2 f282 	clz	r2, r2
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	f042 0220 	orr.w	r2, r2, #32
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	f002 021f 	and.w	r2, r2, #31
 80028f0:	2101      	movs	r1, #1
 80028f2:	fa01 f202 	lsl.w	r2, r1, r2
 80028f6:	4013      	ands	r3, r2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d13a      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b2      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
 8002900:	2302      	movs	r3, #2
 8002902:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002906:	fa93 f3a3 	rbit	r3, r3
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800290e:	fab3 f383 	clz	r3, r3
 8002912:	b2db      	uxtb	r3, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d102      	bne.n	8002928 <HAL_RCC_ClockConfig+0x1a0>
 8002922:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	e00d      	b.n	8002944 <HAL_RCC_ClockConfig+0x1bc>
 8002928:	2302      	movs	r3, #2
 800292a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292e:	fa93 f3a3 	rbit	r3, r3
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	2302      	movs	r3, #2
 8002936:	623b      	str	r3, [r7, #32]
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	fa93 f3a3 	rbit	r3, r3
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	4b29      	ldr	r3, [pc, #164]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002944:	2202      	movs	r2, #2
 8002946:	61ba      	str	r2, [r7, #24]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	fa92 f2a2 	rbit	r2, r2
 800294e:	617a      	str	r2, [r7, #20]
  return result;
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	fab2 f282 	clz	r2, r2
 8002956:	b2d2      	uxtb	r2, r2
 8002958:	f042 0220 	orr.w	r2, r2, #32
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	f002 021f 	and.w	r2, r2, #31
 8002962:	2101      	movs	r1, #1
 8002964:	fa01 f202 	lsl.w	r2, r1, r2
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e079      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b1d      	ldr	r3, [pc, #116]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	491a      	ldr	r1, [pc, #104]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 8002980:	4313      	orrs	r3, r2
 8002982:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7fe fd4a 	bl	800141c <HAL_GetTick>
 8002988:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fe fd46 	bl	800141c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e061      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b11      	ldr	r3, [pc, #68]	; (80029e8 <HAL_RCC_ClockConfig+0x260>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d214      	bcs.n	80029ec <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f023 0207 	bic.w	r2, r3, #7
 80029ca:	4906      	ldr	r1, [pc, #24]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <HAL_RCC_ClockConfig+0x25c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e040      	b.n	8002a66 <HAL_RCC_ClockConfig+0x2de>
 80029e4:	40022000 	.word	0x40022000
 80029e8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0304 	and.w	r3, r3, #4
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f8:	4b1d      	ldr	r3, [pc, #116]	; (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	491a      	ldr	r1, [pc, #104]	; (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d009      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	4912      	ldr	r1, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a2a:	f000 f829 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4601      	mov	r1, r0
 8002a30:	4b0f      	ldr	r3, [pc, #60]	; (8002a70 <HAL_RCC_ClockConfig+0x2e8>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a38:	22f0      	movs	r2, #240	; 0xf0
 8002a3a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3c:	693a      	ldr	r2, [r7, #16]
 8002a3e:	fa92 f2a2 	rbit	r2, r2
 8002a42:	60fa      	str	r2, [r7, #12]
  return result;
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	fab2 f282 	clz	r2, r2
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	40d3      	lsrs	r3, r2
 8002a4e:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <HAL_RCC_ClockConfig+0x2ec>)
 8002a50:	5cd3      	ldrb	r3, [r2, r3]
 8002a52:	fa21 f303 	lsr.w	r3, r1, r3
 8002a56:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <HAL_RCC_ClockConfig+0x2f0>)
 8002a58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a5a:	4b08      	ldr	r3, [pc, #32]	; (8002a7c <HAL_RCC_ClockConfig+0x2f4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7fe fc98 	bl	8001394 <HAL_InitTick>
  
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3778      	adds	r7, #120	; 0x78
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08006eac 	.word	0x08006eac
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b08b      	sub	sp, #44	; 0x2c
 8002a84:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	627b      	str	r3, [r7, #36]	; 0x24
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002a9a:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d002      	beq.n	8002ab0 <HAL_RCC_GetSysClockFreq+0x30>
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d003      	beq.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x36>
 8002aae:	e03f      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ab0:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ab2:	623b      	str	r3, [r7, #32]
      break;
 8002ab4:	e03f      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002abc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002ac0:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	fa92 f2a2 	rbit	r2, r2
 8002ac8:	607a      	str	r2, [r7, #4]
  return result;
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	fab2 f282 	clz	r2, r2
 8002ad0:	b2d2      	uxtb	r2, r2
 8002ad2:	40d3      	lsrs	r3, r2
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ada:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	220f      	movs	r2, #15
 8002ae4:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	fa92 f2a2 	rbit	r2, r2
 8002aec:	60fa      	str	r2, [r7, #12]
  return result;
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	fab2 f282 	clz	r2, r2
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	40d3      	lsrs	r3, r2
 8002af8:	4a15      	ldr	r2, [pc, #84]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002afa:	5cd3      	ldrb	r3, [r2, r3]
 8002afc:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b08:	4a0f      	ldr	r2, [pc, #60]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fb02 f303 	mul.w	r3, r2, r3
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	e007      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	623b      	str	r3, [r7, #32]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	372c      	adds	r7, #44	; 0x2c
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40021000 	.word	0x40021000
 8002b48:	007a1200 	.word	0x007a1200
 8002b4c:	08006ec4 	.word	0x08006ec4
 8002b50:	08006ed4 	.word	0x08006ed4

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000000 	.word	0x20000000

08002b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b72:	f7ff ffef 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b76:	4601      	mov	r1, r0
 8002b78:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b80:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002b84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	fa92 f2a2 	rbit	r2, r2
 8002b8c:	603a      	str	r2, [r7, #0]
  return result;
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	fab2 f282 	clz	r2, r2
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	40d3      	lsrs	r3, r2
 8002b98:	4a04      	ldr	r2, [pc, #16]	; (8002bac <HAL_RCC_GetPCLK1Freq+0x40>)
 8002b9a:	5cd3      	ldrb	r3, [r2, r3]
 8002b9c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	08006ebc 	.word	0x08006ebc

08002bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bb6:	f7ff ffcd 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002bba:	4601      	mov	r1, r0
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002bc4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002bc8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	fa92 f2a2 	rbit	r2, r2
 8002bd0:	603a      	str	r2, [r7, #0]
  return result;
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	fab2 f282 	clz	r2, r2
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	40d3      	lsrs	r3, r2
 8002bdc:	4a04      	ldr	r2, [pc, #16]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	08006ebc 	.word	0x08006ebc

08002bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b092      	sub	sp, #72	; 0x48
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80d4 	beq.w	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c18:	4b4e      	ldr	r3, [pc, #312]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d10e      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c24:	4b4b      	ldr	r3, [pc, #300]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c26:	69db      	ldr	r3, [r3, #28]
 8002c28:	4a4a      	ldr	r2, [pc, #296]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	61d3      	str	r3, [r2, #28]
 8002c30:	4b48      	ldr	r3, [pc, #288]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c32:	69db      	ldr	r3, [r3, #28]
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c42:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d118      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c4e:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a41      	ldr	r2, [pc, #260]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c58:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c5a:	f7fe fbdf 	bl	800141c <HAL_GetTick>
 8002c5e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c60:	e008      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c62:	f7fe fbdb 	bl	800141c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b64      	cmp	r3, #100	; 0x64
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1d6      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c74:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c88:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f000 8084 	beq.w	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d07c      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ca0:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	461a      	mov	r2, r3
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002cf2:	4a18      	ldr	r2, [pc, #96]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cf6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04b      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d02:	f7fe fb8b 	bl	800141c <HAL_GetTick>
 8002d06:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d0a:	f7fe fb87 	bl	800141c <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e180      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d20:	2302      	movs	r3, #2
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	61fb      	str	r3, [r7, #28]
  return result;
 8002d38:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	095b      	lsrs	r3, r3, #5
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d108      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d4e:	4b01      	ldr	r3, [pc, #4]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	e00d      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40007000 	.word	0x40007000
 8002d5c:	10908100 	.word	0x10908100
 8002d60:	2302      	movs	r3, #2
 8002d62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa93 f3a3 	rbit	r3, r3
 8002d6a:	617b      	str	r3, [r7, #20]
 8002d6c:	4ba0      	ldr	r3, [pc, #640]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2202      	movs	r2, #2
 8002d72:	613a      	str	r2, [r7, #16]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	fa92 f2a2 	rbit	r2, r2
 8002d7a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	fab2 f282 	clz	r2, r2
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	f002 021f 	and.w	r2, r2, #31
 8002d8e:	2101      	movs	r1, #1
 8002d90:	fa01 f202 	lsl.w	r2, r1, r2
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0b7      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d9a:	4b95      	ldr	r3, [pc, #596]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4992      	ldr	r1, [pc, #584]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d105      	bne.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002db4:	4b8e      	ldr	r3, [pc, #568]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	4a8d      	ldr	r2, [pc, #564]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d008      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dcc:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	f023 0203 	bic.w	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	4985      	ldr	r1, [pc, #532]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d008      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dea:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	497e      	ldr	r1, [pc, #504]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e08:	4b79      	ldr	r3, [pc, #484]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	4976      	ldr	r1, [pc, #472]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0320 	and.w	r3, r3, #32
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e26:	4b72      	ldr	r3, [pc, #456]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f023 0210 	bic.w	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69db      	ldr	r3, [r3, #28]
 8002e32:	496f      	ldr	r1, [pc, #444]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d008      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e44:	4b6a      	ldr	r3, [pc, #424]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e50:	4967      	ldr	r1, [pc, #412]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d008      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e62:	4b63      	ldr	r3, [pc, #396]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f023 0220 	bic.w	r2, r3, #32
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	4960      	ldr	r1, [pc, #384]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e80:	4b5b      	ldr	r3, [pc, #364]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	4958      	ldr	r1, [pc, #352]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d008      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e9e:	4b54      	ldr	r3, [pc, #336]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	4951      	ldr	r1, [pc, #324]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ebc:	4b4c      	ldr	r3, [pc, #304]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	4949      	ldr	r1, [pc, #292]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eda:	4b45      	ldr	r3, [pc, #276]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4942      	ldr	r1, [pc, #264]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ef8:	4b3d      	ldr	r3, [pc, #244]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	493a      	ldr	r1, [pc, #232]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f16:	4b36      	ldr	r3, [pc, #216]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	4933      	ldr	r1, [pc, #204]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f34:	4b2e      	ldr	r3, [pc, #184]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	492b      	ldr	r1, [pc, #172]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f52:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4924      	ldr	r1, [pc, #144]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f70:	4b1f      	ldr	r3, [pc, #124]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	491c      	ldr	r1, [pc, #112]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d008      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f8e:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f92:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	4915      	ldr	r1, [pc, #84]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fac:	4b10      	ldr	r3, [pc, #64]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	490d      	ldr	r1, [pc, #52]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fca:	4b09      	ldr	r3, [pc, #36]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd6:	4906      	ldr	r1, [pc, #24]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00c      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002fe8:	4b01      	ldr	r3, [pc, #4]	; (8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	e002      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffc:	490b      	ldr	r1, [pc, #44]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800300e:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301a:	4904      	ldr	r1, [pc, #16]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800301c:	4313      	orrs	r3, r2
 800301e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3748      	adds	r7, #72	; 0x48
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000

08003030 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e097      	b.n	8003174 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7fd ffa3 	bl	8000fa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2202      	movs	r2, #2
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8003074:	f023 0307 	bic.w	r3, r3, #7
 8003078:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	3304      	adds	r3, #4
 8003082:	4619      	mov	r1, r3
 8003084:	4610      	mov	r0, r2
 8003086:	f000 f907 	bl	8003298 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	021b      	lsls	r3, r3, #8
 80030c2:	4313      	orrs	r3, r2
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030d0:	f023 030c 	bic.w	r3, r3, #12
 80030d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	021b      	lsls	r3, r3, #8
 80030ec:	4313      	orrs	r3, r2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	011a      	lsls	r2, r3, #4
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
 80030fe:	031b      	lsls	r3, r3, #12
 8003100:	4313      	orrs	r3, r2
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800310e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003116:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4313      	orrs	r3, r2
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800318c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003194:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800319c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d110      	bne.n	80031ce <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d102      	bne.n	80031b8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80031b2:	7b7b      	ldrb	r3, [r7, #13]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d001      	beq.n	80031bc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e069      	b.n	8003290 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2202      	movs	r2, #2
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2202      	movs	r2, #2
 80031c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031cc:	e031      	b.n	8003232 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d110      	bne.n	80031f6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80031d4:	7bbb      	ldrb	r3, [r7, #14]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d102      	bne.n	80031e0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80031da:	7b3b      	ldrb	r3, [r7, #12]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d001      	beq.n	80031e4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e055      	b.n	8003290 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031f4:	e01d      	b.n	8003232 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d108      	bne.n	800320e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80031fc:	7bbb      	ldrb	r3, [r7, #14]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d105      	bne.n	800320e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003202:	7b7b      	ldrb	r3, [r7, #13]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d102      	bne.n	800320e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003208:	7b3b      	ldrb	r3, [r7, #12]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d001      	beq.n	8003212 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e03e      	b.n	8003290 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2202      	movs	r2, #2
 8003216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2202      	movs	r2, #2
 8003226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2202      	movs	r2, #2
 800322e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_TIM_Encoder_Start+0xc4>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b04      	cmp	r3, #4
 800323c:	d008      	beq.n	8003250 <HAL_TIM_Encoder_Start+0xd4>
 800323e:	e00f      	b.n	8003260 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f000 f8c3 	bl	80033d4 <TIM_CCxChannelCmd>
      break;
 800324e:	e016      	b.n	800327e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	2104      	movs	r1, #4
 8003258:	4618      	mov	r0, r3
 800325a:	f000 f8bb 	bl	80033d4 <TIM_CCxChannelCmd>
      break;
 800325e:	e00e      	b.n	800327e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 f8b3 	bl	80033d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2201      	movs	r2, #1
 8003274:	2104      	movs	r1, #4
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f8ac 	bl	80033d4 <TIM_CCxChannelCmd>
      break;
 800327c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f042 0201 	orr.w	r2, r2, #1
 800328c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b6:	d00f      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3f      	ldr	r2, [pc, #252]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00b      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3e      	ldr	r2, [pc, #248]	; (80033bc <TIM_Base_SetConfig+0x124>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d007      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3d      	ldr	r2, [pc, #244]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d003      	beq.n	80032d8 <TIM_Base_SetConfig+0x40>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4a3c      	ldr	r2, [pc, #240]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d108      	bne.n	80032ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d01f      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f8:	d01b      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2e      	ldr	r2, [pc, #184]	; (80033b8 <TIM_Base_SetConfig+0x120>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d017      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2d      	ldr	r2, [pc, #180]	; (80033bc <TIM_Base_SetConfig+0x124>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a2c      	ldr	r2, [pc, #176]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00f      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a2c      	ldr	r2, [pc, #176]	; (80033c8 <TIM_Base_SetConfig+0x130>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d00b      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <TIM_Base_SetConfig+0x134>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d007      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a2a      	ldr	r2, [pc, #168]	; (80033d0 <TIM_Base_SetConfig+0x138>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d003      	beq.n	8003332 <TIM_Base_SetConfig+0x9a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d108      	bne.n	8003344 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <TIM_Base_SetConfig+0x11c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d013      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <TIM_Base_SetConfig+0x128>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d00f      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a13      	ldr	r2, [pc, #76]	; (80033c8 <TIM_Base_SetConfig+0x130>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00b      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a12      	ldr	r2, [pc, #72]	; (80033cc <TIM_Base_SetConfig+0x134>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a11      	ldr	r2, [pc, #68]	; (80033d0 <TIM_Base_SetConfig+0x138>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d003      	beq.n	8003398 <TIM_Base_SetConfig+0x100>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a0c      	ldr	r2, [pc, #48]	; (80033c4 <TIM_Base_SetConfig+0x12c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d103      	bne.n	80033a0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	691a      	ldr	r2, [r3, #16]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	615a      	str	r2, [r3, #20]
}
 80033a6:	bf00      	nop
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40012c00 	.word	0x40012c00
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40013400 	.word	0x40013400
 80033c4:	40015000 	.word	0x40015000
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800

080033d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 031f 	and.w	r3, r3, #31
 80033e6:	2201      	movs	r2, #1
 80033e8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1a      	ldr	r2, [r3, #32]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	43db      	mvns	r3, r3
 80033f6:	401a      	ands	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1a      	ldr	r2, [r3, #32]
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 031f 	and.w	r3, r3, #31
 8003406:	6879      	ldr	r1, [r7, #4]
 8003408:	fa01 f303 	lsl.w	r3, r1, r3
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	621a      	str	r2, [r3, #32]
}
 8003412:	bf00      	nop
 8003414:	371c      	adds	r7, #28
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
	...

08003420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003430:	2b01      	cmp	r3, #1
 8003432:	d101      	bne.n	8003438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003434:	2302      	movs	r3, #2
 8003436:	e06d      	b.n	8003514 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2202      	movs	r2, #2
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d009      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d004      	beq.n	8003476 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a2d      	ldr	r2, [pc, #180]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d108      	bne.n	8003488 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800347c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	4313      	orrs	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d01d      	beq.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d018      	beq.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d013      	beq.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1a      	ldr	r2, [pc, #104]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00e      	beq.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a15      	ldr	r2, [pc, #84]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d009      	beq.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d004      	beq.n	80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a11      	ldr	r2, [pc, #68]	; (8003528 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d10c      	bne.n	8003502 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40012c00 	.word	0x40012c00
 8003524:	40013400 	.word	0x40013400
 8003528:	40015000 	.word	0x40015000
 800352c:	40000400 	.word	0x40000400
 8003530:	40000800 	.word	0x40000800
 8003534:	40014000 	.word	0x40014000

08003538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e040      	b.n	80035cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800354e:	2b00      	cmp	r3, #0
 8003550:	d106      	bne.n	8003560 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7fd fd64 	bl	8001028 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	; 0x24
 8003564:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f022 0201 	bic.w	r2, r2, #1
 8003574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 f92e 	bl	80037d8 <UART_SetConfig>
 800357c:	4603      	mov	r3, r0
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e022      	b.n	80035cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358a:	2b00      	cmp	r3, #0
 800358c:	d002      	beq.n	8003594 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 faf8 	bl	8003b84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 fb7f 	bl	8003cc8 <UART_CheckIdleState>
 80035ca:	4603      	mov	r3, r0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af02      	add	r7, sp, #8
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4613      	mov	r3, r2
 80035e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035e8:	2b20      	cmp	r3, #32
 80035ea:	f040 8082 	bne.w	80036f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d002      	beq.n	80035fa <HAL_UART_Transmit+0x26>
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07a      	b.n	80036f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003604:	2b01      	cmp	r3, #1
 8003606:	d101      	bne.n	800360c <HAL_UART_Transmit+0x38>
 8003608:	2302      	movs	r3, #2
 800360a:	e073      	b.n	80036f4 <HAL_UART_Transmit+0x120>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2221      	movs	r2, #33	; 0x21
 8003620:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003622:	f7fd fefb 	bl	800141c <HAL_GetTick>
 8003626:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	88fa      	ldrh	r2, [r7, #6]
 800362c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003640:	d108      	bne.n	8003654 <HAL_UART_Transmit+0x80>
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d104      	bne.n	8003654 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800364a:	2300      	movs	r3, #0
 800364c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	e003      	b.n	800365c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003664:	e02d      	b.n	80036c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fb72 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e039      	b.n	80036f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10b      	bne.n	800369e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003692:	b292      	uxth	r2, r2
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	3302      	adds	r3, #2
 800369a:	61bb      	str	r3, [r7, #24]
 800369c:	e008      	b.n	80036b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	781a      	ldrb	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b292      	uxth	r2, r2
 80036a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3301      	adds	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	3b01      	subs	r3, #1
 80036ba:	b29a      	uxth	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1cb      	bne.n	8003666 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	9300      	str	r3, [sp, #0]
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2200      	movs	r2, #0
 80036d6:	2140      	movs	r1, #64	; 0x40
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f000 fb3e 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d001      	beq.n	80036e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e005      	b.n	80036f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80036f2:	2302      	movs	r3, #2
  }
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3720      	adds	r7, #32
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b08b      	sub	sp, #44	; 0x2c
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370e:	2b20      	cmp	r3, #32
 8003710:	d156      	bne.n	80037c0 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d002      	beq.n	800371e <HAL_UART_Transmit_IT+0x22>
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e04f      	b.n	80037c2 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_UART_Transmit_IT+0x34>
 800372c:	2302      	movs	r3, #2
 800372e:	e048      	b.n	80037c2 <HAL_UART_Transmit_IT+0xc6>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	88fa      	ldrh	r2, [r7, #6]
 8003742:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	88fa      	ldrh	r2, [r7, #6]
 800374a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2221      	movs	r2, #33	; 0x21
 8003760:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376a:	d107      	bne.n	800377c <HAL_UART_Transmit_IT+0x80>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d103      	bne.n	800377c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4a16      	ldr	r2, [pc, #88]	; (80037d0 <HAL_UART_Transmit_IT+0xd4>)
 8003778:	669a      	str	r2, [r3, #104]	; 0x68
 800377a:	e002      	b.n	8003782 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4a15      	ldr	r2, [pc, #84]	; (80037d4 <HAL_UART_Transmit_IT+0xd8>)
 8003780:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	613b      	str	r3, [r7, #16]
   return(result);
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	461a      	mov	r2, r3
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	69f9      	ldr	r1, [r7, #28]
 80037ae:	6a3a      	ldr	r2, [r7, #32]
 80037b0:	e841 2300 	strex	r3, r2, [r1]
 80037b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e6      	bne.n	800378a <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	e000      	b.n	80037c2 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80037c0:	2302      	movs	r3, #2
  }
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	372c      	adds	r7, #44	; 0x2c
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	08003f9b 	.word	0x08003f9b
 80037d4:	08003ee3 	.word	0x08003ee3

080037d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b088      	sub	sp, #32
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	691b      	ldr	r3, [r3, #16]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	69db      	ldr	r3, [r3, #28]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	4bab      	ldr	r3, [pc, #684]	; (8003ab0 <UART_SetConfig+0x2d8>)
 8003804:	4013      	ands	r3, r2
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	6812      	ldr	r2, [r2, #0]
 800380a:	6979      	ldr	r1, [r7, #20]
 800380c:	430b      	orrs	r3, r1
 800380e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68da      	ldr	r2, [r3, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	4313      	orrs	r3, r2
 8003834:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a99      	ldr	r2, [pc, #612]	; (8003ab4 <UART_SetConfig+0x2dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d120      	bne.n	8003896 <UART_SetConfig+0xbe>
 8003854:	4b98      	ldr	r3, [pc, #608]	; (8003ab8 <UART_SetConfig+0x2e0>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	2b03      	cmp	r3, #3
 800385e:	d817      	bhi.n	8003890 <UART_SetConfig+0xb8>
 8003860:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <UART_SetConfig+0x90>)
 8003862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003866:	bf00      	nop
 8003868:	08003879 	.word	0x08003879
 800386c:	08003885 	.word	0x08003885
 8003870:	0800388b 	.word	0x0800388b
 8003874:	0800387f 	.word	0x0800387f
 8003878:	2301      	movs	r3, #1
 800387a:	77fb      	strb	r3, [r7, #31]
 800387c:	e0b5      	b.n	80039ea <UART_SetConfig+0x212>
 800387e:	2302      	movs	r3, #2
 8003880:	77fb      	strb	r3, [r7, #31]
 8003882:	e0b2      	b.n	80039ea <UART_SetConfig+0x212>
 8003884:	2304      	movs	r3, #4
 8003886:	77fb      	strb	r3, [r7, #31]
 8003888:	e0af      	b.n	80039ea <UART_SetConfig+0x212>
 800388a:	2308      	movs	r3, #8
 800388c:	77fb      	strb	r3, [r7, #31]
 800388e:	e0ac      	b.n	80039ea <UART_SetConfig+0x212>
 8003890:	2310      	movs	r3, #16
 8003892:	77fb      	strb	r3, [r7, #31]
 8003894:	e0a9      	b.n	80039ea <UART_SetConfig+0x212>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a88      	ldr	r2, [pc, #544]	; (8003abc <UART_SetConfig+0x2e4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d124      	bne.n	80038ea <UART_SetConfig+0x112>
 80038a0:	4b85      	ldr	r3, [pc, #532]	; (8003ab8 <UART_SetConfig+0x2e0>)
 80038a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038ac:	d011      	beq.n	80038d2 <UART_SetConfig+0xfa>
 80038ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038b2:	d817      	bhi.n	80038e4 <UART_SetConfig+0x10c>
 80038b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b8:	d011      	beq.n	80038de <UART_SetConfig+0x106>
 80038ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038be:	d811      	bhi.n	80038e4 <UART_SetConfig+0x10c>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <UART_SetConfig+0xf4>
 80038c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c8:	d006      	beq.n	80038d8 <UART_SetConfig+0x100>
 80038ca:	e00b      	b.n	80038e4 <UART_SetConfig+0x10c>
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e08b      	b.n	80039ea <UART_SetConfig+0x212>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e088      	b.n	80039ea <UART_SetConfig+0x212>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e085      	b.n	80039ea <UART_SetConfig+0x212>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e082      	b.n	80039ea <UART_SetConfig+0x212>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e07f      	b.n	80039ea <UART_SetConfig+0x212>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a74      	ldr	r2, [pc, #464]	; (8003ac0 <UART_SetConfig+0x2e8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d124      	bne.n	800393e <UART_SetConfig+0x166>
 80038f4:	4b70      	ldr	r3, [pc, #448]	; (8003ab8 <UART_SetConfig+0x2e0>)
 80038f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80038fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003900:	d011      	beq.n	8003926 <UART_SetConfig+0x14e>
 8003902:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003906:	d817      	bhi.n	8003938 <UART_SetConfig+0x160>
 8003908:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800390c:	d011      	beq.n	8003932 <UART_SetConfig+0x15a>
 800390e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003912:	d811      	bhi.n	8003938 <UART_SetConfig+0x160>
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <UART_SetConfig+0x148>
 8003918:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800391c:	d006      	beq.n	800392c <UART_SetConfig+0x154>
 800391e:	e00b      	b.n	8003938 <UART_SetConfig+0x160>
 8003920:	2300      	movs	r3, #0
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e061      	b.n	80039ea <UART_SetConfig+0x212>
 8003926:	2302      	movs	r3, #2
 8003928:	77fb      	strb	r3, [r7, #31]
 800392a:	e05e      	b.n	80039ea <UART_SetConfig+0x212>
 800392c:	2304      	movs	r3, #4
 800392e:	77fb      	strb	r3, [r7, #31]
 8003930:	e05b      	b.n	80039ea <UART_SetConfig+0x212>
 8003932:	2308      	movs	r3, #8
 8003934:	77fb      	strb	r3, [r7, #31]
 8003936:	e058      	b.n	80039ea <UART_SetConfig+0x212>
 8003938:	2310      	movs	r3, #16
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e055      	b.n	80039ea <UART_SetConfig+0x212>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a60      	ldr	r2, [pc, #384]	; (8003ac4 <UART_SetConfig+0x2ec>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d124      	bne.n	8003992 <UART_SetConfig+0x1ba>
 8003948:	4b5b      	ldr	r3, [pc, #364]	; (8003ab8 <UART_SetConfig+0x2e0>)
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003950:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003954:	d011      	beq.n	800397a <UART_SetConfig+0x1a2>
 8003956:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800395a:	d817      	bhi.n	800398c <UART_SetConfig+0x1b4>
 800395c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003960:	d011      	beq.n	8003986 <UART_SetConfig+0x1ae>
 8003962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003966:	d811      	bhi.n	800398c <UART_SetConfig+0x1b4>
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <UART_SetConfig+0x19c>
 800396c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003970:	d006      	beq.n	8003980 <UART_SetConfig+0x1a8>
 8003972:	e00b      	b.n	800398c <UART_SetConfig+0x1b4>
 8003974:	2300      	movs	r3, #0
 8003976:	77fb      	strb	r3, [r7, #31]
 8003978:	e037      	b.n	80039ea <UART_SetConfig+0x212>
 800397a:	2302      	movs	r3, #2
 800397c:	77fb      	strb	r3, [r7, #31]
 800397e:	e034      	b.n	80039ea <UART_SetConfig+0x212>
 8003980:	2304      	movs	r3, #4
 8003982:	77fb      	strb	r3, [r7, #31]
 8003984:	e031      	b.n	80039ea <UART_SetConfig+0x212>
 8003986:	2308      	movs	r3, #8
 8003988:	77fb      	strb	r3, [r7, #31]
 800398a:	e02e      	b.n	80039ea <UART_SetConfig+0x212>
 800398c:	2310      	movs	r3, #16
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e02b      	b.n	80039ea <UART_SetConfig+0x212>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a4c      	ldr	r2, [pc, #304]	; (8003ac8 <UART_SetConfig+0x2f0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d124      	bne.n	80039e6 <UART_SetConfig+0x20e>
 800399c:	4b46      	ldr	r3, [pc, #280]	; (8003ab8 <UART_SetConfig+0x2e0>)
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80039a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a8:	d011      	beq.n	80039ce <UART_SetConfig+0x1f6>
 80039aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039ae:	d817      	bhi.n	80039e0 <UART_SetConfig+0x208>
 80039b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039b4:	d011      	beq.n	80039da <UART_SetConfig+0x202>
 80039b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ba:	d811      	bhi.n	80039e0 <UART_SetConfig+0x208>
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d003      	beq.n	80039c8 <UART_SetConfig+0x1f0>
 80039c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039c4:	d006      	beq.n	80039d4 <UART_SetConfig+0x1fc>
 80039c6:	e00b      	b.n	80039e0 <UART_SetConfig+0x208>
 80039c8:	2300      	movs	r3, #0
 80039ca:	77fb      	strb	r3, [r7, #31]
 80039cc:	e00d      	b.n	80039ea <UART_SetConfig+0x212>
 80039ce:	2302      	movs	r3, #2
 80039d0:	77fb      	strb	r3, [r7, #31]
 80039d2:	e00a      	b.n	80039ea <UART_SetConfig+0x212>
 80039d4:	2304      	movs	r3, #4
 80039d6:	77fb      	strb	r3, [r7, #31]
 80039d8:	e007      	b.n	80039ea <UART_SetConfig+0x212>
 80039da:	2308      	movs	r3, #8
 80039dc:	77fb      	strb	r3, [r7, #31]
 80039de:	e004      	b.n	80039ea <UART_SetConfig+0x212>
 80039e0:	2310      	movs	r3, #16
 80039e2:	77fb      	strb	r3, [r7, #31]
 80039e4:	e001      	b.n	80039ea <UART_SetConfig+0x212>
 80039e6:	2310      	movs	r3, #16
 80039e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f2:	d16d      	bne.n	8003ad0 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80039f4:	7ffb      	ldrb	r3, [r7, #31]
 80039f6:	2b08      	cmp	r3, #8
 80039f8:	d827      	bhi.n	8003a4a <UART_SetConfig+0x272>
 80039fa:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x228>)
 80039fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7ff f8a2 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e013      	b.n	8003a54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7ff f8c0 	bl	8002bb0 <HAL_RCC_GetPCLK2Freq>
 8003a30:	61b8      	str	r0, [r7, #24]
        break;
 8003a32:	e00f      	b.n	8003a54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b25      	ldr	r3, [pc, #148]	; (8003acc <UART_SetConfig+0x2f4>)
 8003a36:	61bb      	str	r3, [r7, #24]
        break;
 8003a38:	e00c      	b.n	8003a54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7ff f821 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61b8      	str	r0, [r7, #24]
        break;
 8003a40:	e008      	b.n	8003a54 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	61bb      	str	r3, [r7, #24]
        break;
 8003a48:	e004      	b.n	8003a54 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	77bb      	strb	r3, [r7, #30]
        break;
 8003a52:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 8086 	beq.w	8003b68 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	005a      	lsls	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	441a      	add	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b0f      	cmp	r3, #15
 8003a78:	d916      	bls.n	8003aa8 <UART_SetConfig+0x2d0>
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a80:	d212      	bcs.n	8003aa8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f023 030f 	bic.w	r3, r3, #15
 8003a8a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f003 0307 	and.w	r3, r3, #7
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	89fb      	ldrh	r3, [r7, #14]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	89fa      	ldrh	r2, [r7, #14]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	e05f      	b.n	8003b68 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	77bb      	strb	r3, [r7, #30]
 8003aac:	e05c      	b.n	8003b68 <UART_SetConfig+0x390>
 8003aae:	bf00      	nop
 8003ab0:	efff69f3 	.word	0xefff69f3
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40004400 	.word	0x40004400
 8003ac0:	40004800 	.word	0x40004800
 8003ac4:	40004c00 	.word	0x40004c00
 8003ac8:	40005000 	.word	0x40005000
 8003acc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ad0:	7ffb      	ldrb	r3, [r7, #31]
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d827      	bhi.n	8003b26 <UART_SetConfig+0x34e>
 8003ad6:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <UART_SetConfig+0x304>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b01 	.word	0x08003b01
 8003ae0:	08003b09 	.word	0x08003b09
 8003ae4:	08003b11 	.word	0x08003b11
 8003ae8:	08003b27 	.word	0x08003b27
 8003aec:	08003b17 	.word	0x08003b17
 8003af0:	08003b27 	.word	0x08003b27
 8003af4:	08003b27 	.word	0x08003b27
 8003af8:	08003b27 	.word	0x08003b27
 8003afc:	08003b1f 	.word	0x08003b1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b00:	f7ff f834 	bl	8002b6c <HAL_RCC_GetPCLK1Freq>
 8003b04:	61b8      	str	r0, [r7, #24]
        break;
 8003b06:	e013      	b.n	8003b30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b08:	f7ff f852 	bl	8002bb0 <HAL_RCC_GetPCLK2Freq>
 8003b0c:	61b8      	str	r0, [r7, #24]
        break;
 8003b0e:	e00f      	b.n	8003b30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b10:	4b1b      	ldr	r3, [pc, #108]	; (8003b80 <UART_SetConfig+0x3a8>)
 8003b12:	61bb      	str	r3, [r7, #24]
        break;
 8003b14:	e00c      	b.n	8003b30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b16:	f7fe ffb3 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 8003b1a:	61b8      	str	r0, [r7, #24]
        break;
 8003b1c:	e008      	b.n	8003b30 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b22:	61bb      	str	r3, [r7, #24]
        break;
 8003b24:	e004      	b.n	8003b30 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b2e:	bf00      	nop
    }

    if (pclk != 0U)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d018      	beq.n	8003b68 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	085a      	lsrs	r2, r3, #1
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	441a      	add	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	d908      	bls.n	8003b64 <UART_SetConfig+0x38c>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b58:	d204      	bcs.n	8003b64 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	60da      	str	r2, [r3, #12]
 8003b62:	e001      	b.n	8003b68 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b74:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3720      	adds	r7, #32
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	007a1200 	.word	0x007a1200

08003b84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d00a      	beq.n	8003bae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00a      	beq.n	8003bf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00a      	beq.n	8003c14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	f003 0310 	and.w	r3, r3, #16
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00a      	beq.n	8003c36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d01a      	beq.n	8003c9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c82:	d10a      	bne.n	8003c9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd8:	f7fd fba0 	bl	800141c <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0308 	and.w	r3, r3, #8
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d10e      	bne.n	8003d0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f82d 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e023      	b.n	8003d52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b04      	cmp	r3, #4
 8003d16:	d10e      	bne.n	8003d36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f817 	bl	8003d5a <UART_WaitOnFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e00d      	b.n	8003d52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2220      	movs	r2, #32
 8003d3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d50:	2300      	movs	r3, #0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b09c      	sub	sp, #112	; 0x70
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	603b      	str	r3, [r7, #0]
 8003d66:	4613      	mov	r3, r2
 8003d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d6a:	e0a5      	b.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	f000 80a1 	beq.w	8003eb8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7fd fb51 	bl	800141c <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x32>
 8003d86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d13e      	bne.n	8003e0a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003da0:	667b      	str	r3, [r7, #100]	; 0x64
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	461a      	mov	r2, r3
 8003da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003daa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003db0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003db2:	e841 2300 	strex	r3, r2, [r1]
 8003db6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1e6      	bne.n	8003d8c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc8:	e853 3f00 	ldrex	r3, [r3]
 8003dcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	f023 0301 	bic.w	r3, r3, #1
 8003dd4:	663b      	str	r3, [r7, #96]	; 0x60
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	3308      	adds	r3, #8
 8003ddc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dde:	64ba      	str	r2, [r7, #72]	; 0x48
 8003de0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003de6:	e841 2300 	strex	r3, r2, [r1]
 8003dea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d1e5      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e067      	b.n	8003eda <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d04f      	beq.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e26:	d147      	bne.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
 8003e52:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e58:	e841 2300 	strex	r3, r2, [r1]
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1e6      	bne.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	3308      	adds	r3, #8
 8003e6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	e853 3f00 	ldrex	r3, [r3]
 8003e72:	613b      	str	r3, [r7, #16]
   return(result);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f023 0301 	bic.w	r3, r3, #1
 8003e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	3308      	adds	r3, #8
 8003e82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e84:	623a      	str	r2, [r7, #32]
 8003e86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e88:	69f9      	ldr	r1, [r7, #28]
 8003e8a:	6a3a      	ldr	r2, [r7, #32]
 8003e8c:	e841 2300 	strex	r3, r2, [r1]
 8003e90:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1e5      	bne.n	8003e64 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e010      	b.n	8003eda <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	69da      	ldr	r2, [r3, #28]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	bf0c      	ite	eq
 8003ec8:	2301      	moveq	r3, #1
 8003eca:	2300      	movne	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	79fb      	ldrb	r3, [r7, #7]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	f43f af4a 	beq.w	8003d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3770      	adds	r7, #112	; 0x70
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b08f      	sub	sp, #60	; 0x3c
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eee:	2b21      	cmp	r3, #33	; 0x21
 8003ef0:	d14d      	bne.n	8003f8e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d132      	bne.n	8003f64 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	e853 3f00 	ldrex	r3, [r3]
 8003f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f24:	e841 2300 	strex	r3, r2, [r1]
 8003f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1e6      	bne.n	8003efe <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e6      	bne.n	8003f30 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f62:	e014      	b.n	8003f8e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003f8e:	bf00      	nop
 8003f90:	373c      	adds	r7, #60	; 0x3c
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b091      	sub	sp, #68	; 0x44
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fa6:	2b21      	cmp	r3, #33	; 0x21
 8003fa8:	d151      	bne.n	800404e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d132      	bne.n	800401c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	e853 3f00 	ldrex	r3, [r3]
 8003fc2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e6      	bne.n	8003fb6 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	e853 3f00 	ldrex	r3, [r3]
 8003ff4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400a:	69b9      	ldr	r1, [r7, #24]
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	e841 2300 	strex	r3, r2, [r1]
 8004012:	617b      	str	r3, [r7, #20]
   return(result);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1e6      	bne.n	8003fe8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800401a:	e018      	b.n	800404e <UART_TxISR_16BIT+0xb4>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004020:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004024:	881a      	ldrh	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402e:	b292      	uxth	r2, r2
 8004030:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004036:	1c9a      	adds	r2, r3, #2
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004042:	b29b      	uxth	r3, r3
 8004044:	3b01      	subs	r3, #1
 8004046:	b29a      	uxth	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800404e:	bf00      	nop
 8004050:	3744      	adds	r7, #68	; 0x44
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <__errno>:
 800405c:	4b01      	ldr	r3, [pc, #4]	; (8004064 <__errno+0x8>)
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	2000000c 	.word	0x2000000c

08004068 <__libc_init_array>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	4d0d      	ldr	r5, [pc, #52]	; (80040a0 <__libc_init_array+0x38>)
 800406c:	4c0d      	ldr	r4, [pc, #52]	; (80040a4 <__libc_init_array+0x3c>)
 800406e:	1b64      	subs	r4, r4, r5
 8004070:	10a4      	asrs	r4, r4, #2
 8004072:	2600      	movs	r6, #0
 8004074:	42a6      	cmp	r6, r4
 8004076:	d109      	bne.n	800408c <__libc_init_array+0x24>
 8004078:	4d0b      	ldr	r5, [pc, #44]	; (80040a8 <__libc_init_array+0x40>)
 800407a:	4c0c      	ldr	r4, [pc, #48]	; (80040ac <__libc_init_array+0x44>)
 800407c:	f002 fece 	bl	8006e1c <_init>
 8004080:	1b64      	subs	r4, r4, r5
 8004082:	10a4      	asrs	r4, r4, #2
 8004084:	2600      	movs	r6, #0
 8004086:	42a6      	cmp	r6, r4
 8004088:	d105      	bne.n	8004096 <__libc_init_array+0x2e>
 800408a:	bd70      	pop	{r4, r5, r6, pc}
 800408c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004090:	4798      	blx	r3
 8004092:	3601      	adds	r6, #1
 8004094:	e7ee      	b.n	8004074 <__libc_init_array+0xc>
 8004096:	f855 3b04 	ldr.w	r3, [r5], #4
 800409a:	4798      	blx	r3
 800409c:	3601      	adds	r6, #1
 800409e:	e7f2      	b.n	8004086 <__libc_init_array+0x1e>
 80040a0:	080072c4 	.word	0x080072c4
 80040a4:	080072c4 	.word	0x080072c4
 80040a8:	080072c4 	.word	0x080072c4
 80040ac:	080072c8 	.word	0x080072c8

080040b0 <memset>:
 80040b0:	4402      	add	r2, r0
 80040b2:	4603      	mov	r3, r0
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d100      	bne.n	80040ba <memset+0xa>
 80040b8:	4770      	bx	lr
 80040ba:	f803 1b01 	strb.w	r1, [r3], #1
 80040be:	e7f9      	b.n	80040b4 <memset+0x4>

080040c0 <__cvt>:
 80040c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040c4:	ec55 4b10 	vmov	r4, r5, d0
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	460e      	mov	r6, r1
 80040cc:	4619      	mov	r1, r3
 80040ce:	462b      	mov	r3, r5
 80040d0:	bfbb      	ittet	lt
 80040d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80040d6:	461d      	movlt	r5, r3
 80040d8:	2300      	movge	r3, #0
 80040da:	232d      	movlt	r3, #45	; 0x2d
 80040dc:	700b      	strb	r3, [r1, #0]
 80040de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80040e4:	4691      	mov	r9, r2
 80040e6:	f023 0820 	bic.w	r8, r3, #32
 80040ea:	bfbc      	itt	lt
 80040ec:	4622      	movlt	r2, r4
 80040ee:	4614      	movlt	r4, r2
 80040f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040f4:	d005      	beq.n	8004102 <__cvt+0x42>
 80040f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040fa:	d100      	bne.n	80040fe <__cvt+0x3e>
 80040fc:	3601      	adds	r6, #1
 80040fe:	2102      	movs	r1, #2
 8004100:	e000      	b.n	8004104 <__cvt+0x44>
 8004102:	2103      	movs	r1, #3
 8004104:	ab03      	add	r3, sp, #12
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	ab02      	add	r3, sp, #8
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	ec45 4b10 	vmov	d0, r4, r5
 8004110:	4653      	mov	r3, sl
 8004112:	4632      	mov	r2, r6
 8004114:	f000 fd04 	bl	8004b20 <_dtoa_r>
 8004118:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800411c:	4607      	mov	r7, r0
 800411e:	d102      	bne.n	8004126 <__cvt+0x66>
 8004120:	f019 0f01 	tst.w	r9, #1
 8004124:	d022      	beq.n	800416c <__cvt+0xac>
 8004126:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800412a:	eb07 0906 	add.w	r9, r7, r6
 800412e:	d110      	bne.n	8004152 <__cvt+0x92>
 8004130:	783b      	ldrb	r3, [r7, #0]
 8004132:	2b30      	cmp	r3, #48	; 0x30
 8004134:	d10a      	bne.n	800414c <__cvt+0x8c>
 8004136:	2200      	movs	r2, #0
 8004138:	2300      	movs	r3, #0
 800413a:	4620      	mov	r0, r4
 800413c:	4629      	mov	r1, r5
 800413e:	f7fc fccb 	bl	8000ad8 <__aeabi_dcmpeq>
 8004142:	b918      	cbnz	r0, 800414c <__cvt+0x8c>
 8004144:	f1c6 0601 	rsb	r6, r6, #1
 8004148:	f8ca 6000 	str.w	r6, [sl]
 800414c:	f8da 3000 	ldr.w	r3, [sl]
 8004150:	4499      	add	r9, r3
 8004152:	2200      	movs	r2, #0
 8004154:	2300      	movs	r3, #0
 8004156:	4620      	mov	r0, r4
 8004158:	4629      	mov	r1, r5
 800415a:	f7fc fcbd 	bl	8000ad8 <__aeabi_dcmpeq>
 800415e:	b108      	cbz	r0, 8004164 <__cvt+0xa4>
 8004160:	f8cd 900c 	str.w	r9, [sp, #12]
 8004164:	2230      	movs	r2, #48	; 0x30
 8004166:	9b03      	ldr	r3, [sp, #12]
 8004168:	454b      	cmp	r3, r9
 800416a:	d307      	bcc.n	800417c <__cvt+0xbc>
 800416c:	9b03      	ldr	r3, [sp, #12]
 800416e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004170:	1bdb      	subs	r3, r3, r7
 8004172:	4638      	mov	r0, r7
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	b004      	add	sp, #16
 8004178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800417c:	1c59      	adds	r1, r3, #1
 800417e:	9103      	str	r1, [sp, #12]
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	e7f0      	b.n	8004166 <__cvt+0xa6>

08004184 <__exponent>:
 8004184:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004186:	4603      	mov	r3, r0
 8004188:	2900      	cmp	r1, #0
 800418a:	bfb8      	it	lt
 800418c:	4249      	neglt	r1, r1
 800418e:	f803 2b02 	strb.w	r2, [r3], #2
 8004192:	bfb4      	ite	lt
 8004194:	222d      	movlt	r2, #45	; 0x2d
 8004196:	222b      	movge	r2, #43	; 0x2b
 8004198:	2909      	cmp	r1, #9
 800419a:	7042      	strb	r2, [r0, #1]
 800419c:	dd2a      	ble.n	80041f4 <__exponent+0x70>
 800419e:	f10d 0407 	add.w	r4, sp, #7
 80041a2:	46a4      	mov	ip, r4
 80041a4:	270a      	movs	r7, #10
 80041a6:	46a6      	mov	lr, r4
 80041a8:	460a      	mov	r2, r1
 80041aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80041ae:	fb07 1516 	mls	r5, r7, r6, r1
 80041b2:	3530      	adds	r5, #48	; 0x30
 80041b4:	2a63      	cmp	r2, #99	; 0x63
 80041b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80041ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80041be:	4631      	mov	r1, r6
 80041c0:	dcf1      	bgt.n	80041a6 <__exponent+0x22>
 80041c2:	3130      	adds	r1, #48	; 0x30
 80041c4:	f1ae 0502 	sub.w	r5, lr, #2
 80041c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041cc:	1c44      	adds	r4, r0, #1
 80041ce:	4629      	mov	r1, r5
 80041d0:	4561      	cmp	r1, ip
 80041d2:	d30a      	bcc.n	80041ea <__exponent+0x66>
 80041d4:	f10d 0209 	add.w	r2, sp, #9
 80041d8:	eba2 020e 	sub.w	r2, r2, lr
 80041dc:	4565      	cmp	r5, ip
 80041de:	bf88      	it	hi
 80041e0:	2200      	movhi	r2, #0
 80041e2:	4413      	add	r3, r2
 80041e4:	1a18      	subs	r0, r3, r0
 80041e6:	b003      	add	sp, #12
 80041e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041f2:	e7ed      	b.n	80041d0 <__exponent+0x4c>
 80041f4:	2330      	movs	r3, #48	; 0x30
 80041f6:	3130      	adds	r1, #48	; 0x30
 80041f8:	7083      	strb	r3, [r0, #2]
 80041fa:	70c1      	strb	r1, [r0, #3]
 80041fc:	1d03      	adds	r3, r0, #4
 80041fe:	e7f1      	b.n	80041e4 <__exponent+0x60>

08004200 <_printf_float>:
 8004200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004204:	ed2d 8b02 	vpush	{d8}
 8004208:	b08d      	sub	sp, #52	; 0x34
 800420a:	460c      	mov	r4, r1
 800420c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004210:	4616      	mov	r6, r2
 8004212:	461f      	mov	r7, r3
 8004214:	4605      	mov	r5, r0
 8004216:	f001 fb65 	bl	80058e4 <_localeconv_r>
 800421a:	f8d0 a000 	ldr.w	sl, [r0]
 800421e:	4650      	mov	r0, sl
 8004220:	f7fb ffde 	bl	80001e0 <strlen>
 8004224:	2300      	movs	r3, #0
 8004226:	930a      	str	r3, [sp, #40]	; 0x28
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	9305      	str	r3, [sp, #20]
 800422c:	f8d8 3000 	ldr.w	r3, [r8]
 8004230:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004234:	3307      	adds	r3, #7
 8004236:	f023 0307 	bic.w	r3, r3, #7
 800423a:	f103 0208 	add.w	r2, r3, #8
 800423e:	f8c8 2000 	str.w	r2, [r8]
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800424a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800424e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004252:	9307      	str	r3, [sp, #28]
 8004254:	f8cd 8018 	str.w	r8, [sp, #24]
 8004258:	ee08 0a10 	vmov	s16, r0
 800425c:	4b9f      	ldr	r3, [pc, #636]	; (80044dc <_printf_float+0x2dc>)
 800425e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	f7fc fc69 	bl	8000b3c <__aeabi_dcmpun>
 800426a:	bb88      	cbnz	r0, 80042d0 <_printf_float+0xd0>
 800426c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004270:	4b9a      	ldr	r3, [pc, #616]	; (80044dc <_printf_float+0x2dc>)
 8004272:	f04f 32ff 	mov.w	r2, #4294967295
 8004276:	f7fc fc43 	bl	8000b00 <__aeabi_dcmple>
 800427a:	bb48      	cbnz	r0, 80042d0 <_printf_float+0xd0>
 800427c:	2200      	movs	r2, #0
 800427e:	2300      	movs	r3, #0
 8004280:	4640      	mov	r0, r8
 8004282:	4649      	mov	r1, r9
 8004284:	f7fc fc32 	bl	8000aec <__aeabi_dcmplt>
 8004288:	b110      	cbz	r0, 8004290 <_printf_float+0x90>
 800428a:	232d      	movs	r3, #45	; 0x2d
 800428c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004290:	4b93      	ldr	r3, [pc, #588]	; (80044e0 <_printf_float+0x2e0>)
 8004292:	4894      	ldr	r0, [pc, #592]	; (80044e4 <_printf_float+0x2e4>)
 8004294:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004298:	bf94      	ite	ls
 800429a:	4698      	movls	r8, r3
 800429c:	4680      	movhi	r8, r0
 800429e:	2303      	movs	r3, #3
 80042a0:	6123      	str	r3, [r4, #16]
 80042a2:	9b05      	ldr	r3, [sp, #20]
 80042a4:	f023 0204 	bic.w	r2, r3, #4
 80042a8:	6022      	str	r2, [r4, #0]
 80042aa:	f04f 0900 	mov.w	r9, #0
 80042ae:	9700      	str	r7, [sp, #0]
 80042b0:	4633      	mov	r3, r6
 80042b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80042b4:	4621      	mov	r1, r4
 80042b6:	4628      	mov	r0, r5
 80042b8:	f000 f9d8 	bl	800466c <_printf_common>
 80042bc:	3001      	adds	r0, #1
 80042be:	f040 8090 	bne.w	80043e2 <_printf_float+0x1e2>
 80042c2:	f04f 30ff 	mov.w	r0, #4294967295
 80042c6:	b00d      	add	sp, #52	; 0x34
 80042c8:	ecbd 8b02 	vpop	{d8}
 80042cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042d0:	4642      	mov	r2, r8
 80042d2:	464b      	mov	r3, r9
 80042d4:	4640      	mov	r0, r8
 80042d6:	4649      	mov	r1, r9
 80042d8:	f7fc fc30 	bl	8000b3c <__aeabi_dcmpun>
 80042dc:	b140      	cbz	r0, 80042f0 <_printf_float+0xf0>
 80042de:	464b      	mov	r3, r9
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bfbc      	itt	lt
 80042e4:	232d      	movlt	r3, #45	; 0x2d
 80042e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042ea:	487f      	ldr	r0, [pc, #508]	; (80044e8 <_printf_float+0x2e8>)
 80042ec:	4b7f      	ldr	r3, [pc, #508]	; (80044ec <_printf_float+0x2ec>)
 80042ee:	e7d1      	b.n	8004294 <_printf_float+0x94>
 80042f0:	6863      	ldr	r3, [r4, #4]
 80042f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80042f6:	9206      	str	r2, [sp, #24]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	d13f      	bne.n	800437c <_printf_float+0x17c>
 80042fc:	2306      	movs	r3, #6
 80042fe:	6063      	str	r3, [r4, #4]
 8004300:	9b05      	ldr	r3, [sp, #20]
 8004302:	6861      	ldr	r1, [r4, #4]
 8004304:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004308:	2300      	movs	r3, #0
 800430a:	9303      	str	r3, [sp, #12]
 800430c:	ab0a      	add	r3, sp, #40	; 0x28
 800430e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004312:	ab09      	add	r3, sp, #36	; 0x24
 8004314:	ec49 8b10 	vmov	d0, r8, r9
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	6022      	str	r2, [r4, #0]
 800431c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004320:	4628      	mov	r0, r5
 8004322:	f7ff fecd 	bl	80040c0 <__cvt>
 8004326:	9b06      	ldr	r3, [sp, #24]
 8004328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800432a:	2b47      	cmp	r3, #71	; 0x47
 800432c:	4680      	mov	r8, r0
 800432e:	d108      	bne.n	8004342 <_printf_float+0x142>
 8004330:	1cc8      	adds	r0, r1, #3
 8004332:	db02      	blt.n	800433a <_printf_float+0x13a>
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	4299      	cmp	r1, r3
 8004338:	dd41      	ble.n	80043be <_printf_float+0x1be>
 800433a:	f1ab 0b02 	sub.w	fp, fp, #2
 800433e:	fa5f fb8b 	uxtb.w	fp, fp
 8004342:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004346:	d820      	bhi.n	800438a <_printf_float+0x18a>
 8004348:	3901      	subs	r1, #1
 800434a:	465a      	mov	r2, fp
 800434c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004350:	9109      	str	r1, [sp, #36]	; 0x24
 8004352:	f7ff ff17 	bl	8004184 <__exponent>
 8004356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004358:	1813      	adds	r3, r2, r0
 800435a:	2a01      	cmp	r2, #1
 800435c:	4681      	mov	r9, r0
 800435e:	6123      	str	r3, [r4, #16]
 8004360:	dc02      	bgt.n	8004368 <_printf_float+0x168>
 8004362:	6822      	ldr	r2, [r4, #0]
 8004364:	07d2      	lsls	r2, r2, #31
 8004366:	d501      	bpl.n	800436c <_printf_float+0x16c>
 8004368:	3301      	adds	r3, #1
 800436a:	6123      	str	r3, [r4, #16]
 800436c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004370:	2b00      	cmp	r3, #0
 8004372:	d09c      	beq.n	80042ae <_printf_float+0xae>
 8004374:	232d      	movs	r3, #45	; 0x2d
 8004376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800437a:	e798      	b.n	80042ae <_printf_float+0xae>
 800437c:	9a06      	ldr	r2, [sp, #24]
 800437e:	2a47      	cmp	r2, #71	; 0x47
 8004380:	d1be      	bne.n	8004300 <_printf_float+0x100>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1bc      	bne.n	8004300 <_printf_float+0x100>
 8004386:	2301      	movs	r3, #1
 8004388:	e7b9      	b.n	80042fe <_printf_float+0xfe>
 800438a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800438e:	d118      	bne.n	80043c2 <_printf_float+0x1c2>
 8004390:	2900      	cmp	r1, #0
 8004392:	6863      	ldr	r3, [r4, #4]
 8004394:	dd0b      	ble.n	80043ae <_printf_float+0x1ae>
 8004396:	6121      	str	r1, [r4, #16]
 8004398:	b913      	cbnz	r3, 80043a0 <_printf_float+0x1a0>
 800439a:	6822      	ldr	r2, [r4, #0]
 800439c:	07d0      	lsls	r0, r2, #31
 800439e:	d502      	bpl.n	80043a6 <_printf_float+0x1a6>
 80043a0:	3301      	adds	r3, #1
 80043a2:	440b      	add	r3, r1
 80043a4:	6123      	str	r3, [r4, #16]
 80043a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80043a8:	f04f 0900 	mov.w	r9, #0
 80043ac:	e7de      	b.n	800436c <_printf_float+0x16c>
 80043ae:	b913      	cbnz	r3, 80043b6 <_printf_float+0x1b6>
 80043b0:	6822      	ldr	r2, [r4, #0]
 80043b2:	07d2      	lsls	r2, r2, #31
 80043b4:	d501      	bpl.n	80043ba <_printf_float+0x1ba>
 80043b6:	3302      	adds	r3, #2
 80043b8:	e7f4      	b.n	80043a4 <_printf_float+0x1a4>
 80043ba:	2301      	movs	r3, #1
 80043bc:	e7f2      	b.n	80043a4 <_printf_float+0x1a4>
 80043be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80043c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c4:	4299      	cmp	r1, r3
 80043c6:	db05      	blt.n	80043d4 <_printf_float+0x1d4>
 80043c8:	6823      	ldr	r3, [r4, #0]
 80043ca:	6121      	str	r1, [r4, #16]
 80043cc:	07d8      	lsls	r0, r3, #31
 80043ce:	d5ea      	bpl.n	80043a6 <_printf_float+0x1a6>
 80043d0:	1c4b      	adds	r3, r1, #1
 80043d2:	e7e7      	b.n	80043a4 <_printf_float+0x1a4>
 80043d4:	2900      	cmp	r1, #0
 80043d6:	bfd4      	ite	le
 80043d8:	f1c1 0202 	rsble	r2, r1, #2
 80043dc:	2201      	movgt	r2, #1
 80043de:	4413      	add	r3, r2
 80043e0:	e7e0      	b.n	80043a4 <_printf_float+0x1a4>
 80043e2:	6823      	ldr	r3, [r4, #0]
 80043e4:	055a      	lsls	r2, r3, #21
 80043e6:	d407      	bmi.n	80043f8 <_printf_float+0x1f8>
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	4642      	mov	r2, r8
 80043ec:	4631      	mov	r1, r6
 80043ee:	4628      	mov	r0, r5
 80043f0:	47b8      	blx	r7
 80043f2:	3001      	adds	r0, #1
 80043f4:	d12c      	bne.n	8004450 <_printf_float+0x250>
 80043f6:	e764      	b.n	80042c2 <_printf_float+0xc2>
 80043f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043fc:	f240 80e0 	bls.w	80045c0 <_printf_float+0x3c0>
 8004400:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004404:	2200      	movs	r2, #0
 8004406:	2300      	movs	r3, #0
 8004408:	f7fc fb66 	bl	8000ad8 <__aeabi_dcmpeq>
 800440c:	2800      	cmp	r0, #0
 800440e:	d034      	beq.n	800447a <_printf_float+0x27a>
 8004410:	4a37      	ldr	r2, [pc, #220]	; (80044f0 <_printf_float+0x2f0>)
 8004412:	2301      	movs	r3, #1
 8004414:	4631      	mov	r1, r6
 8004416:	4628      	mov	r0, r5
 8004418:	47b8      	blx	r7
 800441a:	3001      	adds	r0, #1
 800441c:	f43f af51 	beq.w	80042c2 <_printf_float+0xc2>
 8004420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004424:	429a      	cmp	r2, r3
 8004426:	db02      	blt.n	800442e <_printf_float+0x22e>
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	07d8      	lsls	r0, r3, #31
 800442c:	d510      	bpl.n	8004450 <_printf_float+0x250>
 800442e:	ee18 3a10 	vmov	r3, s16
 8004432:	4652      	mov	r2, sl
 8004434:	4631      	mov	r1, r6
 8004436:	4628      	mov	r0, r5
 8004438:	47b8      	blx	r7
 800443a:	3001      	adds	r0, #1
 800443c:	f43f af41 	beq.w	80042c2 <_printf_float+0xc2>
 8004440:	f04f 0800 	mov.w	r8, #0
 8004444:	f104 091a 	add.w	r9, r4, #26
 8004448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800444a:	3b01      	subs	r3, #1
 800444c:	4543      	cmp	r3, r8
 800444e:	dc09      	bgt.n	8004464 <_printf_float+0x264>
 8004450:	6823      	ldr	r3, [r4, #0]
 8004452:	079b      	lsls	r3, r3, #30
 8004454:	f100 8105 	bmi.w	8004662 <_printf_float+0x462>
 8004458:	68e0      	ldr	r0, [r4, #12]
 800445a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800445c:	4298      	cmp	r0, r3
 800445e:	bfb8      	it	lt
 8004460:	4618      	movlt	r0, r3
 8004462:	e730      	b.n	80042c6 <_printf_float+0xc6>
 8004464:	2301      	movs	r3, #1
 8004466:	464a      	mov	r2, r9
 8004468:	4631      	mov	r1, r6
 800446a:	4628      	mov	r0, r5
 800446c:	47b8      	blx	r7
 800446e:	3001      	adds	r0, #1
 8004470:	f43f af27 	beq.w	80042c2 <_printf_float+0xc2>
 8004474:	f108 0801 	add.w	r8, r8, #1
 8004478:	e7e6      	b.n	8004448 <_printf_float+0x248>
 800447a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	dc39      	bgt.n	80044f4 <_printf_float+0x2f4>
 8004480:	4a1b      	ldr	r2, [pc, #108]	; (80044f0 <_printf_float+0x2f0>)
 8004482:	2301      	movs	r3, #1
 8004484:	4631      	mov	r1, r6
 8004486:	4628      	mov	r0, r5
 8004488:	47b8      	blx	r7
 800448a:	3001      	adds	r0, #1
 800448c:	f43f af19 	beq.w	80042c2 <_printf_float+0xc2>
 8004490:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004494:	4313      	orrs	r3, r2
 8004496:	d102      	bne.n	800449e <_printf_float+0x29e>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	07d9      	lsls	r1, r3, #31
 800449c:	d5d8      	bpl.n	8004450 <_printf_float+0x250>
 800449e:	ee18 3a10 	vmov	r3, s16
 80044a2:	4652      	mov	r2, sl
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f af09 	beq.w	80042c2 <_printf_float+0xc2>
 80044b0:	f04f 0900 	mov.w	r9, #0
 80044b4:	f104 0a1a 	add.w	sl, r4, #26
 80044b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ba:	425b      	negs	r3, r3
 80044bc:	454b      	cmp	r3, r9
 80044be:	dc01      	bgt.n	80044c4 <_printf_float+0x2c4>
 80044c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044c2:	e792      	b.n	80043ea <_printf_float+0x1ea>
 80044c4:	2301      	movs	r3, #1
 80044c6:	4652      	mov	r2, sl
 80044c8:	4631      	mov	r1, r6
 80044ca:	4628      	mov	r0, r5
 80044cc:	47b8      	blx	r7
 80044ce:	3001      	adds	r0, #1
 80044d0:	f43f aef7 	beq.w	80042c2 <_printf_float+0xc2>
 80044d4:	f109 0901 	add.w	r9, r9, #1
 80044d8:	e7ee      	b.n	80044b8 <_printf_float+0x2b8>
 80044da:	bf00      	nop
 80044dc:	7fefffff 	.word	0x7fefffff
 80044e0:	08006ee8 	.word	0x08006ee8
 80044e4:	08006eec 	.word	0x08006eec
 80044e8:	08006ef4 	.word	0x08006ef4
 80044ec:	08006ef0 	.word	0x08006ef0
 80044f0:	08006ef8 	.word	0x08006ef8
 80044f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044f8:	429a      	cmp	r2, r3
 80044fa:	bfa8      	it	ge
 80044fc:	461a      	movge	r2, r3
 80044fe:	2a00      	cmp	r2, #0
 8004500:	4691      	mov	r9, r2
 8004502:	dc37      	bgt.n	8004574 <_printf_float+0x374>
 8004504:	f04f 0b00 	mov.w	fp, #0
 8004508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800450c:	f104 021a 	add.w	r2, r4, #26
 8004510:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004512:	9305      	str	r3, [sp, #20]
 8004514:	eba3 0309 	sub.w	r3, r3, r9
 8004518:	455b      	cmp	r3, fp
 800451a:	dc33      	bgt.n	8004584 <_printf_float+0x384>
 800451c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004520:	429a      	cmp	r2, r3
 8004522:	db3b      	blt.n	800459c <_printf_float+0x39c>
 8004524:	6823      	ldr	r3, [r4, #0]
 8004526:	07da      	lsls	r2, r3, #31
 8004528:	d438      	bmi.n	800459c <_printf_float+0x39c>
 800452a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800452c:	9b05      	ldr	r3, [sp, #20]
 800452e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	eba2 0901 	sub.w	r9, r2, r1
 8004536:	4599      	cmp	r9, r3
 8004538:	bfa8      	it	ge
 800453a:	4699      	movge	r9, r3
 800453c:	f1b9 0f00 	cmp.w	r9, #0
 8004540:	dc35      	bgt.n	80045ae <_printf_float+0x3ae>
 8004542:	f04f 0800 	mov.w	r8, #0
 8004546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800454a:	f104 0a1a 	add.w	sl, r4, #26
 800454e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004552:	1a9b      	subs	r3, r3, r2
 8004554:	eba3 0309 	sub.w	r3, r3, r9
 8004558:	4543      	cmp	r3, r8
 800455a:	f77f af79 	ble.w	8004450 <_printf_float+0x250>
 800455e:	2301      	movs	r3, #1
 8004560:	4652      	mov	r2, sl
 8004562:	4631      	mov	r1, r6
 8004564:	4628      	mov	r0, r5
 8004566:	47b8      	blx	r7
 8004568:	3001      	adds	r0, #1
 800456a:	f43f aeaa 	beq.w	80042c2 <_printf_float+0xc2>
 800456e:	f108 0801 	add.w	r8, r8, #1
 8004572:	e7ec      	b.n	800454e <_printf_float+0x34e>
 8004574:	4613      	mov	r3, r2
 8004576:	4631      	mov	r1, r6
 8004578:	4642      	mov	r2, r8
 800457a:	4628      	mov	r0, r5
 800457c:	47b8      	blx	r7
 800457e:	3001      	adds	r0, #1
 8004580:	d1c0      	bne.n	8004504 <_printf_float+0x304>
 8004582:	e69e      	b.n	80042c2 <_printf_float+0xc2>
 8004584:	2301      	movs	r3, #1
 8004586:	4631      	mov	r1, r6
 8004588:	4628      	mov	r0, r5
 800458a:	9205      	str	r2, [sp, #20]
 800458c:	47b8      	blx	r7
 800458e:	3001      	adds	r0, #1
 8004590:	f43f ae97 	beq.w	80042c2 <_printf_float+0xc2>
 8004594:	9a05      	ldr	r2, [sp, #20]
 8004596:	f10b 0b01 	add.w	fp, fp, #1
 800459a:	e7b9      	b.n	8004510 <_printf_float+0x310>
 800459c:	ee18 3a10 	vmov	r3, s16
 80045a0:	4652      	mov	r2, sl
 80045a2:	4631      	mov	r1, r6
 80045a4:	4628      	mov	r0, r5
 80045a6:	47b8      	blx	r7
 80045a8:	3001      	adds	r0, #1
 80045aa:	d1be      	bne.n	800452a <_printf_float+0x32a>
 80045ac:	e689      	b.n	80042c2 <_printf_float+0xc2>
 80045ae:	9a05      	ldr	r2, [sp, #20]
 80045b0:	464b      	mov	r3, r9
 80045b2:	4442      	add	r2, r8
 80045b4:	4631      	mov	r1, r6
 80045b6:	4628      	mov	r0, r5
 80045b8:	47b8      	blx	r7
 80045ba:	3001      	adds	r0, #1
 80045bc:	d1c1      	bne.n	8004542 <_printf_float+0x342>
 80045be:	e680      	b.n	80042c2 <_printf_float+0xc2>
 80045c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045c2:	2a01      	cmp	r2, #1
 80045c4:	dc01      	bgt.n	80045ca <_printf_float+0x3ca>
 80045c6:	07db      	lsls	r3, r3, #31
 80045c8:	d538      	bpl.n	800463c <_printf_float+0x43c>
 80045ca:	2301      	movs	r3, #1
 80045cc:	4642      	mov	r2, r8
 80045ce:	4631      	mov	r1, r6
 80045d0:	4628      	mov	r0, r5
 80045d2:	47b8      	blx	r7
 80045d4:	3001      	adds	r0, #1
 80045d6:	f43f ae74 	beq.w	80042c2 <_printf_float+0xc2>
 80045da:	ee18 3a10 	vmov	r3, s16
 80045de:	4652      	mov	r2, sl
 80045e0:	4631      	mov	r1, r6
 80045e2:	4628      	mov	r0, r5
 80045e4:	47b8      	blx	r7
 80045e6:	3001      	adds	r0, #1
 80045e8:	f43f ae6b 	beq.w	80042c2 <_printf_float+0xc2>
 80045ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045f0:	2200      	movs	r2, #0
 80045f2:	2300      	movs	r3, #0
 80045f4:	f7fc fa70 	bl	8000ad8 <__aeabi_dcmpeq>
 80045f8:	b9d8      	cbnz	r0, 8004632 <_printf_float+0x432>
 80045fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045fc:	f108 0201 	add.w	r2, r8, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	4631      	mov	r1, r6
 8004604:	4628      	mov	r0, r5
 8004606:	47b8      	blx	r7
 8004608:	3001      	adds	r0, #1
 800460a:	d10e      	bne.n	800462a <_printf_float+0x42a>
 800460c:	e659      	b.n	80042c2 <_printf_float+0xc2>
 800460e:	2301      	movs	r3, #1
 8004610:	4652      	mov	r2, sl
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f ae52 	beq.w	80042c2 <_printf_float+0xc2>
 800461e:	f108 0801 	add.w	r8, r8, #1
 8004622:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004624:	3b01      	subs	r3, #1
 8004626:	4543      	cmp	r3, r8
 8004628:	dcf1      	bgt.n	800460e <_printf_float+0x40e>
 800462a:	464b      	mov	r3, r9
 800462c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004630:	e6dc      	b.n	80043ec <_printf_float+0x1ec>
 8004632:	f04f 0800 	mov.w	r8, #0
 8004636:	f104 0a1a 	add.w	sl, r4, #26
 800463a:	e7f2      	b.n	8004622 <_printf_float+0x422>
 800463c:	2301      	movs	r3, #1
 800463e:	4642      	mov	r2, r8
 8004640:	e7df      	b.n	8004602 <_printf_float+0x402>
 8004642:	2301      	movs	r3, #1
 8004644:	464a      	mov	r2, r9
 8004646:	4631      	mov	r1, r6
 8004648:	4628      	mov	r0, r5
 800464a:	47b8      	blx	r7
 800464c:	3001      	adds	r0, #1
 800464e:	f43f ae38 	beq.w	80042c2 <_printf_float+0xc2>
 8004652:	f108 0801 	add.w	r8, r8, #1
 8004656:	68e3      	ldr	r3, [r4, #12]
 8004658:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800465a:	1a5b      	subs	r3, r3, r1
 800465c:	4543      	cmp	r3, r8
 800465e:	dcf0      	bgt.n	8004642 <_printf_float+0x442>
 8004660:	e6fa      	b.n	8004458 <_printf_float+0x258>
 8004662:	f04f 0800 	mov.w	r8, #0
 8004666:	f104 0919 	add.w	r9, r4, #25
 800466a:	e7f4      	b.n	8004656 <_printf_float+0x456>

0800466c <_printf_common>:
 800466c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004670:	4616      	mov	r6, r2
 8004672:	4699      	mov	r9, r3
 8004674:	688a      	ldr	r2, [r1, #8]
 8004676:	690b      	ldr	r3, [r1, #16]
 8004678:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800467c:	4293      	cmp	r3, r2
 800467e:	bfb8      	it	lt
 8004680:	4613      	movlt	r3, r2
 8004682:	6033      	str	r3, [r6, #0]
 8004684:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004688:	4607      	mov	r7, r0
 800468a:	460c      	mov	r4, r1
 800468c:	b10a      	cbz	r2, 8004692 <_printf_common+0x26>
 800468e:	3301      	adds	r3, #1
 8004690:	6033      	str	r3, [r6, #0]
 8004692:	6823      	ldr	r3, [r4, #0]
 8004694:	0699      	lsls	r1, r3, #26
 8004696:	bf42      	ittt	mi
 8004698:	6833      	ldrmi	r3, [r6, #0]
 800469a:	3302      	addmi	r3, #2
 800469c:	6033      	strmi	r3, [r6, #0]
 800469e:	6825      	ldr	r5, [r4, #0]
 80046a0:	f015 0506 	ands.w	r5, r5, #6
 80046a4:	d106      	bne.n	80046b4 <_printf_common+0x48>
 80046a6:	f104 0a19 	add.w	sl, r4, #25
 80046aa:	68e3      	ldr	r3, [r4, #12]
 80046ac:	6832      	ldr	r2, [r6, #0]
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	42ab      	cmp	r3, r5
 80046b2:	dc26      	bgt.n	8004702 <_printf_common+0x96>
 80046b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046b8:	1e13      	subs	r3, r2, #0
 80046ba:	6822      	ldr	r2, [r4, #0]
 80046bc:	bf18      	it	ne
 80046be:	2301      	movne	r3, #1
 80046c0:	0692      	lsls	r2, r2, #26
 80046c2:	d42b      	bmi.n	800471c <_printf_common+0xb0>
 80046c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046c8:	4649      	mov	r1, r9
 80046ca:	4638      	mov	r0, r7
 80046cc:	47c0      	blx	r8
 80046ce:	3001      	adds	r0, #1
 80046d0:	d01e      	beq.n	8004710 <_printf_common+0xa4>
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	68e5      	ldr	r5, [r4, #12]
 80046d6:	6832      	ldr	r2, [r6, #0]
 80046d8:	f003 0306 	and.w	r3, r3, #6
 80046dc:	2b04      	cmp	r3, #4
 80046de:	bf08      	it	eq
 80046e0:	1aad      	subeq	r5, r5, r2
 80046e2:	68a3      	ldr	r3, [r4, #8]
 80046e4:	6922      	ldr	r2, [r4, #16]
 80046e6:	bf0c      	ite	eq
 80046e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046ec:	2500      	movne	r5, #0
 80046ee:	4293      	cmp	r3, r2
 80046f0:	bfc4      	itt	gt
 80046f2:	1a9b      	subgt	r3, r3, r2
 80046f4:	18ed      	addgt	r5, r5, r3
 80046f6:	2600      	movs	r6, #0
 80046f8:	341a      	adds	r4, #26
 80046fa:	42b5      	cmp	r5, r6
 80046fc:	d11a      	bne.n	8004734 <_printf_common+0xc8>
 80046fe:	2000      	movs	r0, #0
 8004700:	e008      	b.n	8004714 <_printf_common+0xa8>
 8004702:	2301      	movs	r3, #1
 8004704:	4652      	mov	r2, sl
 8004706:	4649      	mov	r1, r9
 8004708:	4638      	mov	r0, r7
 800470a:	47c0      	blx	r8
 800470c:	3001      	adds	r0, #1
 800470e:	d103      	bne.n	8004718 <_printf_common+0xac>
 8004710:	f04f 30ff 	mov.w	r0, #4294967295
 8004714:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004718:	3501      	adds	r5, #1
 800471a:	e7c6      	b.n	80046aa <_printf_common+0x3e>
 800471c:	18e1      	adds	r1, r4, r3
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	2030      	movs	r0, #48	; 0x30
 8004722:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004726:	4422      	add	r2, r4
 8004728:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800472c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004730:	3302      	adds	r3, #2
 8004732:	e7c7      	b.n	80046c4 <_printf_common+0x58>
 8004734:	2301      	movs	r3, #1
 8004736:	4622      	mov	r2, r4
 8004738:	4649      	mov	r1, r9
 800473a:	4638      	mov	r0, r7
 800473c:	47c0      	blx	r8
 800473e:	3001      	adds	r0, #1
 8004740:	d0e6      	beq.n	8004710 <_printf_common+0xa4>
 8004742:	3601      	adds	r6, #1
 8004744:	e7d9      	b.n	80046fa <_printf_common+0x8e>
	...

08004748 <_printf_i>:
 8004748:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800474c:	460c      	mov	r4, r1
 800474e:	4691      	mov	r9, r2
 8004750:	7e27      	ldrb	r7, [r4, #24]
 8004752:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004754:	2f78      	cmp	r7, #120	; 0x78
 8004756:	4680      	mov	r8, r0
 8004758:	469a      	mov	sl, r3
 800475a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800475e:	d807      	bhi.n	8004770 <_printf_i+0x28>
 8004760:	2f62      	cmp	r7, #98	; 0x62
 8004762:	d80a      	bhi.n	800477a <_printf_i+0x32>
 8004764:	2f00      	cmp	r7, #0
 8004766:	f000 80d8 	beq.w	800491a <_printf_i+0x1d2>
 800476a:	2f58      	cmp	r7, #88	; 0x58
 800476c:	f000 80a3 	beq.w	80048b6 <_printf_i+0x16e>
 8004770:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004774:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004778:	e03a      	b.n	80047f0 <_printf_i+0xa8>
 800477a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800477e:	2b15      	cmp	r3, #21
 8004780:	d8f6      	bhi.n	8004770 <_printf_i+0x28>
 8004782:	a001      	add	r0, pc, #4	; (adr r0, 8004788 <_printf_i+0x40>)
 8004784:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004788:	080047e1 	.word	0x080047e1
 800478c:	080047f5 	.word	0x080047f5
 8004790:	08004771 	.word	0x08004771
 8004794:	08004771 	.word	0x08004771
 8004798:	08004771 	.word	0x08004771
 800479c:	08004771 	.word	0x08004771
 80047a0:	080047f5 	.word	0x080047f5
 80047a4:	08004771 	.word	0x08004771
 80047a8:	08004771 	.word	0x08004771
 80047ac:	08004771 	.word	0x08004771
 80047b0:	08004771 	.word	0x08004771
 80047b4:	08004901 	.word	0x08004901
 80047b8:	08004825 	.word	0x08004825
 80047bc:	080048e3 	.word	0x080048e3
 80047c0:	08004771 	.word	0x08004771
 80047c4:	08004771 	.word	0x08004771
 80047c8:	08004923 	.word	0x08004923
 80047cc:	08004771 	.word	0x08004771
 80047d0:	08004825 	.word	0x08004825
 80047d4:	08004771 	.word	0x08004771
 80047d8:	08004771 	.word	0x08004771
 80047dc:	080048eb 	.word	0x080048eb
 80047e0:	680b      	ldr	r3, [r1, #0]
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	600a      	str	r2, [r1, #0]
 80047e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f0:	2301      	movs	r3, #1
 80047f2:	e0a3      	b.n	800493c <_printf_i+0x1f4>
 80047f4:	6825      	ldr	r5, [r4, #0]
 80047f6:	6808      	ldr	r0, [r1, #0]
 80047f8:	062e      	lsls	r6, r5, #24
 80047fa:	f100 0304 	add.w	r3, r0, #4
 80047fe:	d50a      	bpl.n	8004816 <_printf_i+0xce>
 8004800:	6805      	ldr	r5, [r0, #0]
 8004802:	600b      	str	r3, [r1, #0]
 8004804:	2d00      	cmp	r5, #0
 8004806:	da03      	bge.n	8004810 <_printf_i+0xc8>
 8004808:	232d      	movs	r3, #45	; 0x2d
 800480a:	426d      	negs	r5, r5
 800480c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004810:	485e      	ldr	r0, [pc, #376]	; (800498c <_printf_i+0x244>)
 8004812:	230a      	movs	r3, #10
 8004814:	e019      	b.n	800484a <_printf_i+0x102>
 8004816:	f015 0f40 	tst.w	r5, #64	; 0x40
 800481a:	6805      	ldr	r5, [r0, #0]
 800481c:	600b      	str	r3, [r1, #0]
 800481e:	bf18      	it	ne
 8004820:	b22d      	sxthne	r5, r5
 8004822:	e7ef      	b.n	8004804 <_printf_i+0xbc>
 8004824:	680b      	ldr	r3, [r1, #0]
 8004826:	6825      	ldr	r5, [r4, #0]
 8004828:	1d18      	adds	r0, r3, #4
 800482a:	6008      	str	r0, [r1, #0]
 800482c:	0628      	lsls	r0, r5, #24
 800482e:	d501      	bpl.n	8004834 <_printf_i+0xec>
 8004830:	681d      	ldr	r5, [r3, #0]
 8004832:	e002      	b.n	800483a <_printf_i+0xf2>
 8004834:	0669      	lsls	r1, r5, #25
 8004836:	d5fb      	bpl.n	8004830 <_printf_i+0xe8>
 8004838:	881d      	ldrh	r5, [r3, #0]
 800483a:	4854      	ldr	r0, [pc, #336]	; (800498c <_printf_i+0x244>)
 800483c:	2f6f      	cmp	r7, #111	; 0x6f
 800483e:	bf0c      	ite	eq
 8004840:	2308      	moveq	r3, #8
 8004842:	230a      	movne	r3, #10
 8004844:	2100      	movs	r1, #0
 8004846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484a:	6866      	ldr	r6, [r4, #4]
 800484c:	60a6      	str	r6, [r4, #8]
 800484e:	2e00      	cmp	r6, #0
 8004850:	bfa2      	ittt	ge
 8004852:	6821      	ldrge	r1, [r4, #0]
 8004854:	f021 0104 	bicge.w	r1, r1, #4
 8004858:	6021      	strge	r1, [r4, #0]
 800485a:	b90d      	cbnz	r5, 8004860 <_printf_i+0x118>
 800485c:	2e00      	cmp	r6, #0
 800485e:	d04d      	beq.n	80048fc <_printf_i+0x1b4>
 8004860:	4616      	mov	r6, r2
 8004862:	fbb5 f1f3 	udiv	r1, r5, r3
 8004866:	fb03 5711 	mls	r7, r3, r1, r5
 800486a:	5dc7      	ldrb	r7, [r0, r7]
 800486c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004870:	462f      	mov	r7, r5
 8004872:	42bb      	cmp	r3, r7
 8004874:	460d      	mov	r5, r1
 8004876:	d9f4      	bls.n	8004862 <_printf_i+0x11a>
 8004878:	2b08      	cmp	r3, #8
 800487a:	d10b      	bne.n	8004894 <_printf_i+0x14c>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	07df      	lsls	r7, r3, #31
 8004880:	d508      	bpl.n	8004894 <_printf_i+0x14c>
 8004882:	6923      	ldr	r3, [r4, #16]
 8004884:	6861      	ldr	r1, [r4, #4]
 8004886:	4299      	cmp	r1, r3
 8004888:	bfde      	ittt	le
 800488a:	2330      	movle	r3, #48	; 0x30
 800488c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004890:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004894:	1b92      	subs	r2, r2, r6
 8004896:	6122      	str	r2, [r4, #16]
 8004898:	f8cd a000 	str.w	sl, [sp]
 800489c:	464b      	mov	r3, r9
 800489e:	aa03      	add	r2, sp, #12
 80048a0:	4621      	mov	r1, r4
 80048a2:	4640      	mov	r0, r8
 80048a4:	f7ff fee2 	bl	800466c <_printf_common>
 80048a8:	3001      	adds	r0, #1
 80048aa:	d14c      	bne.n	8004946 <_printf_i+0x1fe>
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	b004      	add	sp, #16
 80048b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048b6:	4835      	ldr	r0, [pc, #212]	; (800498c <_printf_i+0x244>)
 80048b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048bc:	6823      	ldr	r3, [r4, #0]
 80048be:	680e      	ldr	r6, [r1, #0]
 80048c0:	061f      	lsls	r7, r3, #24
 80048c2:	f856 5b04 	ldr.w	r5, [r6], #4
 80048c6:	600e      	str	r6, [r1, #0]
 80048c8:	d514      	bpl.n	80048f4 <_printf_i+0x1ac>
 80048ca:	07d9      	lsls	r1, r3, #31
 80048cc:	bf44      	itt	mi
 80048ce:	f043 0320 	orrmi.w	r3, r3, #32
 80048d2:	6023      	strmi	r3, [r4, #0]
 80048d4:	b91d      	cbnz	r5, 80048de <_printf_i+0x196>
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	f023 0320 	bic.w	r3, r3, #32
 80048dc:	6023      	str	r3, [r4, #0]
 80048de:	2310      	movs	r3, #16
 80048e0:	e7b0      	b.n	8004844 <_printf_i+0xfc>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	f043 0320 	orr.w	r3, r3, #32
 80048e8:	6023      	str	r3, [r4, #0]
 80048ea:	2378      	movs	r3, #120	; 0x78
 80048ec:	4828      	ldr	r0, [pc, #160]	; (8004990 <_printf_i+0x248>)
 80048ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048f2:	e7e3      	b.n	80048bc <_printf_i+0x174>
 80048f4:	065e      	lsls	r6, r3, #25
 80048f6:	bf48      	it	mi
 80048f8:	b2ad      	uxthmi	r5, r5
 80048fa:	e7e6      	b.n	80048ca <_printf_i+0x182>
 80048fc:	4616      	mov	r6, r2
 80048fe:	e7bb      	b.n	8004878 <_printf_i+0x130>
 8004900:	680b      	ldr	r3, [r1, #0]
 8004902:	6826      	ldr	r6, [r4, #0]
 8004904:	6960      	ldr	r0, [r4, #20]
 8004906:	1d1d      	adds	r5, r3, #4
 8004908:	600d      	str	r5, [r1, #0]
 800490a:	0635      	lsls	r5, r6, #24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	d501      	bpl.n	8004914 <_printf_i+0x1cc>
 8004910:	6018      	str	r0, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0x1d2>
 8004914:	0671      	lsls	r1, r6, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0x1c8>
 8004918:	8018      	strh	r0, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	4616      	mov	r6, r2
 8004920:	e7ba      	b.n	8004898 <_printf_i+0x150>
 8004922:	680b      	ldr	r3, [r1, #0]
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	600a      	str	r2, [r1, #0]
 8004928:	681e      	ldr	r6, [r3, #0]
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	4630      	mov	r0, r6
 8004930:	f7fb fc5e 	bl	80001f0 <memchr>
 8004934:	b108      	cbz	r0, 800493a <_printf_i+0x1f2>
 8004936:	1b80      	subs	r0, r0, r6
 8004938:	6060      	str	r0, [r4, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004944:	e7a8      	b.n	8004898 <_printf_i+0x150>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	4632      	mov	r2, r6
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	47d0      	blx	sl
 8004950:	3001      	adds	r0, #1
 8004952:	d0ab      	beq.n	80048ac <_printf_i+0x164>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	079b      	lsls	r3, r3, #30
 8004958:	d413      	bmi.n	8004982 <_printf_i+0x23a>
 800495a:	68e0      	ldr	r0, [r4, #12]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	4298      	cmp	r0, r3
 8004960:	bfb8      	it	lt
 8004962:	4618      	movlt	r0, r3
 8004964:	e7a4      	b.n	80048b0 <_printf_i+0x168>
 8004966:	2301      	movs	r3, #1
 8004968:	4632      	mov	r2, r6
 800496a:	4649      	mov	r1, r9
 800496c:	4640      	mov	r0, r8
 800496e:	47d0      	blx	sl
 8004970:	3001      	adds	r0, #1
 8004972:	d09b      	beq.n	80048ac <_printf_i+0x164>
 8004974:	3501      	adds	r5, #1
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	9903      	ldr	r1, [sp, #12]
 800497a:	1a5b      	subs	r3, r3, r1
 800497c:	42ab      	cmp	r3, r5
 800497e:	dcf2      	bgt.n	8004966 <_printf_i+0x21e>
 8004980:	e7eb      	b.n	800495a <_printf_i+0x212>
 8004982:	2500      	movs	r5, #0
 8004984:	f104 0619 	add.w	r6, r4, #25
 8004988:	e7f5      	b.n	8004976 <_printf_i+0x22e>
 800498a:	bf00      	nop
 800498c:	08006efa 	.word	0x08006efa
 8004990:	08006f0b 	.word	0x08006f0b

08004994 <iprintf>:
 8004994:	b40f      	push	{r0, r1, r2, r3}
 8004996:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <iprintf+0x2c>)
 8004998:	b513      	push	{r0, r1, r4, lr}
 800499a:	681c      	ldr	r4, [r3, #0]
 800499c:	b124      	cbz	r4, 80049a8 <iprintf+0x14>
 800499e:	69a3      	ldr	r3, [r4, #24]
 80049a0:	b913      	cbnz	r3, 80049a8 <iprintf+0x14>
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 ff00 	bl	80057a8 <__sinit>
 80049a8:	ab05      	add	r3, sp, #20
 80049aa:	9a04      	ldr	r2, [sp, #16]
 80049ac:	68a1      	ldr	r1, [r4, #8]
 80049ae:	9301      	str	r3, [sp, #4]
 80049b0:	4620      	mov	r0, r4
 80049b2:	f001 fd73 	bl	800649c <_vfiprintf_r>
 80049b6:	b002      	add	sp, #8
 80049b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049bc:	b004      	add	sp, #16
 80049be:	4770      	bx	lr
 80049c0:	2000000c 	.word	0x2000000c

080049c4 <siprintf>:
 80049c4:	b40e      	push	{r1, r2, r3}
 80049c6:	b500      	push	{lr}
 80049c8:	b09c      	sub	sp, #112	; 0x70
 80049ca:	ab1d      	add	r3, sp, #116	; 0x74
 80049cc:	9002      	str	r0, [sp, #8]
 80049ce:	9006      	str	r0, [sp, #24]
 80049d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80049d4:	4809      	ldr	r0, [pc, #36]	; (80049fc <siprintf+0x38>)
 80049d6:	9107      	str	r1, [sp, #28]
 80049d8:	9104      	str	r1, [sp, #16]
 80049da:	4909      	ldr	r1, [pc, #36]	; (8004a00 <siprintf+0x3c>)
 80049dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80049e0:	9105      	str	r1, [sp, #20]
 80049e2:	6800      	ldr	r0, [r0, #0]
 80049e4:	9301      	str	r3, [sp, #4]
 80049e6:	a902      	add	r1, sp, #8
 80049e8:	f001 fc2e 	bl	8006248 <_svfiprintf_r>
 80049ec:	9b02      	ldr	r3, [sp, #8]
 80049ee:	2200      	movs	r2, #0
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	b01c      	add	sp, #112	; 0x70
 80049f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80049f8:	b003      	add	sp, #12
 80049fa:	4770      	bx	lr
 80049fc:	2000000c 	.word	0x2000000c
 8004a00:	ffff0208 	.word	0xffff0208

08004a04 <quorem>:
 8004a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a08:	6903      	ldr	r3, [r0, #16]
 8004a0a:	690c      	ldr	r4, [r1, #16]
 8004a0c:	42a3      	cmp	r3, r4
 8004a0e:	4607      	mov	r7, r0
 8004a10:	f2c0 8081 	blt.w	8004b16 <quorem+0x112>
 8004a14:	3c01      	subs	r4, #1
 8004a16:	f101 0814 	add.w	r8, r1, #20
 8004a1a:	f100 0514 	add.w	r5, r0, #20
 8004a1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a22:	9301      	str	r3, [sp, #4]
 8004a24:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a28:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a34:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a38:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a3c:	d331      	bcc.n	8004aa2 <quorem+0x9e>
 8004a3e:	f04f 0e00 	mov.w	lr, #0
 8004a42:	4640      	mov	r0, r8
 8004a44:	46ac      	mov	ip, r5
 8004a46:	46f2      	mov	sl, lr
 8004a48:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a4c:	b293      	uxth	r3, r2
 8004a4e:	fb06 e303 	mla	r3, r6, r3, lr
 8004a52:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	ebaa 0303 	sub.w	r3, sl, r3
 8004a5c:	0c12      	lsrs	r2, r2, #16
 8004a5e:	f8dc a000 	ldr.w	sl, [ip]
 8004a62:	fb06 e202 	mla	r2, r6, r2, lr
 8004a66:	fa13 f38a 	uxtah	r3, r3, sl
 8004a6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a6e:	fa1f fa82 	uxth.w	sl, r2
 8004a72:	f8dc 2000 	ldr.w	r2, [ip]
 8004a76:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004a7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a84:	4581      	cmp	r9, r0
 8004a86:	f84c 3b04 	str.w	r3, [ip], #4
 8004a8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a8e:	d2db      	bcs.n	8004a48 <quorem+0x44>
 8004a90:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a94:	b92b      	cbnz	r3, 8004aa2 <quorem+0x9e>
 8004a96:	9b01      	ldr	r3, [sp, #4]
 8004a98:	3b04      	subs	r3, #4
 8004a9a:	429d      	cmp	r5, r3
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	d32e      	bcc.n	8004afe <quorem+0xfa>
 8004aa0:	613c      	str	r4, [r7, #16]
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f001 f9ba 	bl	8005e1c <__mcmp>
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	db24      	blt.n	8004af6 <quorem+0xf2>
 8004aac:	3601      	adds	r6, #1
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f04f 0c00 	mov.w	ip, #0
 8004ab4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ab8:	f8d0 e000 	ldr.w	lr, [r0]
 8004abc:	b293      	uxth	r3, r2
 8004abe:	ebac 0303 	sub.w	r3, ip, r3
 8004ac2:	0c12      	lsrs	r2, r2, #16
 8004ac4:	fa13 f38e 	uxtah	r3, r3, lr
 8004ac8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004acc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ad6:	45c1      	cmp	r9, r8
 8004ad8:	f840 3b04 	str.w	r3, [r0], #4
 8004adc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004ae0:	d2e8      	bcs.n	8004ab4 <quorem+0xb0>
 8004ae2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ae6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004aea:	b922      	cbnz	r2, 8004af6 <quorem+0xf2>
 8004aec:	3b04      	subs	r3, #4
 8004aee:	429d      	cmp	r5, r3
 8004af0:	461a      	mov	r2, r3
 8004af2:	d30a      	bcc.n	8004b0a <quorem+0x106>
 8004af4:	613c      	str	r4, [r7, #16]
 8004af6:	4630      	mov	r0, r6
 8004af8:	b003      	add	sp, #12
 8004afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	3b04      	subs	r3, #4
 8004b02:	2a00      	cmp	r2, #0
 8004b04:	d1cc      	bne.n	8004aa0 <quorem+0x9c>
 8004b06:	3c01      	subs	r4, #1
 8004b08:	e7c7      	b.n	8004a9a <quorem+0x96>
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	3b04      	subs	r3, #4
 8004b0e:	2a00      	cmp	r2, #0
 8004b10:	d1f0      	bne.n	8004af4 <quorem+0xf0>
 8004b12:	3c01      	subs	r4, #1
 8004b14:	e7eb      	b.n	8004aee <quorem+0xea>
 8004b16:	2000      	movs	r0, #0
 8004b18:	e7ee      	b.n	8004af8 <quorem+0xf4>
 8004b1a:	0000      	movs	r0, r0
 8004b1c:	0000      	movs	r0, r0
	...

08004b20 <_dtoa_r>:
 8004b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b24:	ed2d 8b02 	vpush	{d8}
 8004b28:	ec57 6b10 	vmov	r6, r7, d0
 8004b2c:	b095      	sub	sp, #84	; 0x54
 8004b2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004b30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004b34:	9105      	str	r1, [sp, #20]
 8004b36:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	9209      	str	r2, [sp, #36]	; 0x24
 8004b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004b40:	b975      	cbnz	r5, 8004b60 <_dtoa_r+0x40>
 8004b42:	2010      	movs	r0, #16
 8004b44:	f000 fed6 	bl	80058f4 <malloc>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6260      	str	r0, [r4, #36]	; 0x24
 8004b4c:	b920      	cbnz	r0, 8004b58 <_dtoa_r+0x38>
 8004b4e:	4bb2      	ldr	r3, [pc, #712]	; (8004e18 <_dtoa_r+0x2f8>)
 8004b50:	21ea      	movs	r1, #234	; 0xea
 8004b52:	48b2      	ldr	r0, [pc, #712]	; (8004e1c <_dtoa_r+0x2fc>)
 8004b54:	f001 fef8 	bl	8006948 <__assert_func>
 8004b58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004b5c:	6005      	str	r5, [r0, #0]
 8004b5e:	60c5      	str	r5, [r0, #12]
 8004b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	b151      	cbz	r1, 8004b7c <_dtoa_r+0x5c>
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	604a      	str	r2, [r1, #4]
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	4093      	lsls	r3, r2
 8004b6e:	608b      	str	r3, [r1, #8]
 8004b70:	4620      	mov	r0, r4
 8004b72:	f000 ff15 	bl	80059a0 <_Bfree>
 8004b76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	1e3b      	subs	r3, r7, #0
 8004b7e:	bfb9      	ittee	lt
 8004b80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b84:	9303      	strlt	r3, [sp, #12]
 8004b86:	2300      	movge	r3, #0
 8004b88:	f8c8 3000 	strge.w	r3, [r8]
 8004b8c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8004b90:	4ba3      	ldr	r3, [pc, #652]	; (8004e20 <_dtoa_r+0x300>)
 8004b92:	bfbc      	itt	lt
 8004b94:	2201      	movlt	r2, #1
 8004b96:	f8c8 2000 	strlt.w	r2, [r8]
 8004b9a:	ea33 0309 	bics.w	r3, r3, r9
 8004b9e:	d11b      	bne.n	8004bd8 <_dtoa_r+0xb8>
 8004ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ba2:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004bac:	4333      	orrs	r3, r6
 8004bae:	f000 857a 	beq.w	80056a6 <_dtoa_r+0xb86>
 8004bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bb4:	b963      	cbnz	r3, 8004bd0 <_dtoa_r+0xb0>
 8004bb6:	4b9b      	ldr	r3, [pc, #620]	; (8004e24 <_dtoa_r+0x304>)
 8004bb8:	e024      	b.n	8004c04 <_dtoa_r+0xe4>
 8004bba:	4b9b      	ldr	r3, [pc, #620]	; (8004e28 <_dtoa_r+0x308>)
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	3308      	adds	r3, #8
 8004bc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	9800      	ldr	r0, [sp, #0]
 8004bc6:	b015      	add	sp, #84	; 0x54
 8004bc8:	ecbd 8b02 	vpop	{d8}
 8004bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bd0:	4b94      	ldr	r3, [pc, #592]	; (8004e24 <_dtoa_r+0x304>)
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	3303      	adds	r3, #3
 8004bd6:	e7f3      	b.n	8004bc0 <_dtoa_r+0xa0>
 8004bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	ec51 0b17 	vmov	r0, r1, d7
 8004be2:	2300      	movs	r3, #0
 8004be4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004be8:	f7fb ff76 	bl	8000ad8 <__aeabi_dcmpeq>
 8004bec:	4680      	mov	r8, r0
 8004bee:	b158      	cbz	r0, 8004c08 <_dtoa_r+0xe8>
 8004bf0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 8551 	beq.w	80056a0 <_dtoa_r+0xb80>
 8004bfe:	488b      	ldr	r0, [pc, #556]	; (8004e2c <_dtoa_r+0x30c>)
 8004c00:	6018      	str	r0, [r3, #0]
 8004c02:	1e43      	subs	r3, r0, #1
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	e7dd      	b.n	8004bc4 <_dtoa_r+0xa4>
 8004c08:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8004c0c:	aa12      	add	r2, sp, #72	; 0x48
 8004c0e:	a913      	add	r1, sp, #76	; 0x4c
 8004c10:	4620      	mov	r0, r4
 8004c12:	f001 f9a7 	bl	8005f64 <__d2b>
 8004c16:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004c1a:	4683      	mov	fp, r0
 8004c1c:	2d00      	cmp	r5, #0
 8004c1e:	d07c      	beq.n	8004d1a <_dtoa_r+0x1fa>
 8004c20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c22:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8004c26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c2a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8004c2e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004c32:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004c36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004c3a:	4b7d      	ldr	r3, [pc, #500]	; (8004e30 <_dtoa_r+0x310>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	4630      	mov	r0, r6
 8004c40:	4639      	mov	r1, r7
 8004c42:	f7fb fb29 	bl	8000298 <__aeabi_dsub>
 8004c46:	a36e      	add	r3, pc, #440	; (adr r3, 8004e00 <_dtoa_r+0x2e0>)
 8004c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4c:	f7fb fcdc 	bl	8000608 <__aeabi_dmul>
 8004c50:	a36d      	add	r3, pc, #436	; (adr r3, 8004e08 <_dtoa_r+0x2e8>)
 8004c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c56:	f7fb fb21 	bl	800029c <__adddf3>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	460f      	mov	r7, r1
 8004c60:	f7fb fc68 	bl	8000534 <__aeabi_i2d>
 8004c64:	a36a      	add	r3, pc, #424	; (adr r3, 8004e10 <_dtoa_r+0x2f0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fccd 	bl	8000608 <__aeabi_dmul>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4630      	mov	r0, r6
 8004c74:	4639      	mov	r1, r7
 8004c76:	f7fb fb11 	bl	800029c <__adddf3>
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	460f      	mov	r7, r1
 8004c7e:	f7fb ff73 	bl	8000b68 <__aeabi_d2iz>
 8004c82:	2200      	movs	r2, #0
 8004c84:	4682      	mov	sl, r0
 8004c86:	2300      	movs	r3, #0
 8004c88:	4630      	mov	r0, r6
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	f7fb ff2e 	bl	8000aec <__aeabi_dcmplt>
 8004c90:	b148      	cbz	r0, 8004ca6 <_dtoa_r+0x186>
 8004c92:	4650      	mov	r0, sl
 8004c94:	f7fb fc4e 	bl	8000534 <__aeabi_i2d>
 8004c98:	4632      	mov	r2, r6
 8004c9a:	463b      	mov	r3, r7
 8004c9c:	f7fb ff1c 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ca0:	b908      	cbnz	r0, 8004ca6 <_dtoa_r+0x186>
 8004ca2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004ca6:	f1ba 0f16 	cmp.w	sl, #22
 8004caa:	d854      	bhi.n	8004d56 <_dtoa_r+0x236>
 8004cac:	4b61      	ldr	r3, [pc, #388]	; (8004e34 <_dtoa_r+0x314>)
 8004cae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cba:	f7fb ff17 	bl	8000aec <__aeabi_dcmplt>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d04b      	beq.n	8004d5a <_dtoa_r+0x23a>
 8004cc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	930e      	str	r3, [sp, #56]	; 0x38
 8004cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ccc:	1b5d      	subs	r5, r3, r5
 8004cce:	1e6b      	subs	r3, r5, #1
 8004cd0:	9304      	str	r3, [sp, #16]
 8004cd2:	bf43      	ittte	mi
 8004cd4:	2300      	movmi	r3, #0
 8004cd6:	f1c5 0801 	rsbmi	r8, r5, #1
 8004cda:	9304      	strmi	r3, [sp, #16]
 8004cdc:	f04f 0800 	movpl.w	r8, #0
 8004ce0:	f1ba 0f00 	cmp.w	sl, #0
 8004ce4:	db3b      	blt.n	8004d5e <_dtoa_r+0x23e>
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004cec:	4453      	add	r3, sl
 8004cee:	9304      	str	r3, [sp, #16]
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	9306      	str	r3, [sp, #24]
 8004cf4:	9b05      	ldr	r3, [sp, #20]
 8004cf6:	2b09      	cmp	r3, #9
 8004cf8:	d869      	bhi.n	8004dce <_dtoa_r+0x2ae>
 8004cfa:	2b05      	cmp	r3, #5
 8004cfc:	bfc4      	itt	gt
 8004cfe:	3b04      	subgt	r3, #4
 8004d00:	9305      	strgt	r3, [sp, #20]
 8004d02:	9b05      	ldr	r3, [sp, #20]
 8004d04:	f1a3 0302 	sub.w	r3, r3, #2
 8004d08:	bfcc      	ite	gt
 8004d0a:	2500      	movgt	r5, #0
 8004d0c:	2501      	movle	r5, #1
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d869      	bhi.n	8004de6 <_dtoa_r+0x2c6>
 8004d12:	e8df f003 	tbb	[pc, r3]
 8004d16:	4e2c      	.short	0x4e2c
 8004d18:	5a4c      	.short	0x5a4c
 8004d1a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8004d1e:	441d      	add	r5, r3
 8004d20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	bfc1      	itttt	gt
 8004d28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d2c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004d30:	fa09 f303 	lslgt.w	r3, r9, r3
 8004d34:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004d38:	bfda      	itte	le
 8004d3a:	f1c3 0320 	rsble	r3, r3, #32
 8004d3e:	fa06 f003 	lslle.w	r0, r6, r3
 8004d42:	4318      	orrgt	r0, r3
 8004d44:	f7fb fbe6 	bl	8000514 <__aeabi_ui2d>
 8004d48:	2301      	movs	r3, #1
 8004d4a:	4606      	mov	r6, r0
 8004d4c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004d50:	3d01      	subs	r5, #1
 8004d52:	9310      	str	r3, [sp, #64]	; 0x40
 8004d54:	e771      	b.n	8004c3a <_dtoa_r+0x11a>
 8004d56:	2301      	movs	r3, #1
 8004d58:	e7b6      	b.n	8004cc8 <_dtoa_r+0x1a8>
 8004d5a:	900e      	str	r0, [sp, #56]	; 0x38
 8004d5c:	e7b5      	b.n	8004cca <_dtoa_r+0x1aa>
 8004d5e:	f1ca 0300 	rsb	r3, sl, #0
 8004d62:	9306      	str	r3, [sp, #24]
 8004d64:	2300      	movs	r3, #0
 8004d66:	eba8 080a 	sub.w	r8, r8, sl
 8004d6a:	930d      	str	r3, [sp, #52]	; 0x34
 8004d6c:	e7c2      	b.n	8004cf4 <_dtoa_r+0x1d4>
 8004d6e:	2300      	movs	r3, #0
 8004d70:	9308      	str	r3, [sp, #32]
 8004d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	dc39      	bgt.n	8004dec <_dtoa_r+0x2cc>
 8004d78:	f04f 0901 	mov.w	r9, #1
 8004d7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d80:	464b      	mov	r3, r9
 8004d82:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004d86:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004d88:	2200      	movs	r2, #0
 8004d8a:	6042      	str	r2, [r0, #4]
 8004d8c:	2204      	movs	r2, #4
 8004d8e:	f102 0614 	add.w	r6, r2, #20
 8004d92:	429e      	cmp	r6, r3
 8004d94:	6841      	ldr	r1, [r0, #4]
 8004d96:	d92f      	bls.n	8004df8 <_dtoa_r+0x2d8>
 8004d98:	4620      	mov	r0, r4
 8004d9a:	f000 fdc1 	bl	8005920 <_Balloc>
 8004d9e:	9000      	str	r0, [sp, #0]
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d14b      	bne.n	8004e3c <_dtoa_r+0x31c>
 8004da4:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <_dtoa_r+0x318>)
 8004da6:	4602      	mov	r2, r0
 8004da8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004dac:	e6d1      	b.n	8004b52 <_dtoa_r+0x32>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e7de      	b.n	8004d70 <_dtoa_r+0x250>
 8004db2:	2300      	movs	r3, #0
 8004db4:	9308      	str	r3, [sp, #32]
 8004db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db8:	eb0a 0903 	add.w	r9, sl, r3
 8004dbc:	f109 0301 	add.w	r3, r9, #1
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	9301      	str	r3, [sp, #4]
 8004dc4:	bfb8      	it	lt
 8004dc6:	2301      	movlt	r3, #1
 8004dc8:	e7dd      	b.n	8004d86 <_dtoa_r+0x266>
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e7f2      	b.n	8004db4 <_dtoa_r+0x294>
 8004dce:	2501      	movs	r5, #1
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	9305      	str	r3, [sp, #20]
 8004dd4:	9508      	str	r5, [sp, #32]
 8004dd6:	f04f 39ff 	mov.w	r9, #4294967295
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f8cd 9004 	str.w	r9, [sp, #4]
 8004de0:	2312      	movs	r3, #18
 8004de2:	9209      	str	r2, [sp, #36]	; 0x24
 8004de4:	e7cf      	b.n	8004d86 <_dtoa_r+0x266>
 8004de6:	2301      	movs	r3, #1
 8004de8:	9308      	str	r3, [sp, #32]
 8004dea:	e7f4      	b.n	8004dd6 <_dtoa_r+0x2b6>
 8004dec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8004df0:	f8cd 9004 	str.w	r9, [sp, #4]
 8004df4:	464b      	mov	r3, r9
 8004df6:	e7c6      	b.n	8004d86 <_dtoa_r+0x266>
 8004df8:	3101      	adds	r1, #1
 8004dfa:	6041      	str	r1, [r0, #4]
 8004dfc:	0052      	lsls	r2, r2, #1
 8004dfe:	e7c6      	b.n	8004d8e <_dtoa_r+0x26e>
 8004e00:	636f4361 	.word	0x636f4361
 8004e04:	3fd287a7 	.word	0x3fd287a7
 8004e08:	8b60c8b3 	.word	0x8b60c8b3
 8004e0c:	3fc68a28 	.word	0x3fc68a28
 8004e10:	509f79fb 	.word	0x509f79fb
 8004e14:	3fd34413 	.word	0x3fd34413
 8004e18:	08006f29 	.word	0x08006f29
 8004e1c:	08006f40 	.word	0x08006f40
 8004e20:	7ff00000 	.word	0x7ff00000
 8004e24:	08006f25 	.word	0x08006f25
 8004e28:	08006f1c 	.word	0x08006f1c
 8004e2c:	08006ef9 	.word	0x08006ef9
 8004e30:	3ff80000 	.word	0x3ff80000
 8004e34:	08007098 	.word	0x08007098
 8004e38:	08006f9f 	.word	0x08006f9f
 8004e3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e3e:	9a00      	ldr	r2, [sp, #0]
 8004e40:	601a      	str	r2, [r3, #0]
 8004e42:	9b01      	ldr	r3, [sp, #4]
 8004e44:	2b0e      	cmp	r3, #14
 8004e46:	f200 80ad 	bhi.w	8004fa4 <_dtoa_r+0x484>
 8004e4a:	2d00      	cmp	r5, #0
 8004e4c:	f000 80aa 	beq.w	8004fa4 <_dtoa_r+0x484>
 8004e50:	f1ba 0f00 	cmp.w	sl, #0
 8004e54:	dd36      	ble.n	8004ec4 <_dtoa_r+0x3a4>
 8004e56:	4ac3      	ldr	r2, [pc, #780]	; (8005164 <_dtoa_r+0x644>)
 8004e58:	f00a 030f 	and.w	r3, sl, #15
 8004e5c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004e60:	ed93 7b00 	vldr	d7, [r3]
 8004e64:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004e68:	ea4f 172a 	mov.w	r7, sl, asr #4
 8004e6c:	eeb0 8a47 	vmov.f32	s16, s14
 8004e70:	eef0 8a67 	vmov.f32	s17, s15
 8004e74:	d016      	beq.n	8004ea4 <_dtoa_r+0x384>
 8004e76:	4bbc      	ldr	r3, [pc, #752]	; (8005168 <_dtoa_r+0x648>)
 8004e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004e7c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e80:	f7fb fcec 	bl	800085c <__aeabi_ddiv>
 8004e84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e88:	f007 070f 	and.w	r7, r7, #15
 8004e8c:	2503      	movs	r5, #3
 8004e8e:	4eb6      	ldr	r6, [pc, #728]	; (8005168 <_dtoa_r+0x648>)
 8004e90:	b957      	cbnz	r7, 8004ea8 <_dtoa_r+0x388>
 8004e92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e96:	ec53 2b18 	vmov	r2, r3, d8
 8004e9a:	f7fb fcdf 	bl	800085c <__aeabi_ddiv>
 8004e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ea2:	e029      	b.n	8004ef8 <_dtoa_r+0x3d8>
 8004ea4:	2502      	movs	r5, #2
 8004ea6:	e7f2      	b.n	8004e8e <_dtoa_r+0x36e>
 8004ea8:	07f9      	lsls	r1, r7, #31
 8004eaa:	d508      	bpl.n	8004ebe <_dtoa_r+0x39e>
 8004eac:	ec51 0b18 	vmov	r0, r1, d8
 8004eb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004eb4:	f7fb fba8 	bl	8000608 <__aeabi_dmul>
 8004eb8:	ec41 0b18 	vmov	d8, r0, r1
 8004ebc:	3501      	adds	r5, #1
 8004ebe:	107f      	asrs	r7, r7, #1
 8004ec0:	3608      	adds	r6, #8
 8004ec2:	e7e5      	b.n	8004e90 <_dtoa_r+0x370>
 8004ec4:	f000 80a6 	beq.w	8005014 <_dtoa_r+0x4f4>
 8004ec8:	f1ca 0600 	rsb	r6, sl, #0
 8004ecc:	4ba5      	ldr	r3, [pc, #660]	; (8005164 <_dtoa_r+0x644>)
 8004ece:	4fa6      	ldr	r7, [pc, #664]	; (8005168 <_dtoa_r+0x648>)
 8004ed0:	f006 020f 	and.w	r2, r6, #15
 8004ed4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004edc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004ee0:	f7fb fb92 	bl	8000608 <__aeabi_dmul>
 8004ee4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee8:	1136      	asrs	r6, r6, #4
 8004eea:	2300      	movs	r3, #0
 8004eec:	2502      	movs	r5, #2
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	f040 8085 	bne.w	8004ffe <_dtoa_r+0x4de>
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1d2      	bne.n	8004e9e <_dtoa_r+0x37e>
 8004ef8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 808c 	beq.w	8005018 <_dtoa_r+0x4f8>
 8004f00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f04:	4b99      	ldr	r3, [pc, #612]	; (800516c <_dtoa_r+0x64c>)
 8004f06:	2200      	movs	r2, #0
 8004f08:	4630      	mov	r0, r6
 8004f0a:	4639      	mov	r1, r7
 8004f0c:	f7fb fdee 	bl	8000aec <__aeabi_dcmplt>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	f000 8081 	beq.w	8005018 <_dtoa_r+0x4f8>
 8004f16:	9b01      	ldr	r3, [sp, #4]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d07d      	beq.n	8005018 <_dtoa_r+0x4f8>
 8004f1c:	f1b9 0f00 	cmp.w	r9, #0
 8004f20:	dd3c      	ble.n	8004f9c <_dtoa_r+0x47c>
 8004f22:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f26:	9307      	str	r3, [sp, #28]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	4b91      	ldr	r3, [pc, #580]	; (8005170 <_dtoa_r+0x650>)
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	4639      	mov	r1, r7
 8004f30:	f7fb fb6a 	bl	8000608 <__aeabi_dmul>
 8004f34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f38:	3501      	adds	r5, #1
 8004f3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8004f3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004f42:	4628      	mov	r0, r5
 8004f44:	f7fb faf6 	bl	8000534 <__aeabi_i2d>
 8004f48:	4632      	mov	r2, r6
 8004f4a:	463b      	mov	r3, r7
 8004f4c:	f7fb fb5c 	bl	8000608 <__aeabi_dmul>
 8004f50:	4b88      	ldr	r3, [pc, #544]	; (8005174 <_dtoa_r+0x654>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	f7fb f9a2 	bl	800029c <__adddf3>
 8004f58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8004f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f60:	9303      	str	r3, [sp, #12]
 8004f62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d15c      	bne.n	8005022 <_dtoa_r+0x502>
 8004f68:	4b83      	ldr	r3, [pc, #524]	; (8005178 <_dtoa_r+0x658>)
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	4639      	mov	r1, r7
 8004f70:	f7fb f992 	bl	8000298 <__aeabi_dsub>
 8004f74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f78:	4606      	mov	r6, r0
 8004f7a:	460f      	mov	r7, r1
 8004f7c:	f7fb fdd4 	bl	8000b28 <__aeabi_dcmpgt>
 8004f80:	2800      	cmp	r0, #0
 8004f82:	f040 8296 	bne.w	80054b2 <_dtoa_r+0x992>
 8004f86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8004f8a:	4630      	mov	r0, r6
 8004f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f90:	4639      	mov	r1, r7
 8004f92:	f7fb fdab 	bl	8000aec <__aeabi_dcmplt>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	f040 8288 	bne.w	80054ac <_dtoa_r+0x98c>
 8004f9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004fa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004fa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	f2c0 8158 	blt.w	800525c <_dtoa_r+0x73c>
 8004fac:	f1ba 0f0e 	cmp.w	sl, #14
 8004fb0:	f300 8154 	bgt.w	800525c <_dtoa_r+0x73c>
 8004fb4:	4b6b      	ldr	r3, [pc, #428]	; (8005164 <_dtoa_r+0x644>)
 8004fb6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004fba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	f280 80e3 	bge.w	800518c <_dtoa_r+0x66c>
 8004fc6:	9b01      	ldr	r3, [sp, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	f300 80df 	bgt.w	800518c <_dtoa_r+0x66c>
 8004fce:	f040 826d 	bne.w	80054ac <_dtoa_r+0x98c>
 8004fd2:	4b69      	ldr	r3, [pc, #420]	; (8005178 <_dtoa_r+0x658>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	4649      	mov	r1, r9
 8004fda:	f7fb fb15 	bl	8000608 <__aeabi_dmul>
 8004fde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fe2:	f7fb fd97 	bl	8000b14 <__aeabi_dcmpge>
 8004fe6:	9e01      	ldr	r6, [sp, #4]
 8004fe8:	4637      	mov	r7, r6
 8004fea:	2800      	cmp	r0, #0
 8004fec:	f040 8243 	bne.w	8005476 <_dtoa_r+0x956>
 8004ff0:	9d00      	ldr	r5, [sp, #0]
 8004ff2:	2331      	movs	r3, #49	; 0x31
 8004ff4:	f805 3b01 	strb.w	r3, [r5], #1
 8004ff8:	f10a 0a01 	add.w	sl, sl, #1
 8004ffc:	e23f      	b.n	800547e <_dtoa_r+0x95e>
 8004ffe:	07f2      	lsls	r2, r6, #31
 8005000:	d505      	bpl.n	800500e <_dtoa_r+0x4ee>
 8005002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005006:	f7fb faff 	bl	8000608 <__aeabi_dmul>
 800500a:	3501      	adds	r5, #1
 800500c:	2301      	movs	r3, #1
 800500e:	1076      	asrs	r6, r6, #1
 8005010:	3708      	adds	r7, #8
 8005012:	e76c      	b.n	8004eee <_dtoa_r+0x3ce>
 8005014:	2502      	movs	r5, #2
 8005016:	e76f      	b.n	8004ef8 <_dtoa_r+0x3d8>
 8005018:	9b01      	ldr	r3, [sp, #4]
 800501a:	f8cd a01c 	str.w	sl, [sp, #28]
 800501e:	930c      	str	r3, [sp, #48]	; 0x30
 8005020:	e78d      	b.n	8004f3e <_dtoa_r+0x41e>
 8005022:	9900      	ldr	r1, [sp, #0]
 8005024:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005026:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005028:	4b4e      	ldr	r3, [pc, #312]	; (8005164 <_dtoa_r+0x644>)
 800502a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800502e:	4401      	add	r1, r0
 8005030:	9102      	str	r1, [sp, #8]
 8005032:	9908      	ldr	r1, [sp, #32]
 8005034:	eeb0 8a47 	vmov.f32	s16, s14
 8005038:	eef0 8a67 	vmov.f32	s17, s15
 800503c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005040:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005044:	2900      	cmp	r1, #0
 8005046:	d045      	beq.n	80050d4 <_dtoa_r+0x5b4>
 8005048:	494c      	ldr	r1, [pc, #304]	; (800517c <_dtoa_r+0x65c>)
 800504a:	2000      	movs	r0, #0
 800504c:	f7fb fc06 	bl	800085c <__aeabi_ddiv>
 8005050:	ec53 2b18 	vmov	r2, r3, d8
 8005054:	f7fb f920 	bl	8000298 <__aeabi_dsub>
 8005058:	9d00      	ldr	r5, [sp, #0]
 800505a:	ec41 0b18 	vmov	d8, r0, r1
 800505e:	4639      	mov	r1, r7
 8005060:	4630      	mov	r0, r6
 8005062:	f7fb fd81 	bl	8000b68 <__aeabi_d2iz>
 8005066:	900c      	str	r0, [sp, #48]	; 0x30
 8005068:	f7fb fa64 	bl	8000534 <__aeabi_i2d>
 800506c:	4602      	mov	r2, r0
 800506e:	460b      	mov	r3, r1
 8005070:	4630      	mov	r0, r6
 8005072:	4639      	mov	r1, r7
 8005074:	f7fb f910 	bl	8000298 <__aeabi_dsub>
 8005078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800507a:	3330      	adds	r3, #48	; 0x30
 800507c:	f805 3b01 	strb.w	r3, [r5], #1
 8005080:	ec53 2b18 	vmov	r2, r3, d8
 8005084:	4606      	mov	r6, r0
 8005086:	460f      	mov	r7, r1
 8005088:	f7fb fd30 	bl	8000aec <__aeabi_dcmplt>
 800508c:	2800      	cmp	r0, #0
 800508e:	d165      	bne.n	800515c <_dtoa_r+0x63c>
 8005090:	4632      	mov	r2, r6
 8005092:	463b      	mov	r3, r7
 8005094:	4935      	ldr	r1, [pc, #212]	; (800516c <_dtoa_r+0x64c>)
 8005096:	2000      	movs	r0, #0
 8005098:	f7fb f8fe 	bl	8000298 <__aeabi_dsub>
 800509c:	ec53 2b18 	vmov	r2, r3, d8
 80050a0:	f7fb fd24 	bl	8000aec <__aeabi_dcmplt>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	f040 80b9 	bne.w	800521c <_dtoa_r+0x6fc>
 80050aa:	9b02      	ldr	r3, [sp, #8]
 80050ac:	429d      	cmp	r5, r3
 80050ae:	f43f af75 	beq.w	8004f9c <_dtoa_r+0x47c>
 80050b2:	4b2f      	ldr	r3, [pc, #188]	; (8005170 <_dtoa_r+0x650>)
 80050b4:	ec51 0b18 	vmov	r0, r1, d8
 80050b8:	2200      	movs	r2, #0
 80050ba:	f7fb faa5 	bl	8000608 <__aeabi_dmul>
 80050be:	4b2c      	ldr	r3, [pc, #176]	; (8005170 <_dtoa_r+0x650>)
 80050c0:	ec41 0b18 	vmov	d8, r0, r1
 80050c4:	2200      	movs	r2, #0
 80050c6:	4630      	mov	r0, r6
 80050c8:	4639      	mov	r1, r7
 80050ca:	f7fb fa9d 	bl	8000608 <__aeabi_dmul>
 80050ce:	4606      	mov	r6, r0
 80050d0:	460f      	mov	r7, r1
 80050d2:	e7c4      	b.n	800505e <_dtoa_r+0x53e>
 80050d4:	ec51 0b17 	vmov	r0, r1, d7
 80050d8:	f7fb fa96 	bl	8000608 <__aeabi_dmul>
 80050dc:	9b02      	ldr	r3, [sp, #8]
 80050de:	9d00      	ldr	r5, [sp, #0]
 80050e0:	930c      	str	r3, [sp, #48]	; 0x30
 80050e2:	ec41 0b18 	vmov	d8, r0, r1
 80050e6:	4639      	mov	r1, r7
 80050e8:	4630      	mov	r0, r6
 80050ea:	f7fb fd3d 	bl	8000b68 <__aeabi_d2iz>
 80050ee:	9011      	str	r0, [sp, #68]	; 0x44
 80050f0:	f7fb fa20 	bl	8000534 <__aeabi_i2d>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4630      	mov	r0, r6
 80050fa:	4639      	mov	r1, r7
 80050fc:	f7fb f8cc 	bl	8000298 <__aeabi_dsub>
 8005100:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005102:	3330      	adds	r3, #48	; 0x30
 8005104:	f805 3b01 	strb.w	r3, [r5], #1
 8005108:	9b02      	ldr	r3, [sp, #8]
 800510a:	429d      	cmp	r5, r3
 800510c:	4606      	mov	r6, r0
 800510e:	460f      	mov	r7, r1
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	d134      	bne.n	8005180 <_dtoa_r+0x660>
 8005116:	4b19      	ldr	r3, [pc, #100]	; (800517c <_dtoa_r+0x65c>)
 8005118:	ec51 0b18 	vmov	r0, r1, d8
 800511c:	f7fb f8be 	bl	800029c <__adddf3>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4630      	mov	r0, r6
 8005126:	4639      	mov	r1, r7
 8005128:	f7fb fcfe 	bl	8000b28 <__aeabi_dcmpgt>
 800512c:	2800      	cmp	r0, #0
 800512e:	d175      	bne.n	800521c <_dtoa_r+0x6fc>
 8005130:	ec53 2b18 	vmov	r2, r3, d8
 8005134:	4911      	ldr	r1, [pc, #68]	; (800517c <_dtoa_r+0x65c>)
 8005136:	2000      	movs	r0, #0
 8005138:	f7fb f8ae 	bl	8000298 <__aeabi_dsub>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	4630      	mov	r0, r6
 8005142:	4639      	mov	r1, r7
 8005144:	f7fb fcd2 	bl	8000aec <__aeabi_dcmplt>
 8005148:	2800      	cmp	r0, #0
 800514a:	f43f af27 	beq.w	8004f9c <_dtoa_r+0x47c>
 800514e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005150:	1e6b      	subs	r3, r5, #1
 8005152:	930c      	str	r3, [sp, #48]	; 0x30
 8005154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005158:	2b30      	cmp	r3, #48	; 0x30
 800515a:	d0f8      	beq.n	800514e <_dtoa_r+0x62e>
 800515c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005160:	e04a      	b.n	80051f8 <_dtoa_r+0x6d8>
 8005162:	bf00      	nop
 8005164:	08007098 	.word	0x08007098
 8005168:	08007070 	.word	0x08007070
 800516c:	3ff00000 	.word	0x3ff00000
 8005170:	40240000 	.word	0x40240000
 8005174:	401c0000 	.word	0x401c0000
 8005178:	40140000 	.word	0x40140000
 800517c:	3fe00000 	.word	0x3fe00000
 8005180:	4baf      	ldr	r3, [pc, #700]	; (8005440 <_dtoa_r+0x920>)
 8005182:	f7fb fa41 	bl	8000608 <__aeabi_dmul>
 8005186:	4606      	mov	r6, r0
 8005188:	460f      	mov	r7, r1
 800518a:	e7ac      	b.n	80050e6 <_dtoa_r+0x5c6>
 800518c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005190:	9d00      	ldr	r5, [sp, #0]
 8005192:	4642      	mov	r2, r8
 8005194:	464b      	mov	r3, r9
 8005196:	4630      	mov	r0, r6
 8005198:	4639      	mov	r1, r7
 800519a:	f7fb fb5f 	bl	800085c <__aeabi_ddiv>
 800519e:	f7fb fce3 	bl	8000b68 <__aeabi_d2iz>
 80051a2:	9002      	str	r0, [sp, #8]
 80051a4:	f7fb f9c6 	bl	8000534 <__aeabi_i2d>
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	f7fb fa2c 	bl	8000608 <__aeabi_dmul>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	4630      	mov	r0, r6
 80051b6:	4639      	mov	r1, r7
 80051b8:	f7fb f86e 	bl	8000298 <__aeabi_dsub>
 80051bc:	9e02      	ldr	r6, [sp, #8]
 80051be:	9f01      	ldr	r7, [sp, #4]
 80051c0:	3630      	adds	r6, #48	; 0x30
 80051c2:	f805 6b01 	strb.w	r6, [r5], #1
 80051c6:	9e00      	ldr	r6, [sp, #0]
 80051c8:	1bae      	subs	r6, r5, r6
 80051ca:	42b7      	cmp	r7, r6
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	d137      	bne.n	8005242 <_dtoa_r+0x722>
 80051d2:	f7fb f863 	bl	800029c <__adddf3>
 80051d6:	4642      	mov	r2, r8
 80051d8:	464b      	mov	r3, r9
 80051da:	4606      	mov	r6, r0
 80051dc:	460f      	mov	r7, r1
 80051de:	f7fb fca3 	bl	8000b28 <__aeabi_dcmpgt>
 80051e2:	b9c8      	cbnz	r0, 8005218 <_dtoa_r+0x6f8>
 80051e4:	4642      	mov	r2, r8
 80051e6:	464b      	mov	r3, r9
 80051e8:	4630      	mov	r0, r6
 80051ea:	4639      	mov	r1, r7
 80051ec:	f7fb fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80051f0:	b110      	cbz	r0, 80051f8 <_dtoa_r+0x6d8>
 80051f2:	9b02      	ldr	r3, [sp, #8]
 80051f4:	07d9      	lsls	r1, r3, #31
 80051f6:	d40f      	bmi.n	8005218 <_dtoa_r+0x6f8>
 80051f8:	4620      	mov	r0, r4
 80051fa:	4659      	mov	r1, fp
 80051fc:	f000 fbd0 	bl	80059a0 <_Bfree>
 8005200:	2300      	movs	r3, #0
 8005202:	702b      	strb	r3, [r5, #0]
 8005204:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005206:	f10a 0001 	add.w	r0, sl, #1
 800520a:	6018      	str	r0, [r3, #0]
 800520c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800520e:	2b00      	cmp	r3, #0
 8005210:	f43f acd8 	beq.w	8004bc4 <_dtoa_r+0xa4>
 8005214:	601d      	str	r5, [r3, #0]
 8005216:	e4d5      	b.n	8004bc4 <_dtoa_r+0xa4>
 8005218:	f8cd a01c 	str.w	sl, [sp, #28]
 800521c:	462b      	mov	r3, r5
 800521e:	461d      	mov	r5, r3
 8005220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005224:	2a39      	cmp	r2, #57	; 0x39
 8005226:	d108      	bne.n	800523a <_dtoa_r+0x71a>
 8005228:	9a00      	ldr	r2, [sp, #0]
 800522a:	429a      	cmp	r2, r3
 800522c:	d1f7      	bne.n	800521e <_dtoa_r+0x6fe>
 800522e:	9a07      	ldr	r2, [sp, #28]
 8005230:	9900      	ldr	r1, [sp, #0]
 8005232:	3201      	adds	r2, #1
 8005234:	9207      	str	r2, [sp, #28]
 8005236:	2230      	movs	r2, #48	; 0x30
 8005238:	700a      	strb	r2, [r1, #0]
 800523a:	781a      	ldrb	r2, [r3, #0]
 800523c:	3201      	adds	r2, #1
 800523e:	701a      	strb	r2, [r3, #0]
 8005240:	e78c      	b.n	800515c <_dtoa_r+0x63c>
 8005242:	4b7f      	ldr	r3, [pc, #508]	; (8005440 <_dtoa_r+0x920>)
 8005244:	2200      	movs	r2, #0
 8005246:	f7fb f9df 	bl	8000608 <__aeabi_dmul>
 800524a:	2200      	movs	r2, #0
 800524c:	2300      	movs	r3, #0
 800524e:	4606      	mov	r6, r0
 8005250:	460f      	mov	r7, r1
 8005252:	f7fb fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 8005256:	2800      	cmp	r0, #0
 8005258:	d09b      	beq.n	8005192 <_dtoa_r+0x672>
 800525a:	e7cd      	b.n	80051f8 <_dtoa_r+0x6d8>
 800525c:	9a08      	ldr	r2, [sp, #32]
 800525e:	2a00      	cmp	r2, #0
 8005260:	f000 80c4 	beq.w	80053ec <_dtoa_r+0x8cc>
 8005264:	9a05      	ldr	r2, [sp, #20]
 8005266:	2a01      	cmp	r2, #1
 8005268:	f300 80a8 	bgt.w	80053bc <_dtoa_r+0x89c>
 800526c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800526e:	2a00      	cmp	r2, #0
 8005270:	f000 80a0 	beq.w	80053b4 <_dtoa_r+0x894>
 8005274:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005278:	9e06      	ldr	r6, [sp, #24]
 800527a:	4645      	mov	r5, r8
 800527c:	9a04      	ldr	r2, [sp, #16]
 800527e:	2101      	movs	r1, #1
 8005280:	441a      	add	r2, r3
 8005282:	4620      	mov	r0, r4
 8005284:	4498      	add	r8, r3
 8005286:	9204      	str	r2, [sp, #16]
 8005288:	f000 fc46 	bl	8005b18 <__i2b>
 800528c:	4607      	mov	r7, r0
 800528e:	2d00      	cmp	r5, #0
 8005290:	dd0b      	ble.n	80052aa <_dtoa_r+0x78a>
 8005292:	9b04      	ldr	r3, [sp, #16]
 8005294:	2b00      	cmp	r3, #0
 8005296:	dd08      	ble.n	80052aa <_dtoa_r+0x78a>
 8005298:	42ab      	cmp	r3, r5
 800529a:	9a04      	ldr	r2, [sp, #16]
 800529c:	bfa8      	it	ge
 800529e:	462b      	movge	r3, r5
 80052a0:	eba8 0803 	sub.w	r8, r8, r3
 80052a4:	1aed      	subs	r5, r5, r3
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	9304      	str	r3, [sp, #16]
 80052aa:	9b06      	ldr	r3, [sp, #24]
 80052ac:	b1fb      	cbz	r3, 80052ee <_dtoa_r+0x7ce>
 80052ae:	9b08      	ldr	r3, [sp, #32]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 809f 	beq.w	80053f4 <_dtoa_r+0x8d4>
 80052b6:	2e00      	cmp	r6, #0
 80052b8:	dd11      	ble.n	80052de <_dtoa_r+0x7be>
 80052ba:	4639      	mov	r1, r7
 80052bc:	4632      	mov	r2, r6
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 fce6 	bl	8005c90 <__pow5mult>
 80052c4:	465a      	mov	r2, fp
 80052c6:	4601      	mov	r1, r0
 80052c8:	4607      	mov	r7, r0
 80052ca:	4620      	mov	r0, r4
 80052cc:	f000 fc3a 	bl	8005b44 <__multiply>
 80052d0:	4659      	mov	r1, fp
 80052d2:	9007      	str	r0, [sp, #28]
 80052d4:	4620      	mov	r0, r4
 80052d6:	f000 fb63 	bl	80059a0 <_Bfree>
 80052da:	9b07      	ldr	r3, [sp, #28]
 80052dc:	469b      	mov	fp, r3
 80052de:	9b06      	ldr	r3, [sp, #24]
 80052e0:	1b9a      	subs	r2, r3, r6
 80052e2:	d004      	beq.n	80052ee <_dtoa_r+0x7ce>
 80052e4:	4659      	mov	r1, fp
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 fcd2 	bl	8005c90 <__pow5mult>
 80052ec:	4683      	mov	fp, r0
 80052ee:	2101      	movs	r1, #1
 80052f0:	4620      	mov	r0, r4
 80052f2:	f000 fc11 	bl	8005b18 <__i2b>
 80052f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	4606      	mov	r6, r0
 80052fc:	dd7c      	ble.n	80053f8 <_dtoa_r+0x8d8>
 80052fe:	461a      	mov	r2, r3
 8005300:	4601      	mov	r1, r0
 8005302:	4620      	mov	r0, r4
 8005304:	f000 fcc4 	bl	8005c90 <__pow5mult>
 8005308:	9b05      	ldr	r3, [sp, #20]
 800530a:	2b01      	cmp	r3, #1
 800530c:	4606      	mov	r6, r0
 800530e:	dd76      	ble.n	80053fe <_dtoa_r+0x8de>
 8005310:	2300      	movs	r3, #0
 8005312:	9306      	str	r3, [sp, #24]
 8005314:	6933      	ldr	r3, [r6, #16]
 8005316:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800531a:	6918      	ldr	r0, [r3, #16]
 800531c:	f000 fbac 	bl	8005a78 <__hi0bits>
 8005320:	f1c0 0020 	rsb	r0, r0, #32
 8005324:	9b04      	ldr	r3, [sp, #16]
 8005326:	4418      	add	r0, r3
 8005328:	f010 001f 	ands.w	r0, r0, #31
 800532c:	f000 8086 	beq.w	800543c <_dtoa_r+0x91c>
 8005330:	f1c0 0320 	rsb	r3, r0, #32
 8005334:	2b04      	cmp	r3, #4
 8005336:	dd7f      	ble.n	8005438 <_dtoa_r+0x918>
 8005338:	f1c0 001c 	rsb	r0, r0, #28
 800533c:	9b04      	ldr	r3, [sp, #16]
 800533e:	4403      	add	r3, r0
 8005340:	4480      	add	r8, r0
 8005342:	4405      	add	r5, r0
 8005344:	9304      	str	r3, [sp, #16]
 8005346:	f1b8 0f00 	cmp.w	r8, #0
 800534a:	dd05      	ble.n	8005358 <_dtoa_r+0x838>
 800534c:	4659      	mov	r1, fp
 800534e:	4642      	mov	r2, r8
 8005350:	4620      	mov	r0, r4
 8005352:	f000 fcf7 	bl	8005d44 <__lshift>
 8005356:	4683      	mov	fp, r0
 8005358:	9b04      	ldr	r3, [sp, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	dd05      	ble.n	800536a <_dtoa_r+0x84a>
 800535e:	4631      	mov	r1, r6
 8005360:	461a      	mov	r2, r3
 8005362:	4620      	mov	r0, r4
 8005364:	f000 fcee 	bl	8005d44 <__lshift>
 8005368:	4606      	mov	r6, r0
 800536a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d069      	beq.n	8005444 <_dtoa_r+0x924>
 8005370:	4631      	mov	r1, r6
 8005372:	4658      	mov	r0, fp
 8005374:	f000 fd52 	bl	8005e1c <__mcmp>
 8005378:	2800      	cmp	r0, #0
 800537a:	da63      	bge.n	8005444 <_dtoa_r+0x924>
 800537c:	2300      	movs	r3, #0
 800537e:	4659      	mov	r1, fp
 8005380:	220a      	movs	r2, #10
 8005382:	4620      	mov	r0, r4
 8005384:	f000 fb2e 	bl	80059e4 <__multadd>
 8005388:	9b08      	ldr	r3, [sp, #32]
 800538a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800538e:	4683      	mov	fp, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	f000 818f 	beq.w	80056b4 <_dtoa_r+0xb94>
 8005396:	4639      	mov	r1, r7
 8005398:	2300      	movs	r3, #0
 800539a:	220a      	movs	r2, #10
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fb21 	bl	80059e4 <__multadd>
 80053a2:	f1b9 0f00 	cmp.w	r9, #0
 80053a6:	4607      	mov	r7, r0
 80053a8:	f300 808e 	bgt.w	80054c8 <_dtoa_r+0x9a8>
 80053ac:	9b05      	ldr	r3, [sp, #20]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	dc50      	bgt.n	8005454 <_dtoa_r+0x934>
 80053b2:	e089      	b.n	80054c8 <_dtoa_r+0x9a8>
 80053b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80053b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053ba:	e75d      	b.n	8005278 <_dtoa_r+0x758>
 80053bc:	9b01      	ldr	r3, [sp, #4]
 80053be:	1e5e      	subs	r6, r3, #1
 80053c0:	9b06      	ldr	r3, [sp, #24]
 80053c2:	42b3      	cmp	r3, r6
 80053c4:	bfbf      	itttt	lt
 80053c6:	9b06      	ldrlt	r3, [sp, #24]
 80053c8:	9606      	strlt	r6, [sp, #24]
 80053ca:	1af2      	sublt	r2, r6, r3
 80053cc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80053ce:	bfb6      	itet	lt
 80053d0:	189b      	addlt	r3, r3, r2
 80053d2:	1b9e      	subge	r6, r3, r6
 80053d4:	930d      	strlt	r3, [sp, #52]	; 0x34
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	bfb8      	it	lt
 80053da:	2600      	movlt	r6, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	bfb5      	itete	lt
 80053e0:	eba8 0503 	sublt.w	r5, r8, r3
 80053e4:	9b01      	ldrge	r3, [sp, #4]
 80053e6:	2300      	movlt	r3, #0
 80053e8:	4645      	movge	r5, r8
 80053ea:	e747      	b.n	800527c <_dtoa_r+0x75c>
 80053ec:	9e06      	ldr	r6, [sp, #24]
 80053ee:	9f08      	ldr	r7, [sp, #32]
 80053f0:	4645      	mov	r5, r8
 80053f2:	e74c      	b.n	800528e <_dtoa_r+0x76e>
 80053f4:	9a06      	ldr	r2, [sp, #24]
 80053f6:	e775      	b.n	80052e4 <_dtoa_r+0x7c4>
 80053f8:	9b05      	ldr	r3, [sp, #20]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	dc18      	bgt.n	8005430 <_dtoa_r+0x910>
 80053fe:	9b02      	ldr	r3, [sp, #8]
 8005400:	b9b3      	cbnz	r3, 8005430 <_dtoa_r+0x910>
 8005402:	9b03      	ldr	r3, [sp, #12]
 8005404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005408:	b9a3      	cbnz	r3, 8005434 <_dtoa_r+0x914>
 800540a:	9b03      	ldr	r3, [sp, #12]
 800540c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005410:	0d1b      	lsrs	r3, r3, #20
 8005412:	051b      	lsls	r3, r3, #20
 8005414:	b12b      	cbz	r3, 8005422 <_dtoa_r+0x902>
 8005416:	9b04      	ldr	r3, [sp, #16]
 8005418:	3301      	adds	r3, #1
 800541a:	9304      	str	r3, [sp, #16]
 800541c:	f108 0801 	add.w	r8, r8, #1
 8005420:	2301      	movs	r3, #1
 8005422:	9306      	str	r3, [sp, #24]
 8005424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005426:	2b00      	cmp	r3, #0
 8005428:	f47f af74 	bne.w	8005314 <_dtoa_r+0x7f4>
 800542c:	2001      	movs	r0, #1
 800542e:	e779      	b.n	8005324 <_dtoa_r+0x804>
 8005430:	2300      	movs	r3, #0
 8005432:	e7f6      	b.n	8005422 <_dtoa_r+0x902>
 8005434:	9b02      	ldr	r3, [sp, #8]
 8005436:	e7f4      	b.n	8005422 <_dtoa_r+0x902>
 8005438:	d085      	beq.n	8005346 <_dtoa_r+0x826>
 800543a:	4618      	mov	r0, r3
 800543c:	301c      	adds	r0, #28
 800543e:	e77d      	b.n	800533c <_dtoa_r+0x81c>
 8005440:	40240000 	.word	0x40240000
 8005444:	9b01      	ldr	r3, [sp, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	dc38      	bgt.n	80054bc <_dtoa_r+0x99c>
 800544a:	9b05      	ldr	r3, [sp, #20]
 800544c:	2b02      	cmp	r3, #2
 800544e:	dd35      	ble.n	80054bc <_dtoa_r+0x99c>
 8005450:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005454:	f1b9 0f00 	cmp.w	r9, #0
 8005458:	d10d      	bne.n	8005476 <_dtoa_r+0x956>
 800545a:	4631      	mov	r1, r6
 800545c:	464b      	mov	r3, r9
 800545e:	2205      	movs	r2, #5
 8005460:	4620      	mov	r0, r4
 8005462:	f000 fabf 	bl	80059e4 <__multadd>
 8005466:	4601      	mov	r1, r0
 8005468:	4606      	mov	r6, r0
 800546a:	4658      	mov	r0, fp
 800546c:	f000 fcd6 	bl	8005e1c <__mcmp>
 8005470:	2800      	cmp	r0, #0
 8005472:	f73f adbd 	bgt.w	8004ff0 <_dtoa_r+0x4d0>
 8005476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005478:	9d00      	ldr	r5, [sp, #0]
 800547a:	ea6f 0a03 	mvn.w	sl, r3
 800547e:	f04f 0800 	mov.w	r8, #0
 8005482:	4631      	mov	r1, r6
 8005484:	4620      	mov	r0, r4
 8005486:	f000 fa8b 	bl	80059a0 <_Bfree>
 800548a:	2f00      	cmp	r7, #0
 800548c:	f43f aeb4 	beq.w	80051f8 <_dtoa_r+0x6d8>
 8005490:	f1b8 0f00 	cmp.w	r8, #0
 8005494:	d005      	beq.n	80054a2 <_dtoa_r+0x982>
 8005496:	45b8      	cmp	r8, r7
 8005498:	d003      	beq.n	80054a2 <_dtoa_r+0x982>
 800549a:	4641      	mov	r1, r8
 800549c:	4620      	mov	r0, r4
 800549e:	f000 fa7f 	bl	80059a0 <_Bfree>
 80054a2:	4639      	mov	r1, r7
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fa7b 	bl	80059a0 <_Bfree>
 80054aa:	e6a5      	b.n	80051f8 <_dtoa_r+0x6d8>
 80054ac:	2600      	movs	r6, #0
 80054ae:	4637      	mov	r7, r6
 80054b0:	e7e1      	b.n	8005476 <_dtoa_r+0x956>
 80054b2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80054b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80054b8:	4637      	mov	r7, r6
 80054ba:	e599      	b.n	8004ff0 <_dtoa_r+0x4d0>
 80054bc:	9b08      	ldr	r3, [sp, #32]
 80054be:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80fd 	beq.w	80056c2 <_dtoa_r+0xba2>
 80054c8:	2d00      	cmp	r5, #0
 80054ca:	dd05      	ble.n	80054d8 <_dtoa_r+0x9b8>
 80054cc:	4639      	mov	r1, r7
 80054ce:	462a      	mov	r2, r5
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fc37 	bl	8005d44 <__lshift>
 80054d6:	4607      	mov	r7, r0
 80054d8:	9b06      	ldr	r3, [sp, #24]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d05c      	beq.n	8005598 <_dtoa_r+0xa78>
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4620      	mov	r0, r4
 80054e2:	f000 fa1d 	bl	8005920 <_Balloc>
 80054e6:	4605      	mov	r5, r0
 80054e8:	b928      	cbnz	r0, 80054f6 <_dtoa_r+0x9d6>
 80054ea:	4b80      	ldr	r3, [pc, #512]	; (80056ec <_dtoa_r+0xbcc>)
 80054ec:	4602      	mov	r2, r0
 80054ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80054f2:	f7ff bb2e 	b.w	8004b52 <_dtoa_r+0x32>
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	3202      	adds	r2, #2
 80054fa:	0092      	lsls	r2, r2, #2
 80054fc:	f107 010c 	add.w	r1, r7, #12
 8005500:	300c      	adds	r0, #12
 8005502:	f000 f9ff 	bl	8005904 <memcpy>
 8005506:	2201      	movs	r2, #1
 8005508:	4629      	mov	r1, r5
 800550a:	4620      	mov	r0, r4
 800550c:	f000 fc1a 	bl	8005d44 <__lshift>
 8005510:	9b00      	ldr	r3, [sp, #0]
 8005512:	3301      	adds	r3, #1
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	9b00      	ldr	r3, [sp, #0]
 8005518:	444b      	add	r3, r9
 800551a:	9307      	str	r3, [sp, #28]
 800551c:	9b02      	ldr	r3, [sp, #8]
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	46b8      	mov	r8, r7
 8005524:	9306      	str	r3, [sp, #24]
 8005526:	4607      	mov	r7, r0
 8005528:	9b01      	ldr	r3, [sp, #4]
 800552a:	4631      	mov	r1, r6
 800552c:	3b01      	subs	r3, #1
 800552e:	4658      	mov	r0, fp
 8005530:	9302      	str	r3, [sp, #8]
 8005532:	f7ff fa67 	bl	8004a04 <quorem>
 8005536:	4603      	mov	r3, r0
 8005538:	3330      	adds	r3, #48	; 0x30
 800553a:	9004      	str	r0, [sp, #16]
 800553c:	4641      	mov	r1, r8
 800553e:	4658      	mov	r0, fp
 8005540:	9308      	str	r3, [sp, #32]
 8005542:	f000 fc6b 	bl	8005e1c <__mcmp>
 8005546:	463a      	mov	r2, r7
 8005548:	4681      	mov	r9, r0
 800554a:	4631      	mov	r1, r6
 800554c:	4620      	mov	r0, r4
 800554e:	f000 fc81 	bl	8005e54 <__mdiff>
 8005552:	68c2      	ldr	r2, [r0, #12]
 8005554:	9b08      	ldr	r3, [sp, #32]
 8005556:	4605      	mov	r5, r0
 8005558:	bb02      	cbnz	r2, 800559c <_dtoa_r+0xa7c>
 800555a:	4601      	mov	r1, r0
 800555c:	4658      	mov	r0, fp
 800555e:	f000 fc5d 	bl	8005e1c <__mcmp>
 8005562:	9b08      	ldr	r3, [sp, #32]
 8005564:	4602      	mov	r2, r0
 8005566:	4629      	mov	r1, r5
 8005568:	4620      	mov	r0, r4
 800556a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800556e:	f000 fa17 	bl	80059a0 <_Bfree>
 8005572:	9b05      	ldr	r3, [sp, #20]
 8005574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005576:	9d01      	ldr	r5, [sp, #4]
 8005578:	ea43 0102 	orr.w	r1, r3, r2
 800557c:	9b06      	ldr	r3, [sp, #24]
 800557e:	430b      	orrs	r3, r1
 8005580:	9b08      	ldr	r3, [sp, #32]
 8005582:	d10d      	bne.n	80055a0 <_dtoa_r+0xa80>
 8005584:	2b39      	cmp	r3, #57	; 0x39
 8005586:	d029      	beq.n	80055dc <_dtoa_r+0xabc>
 8005588:	f1b9 0f00 	cmp.w	r9, #0
 800558c:	dd01      	ble.n	8005592 <_dtoa_r+0xa72>
 800558e:	9b04      	ldr	r3, [sp, #16]
 8005590:	3331      	adds	r3, #49	; 0x31
 8005592:	9a02      	ldr	r2, [sp, #8]
 8005594:	7013      	strb	r3, [r2, #0]
 8005596:	e774      	b.n	8005482 <_dtoa_r+0x962>
 8005598:	4638      	mov	r0, r7
 800559a:	e7b9      	b.n	8005510 <_dtoa_r+0x9f0>
 800559c:	2201      	movs	r2, #1
 800559e:	e7e2      	b.n	8005566 <_dtoa_r+0xa46>
 80055a0:	f1b9 0f00 	cmp.w	r9, #0
 80055a4:	db06      	blt.n	80055b4 <_dtoa_r+0xa94>
 80055a6:	9905      	ldr	r1, [sp, #20]
 80055a8:	ea41 0909 	orr.w	r9, r1, r9
 80055ac:	9906      	ldr	r1, [sp, #24]
 80055ae:	ea59 0101 	orrs.w	r1, r9, r1
 80055b2:	d120      	bne.n	80055f6 <_dtoa_r+0xad6>
 80055b4:	2a00      	cmp	r2, #0
 80055b6:	ddec      	ble.n	8005592 <_dtoa_r+0xa72>
 80055b8:	4659      	mov	r1, fp
 80055ba:	2201      	movs	r2, #1
 80055bc:	4620      	mov	r0, r4
 80055be:	9301      	str	r3, [sp, #4]
 80055c0:	f000 fbc0 	bl	8005d44 <__lshift>
 80055c4:	4631      	mov	r1, r6
 80055c6:	4683      	mov	fp, r0
 80055c8:	f000 fc28 	bl	8005e1c <__mcmp>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	9b01      	ldr	r3, [sp, #4]
 80055d0:	dc02      	bgt.n	80055d8 <_dtoa_r+0xab8>
 80055d2:	d1de      	bne.n	8005592 <_dtoa_r+0xa72>
 80055d4:	07da      	lsls	r2, r3, #31
 80055d6:	d5dc      	bpl.n	8005592 <_dtoa_r+0xa72>
 80055d8:	2b39      	cmp	r3, #57	; 0x39
 80055da:	d1d8      	bne.n	800558e <_dtoa_r+0xa6e>
 80055dc:	9a02      	ldr	r2, [sp, #8]
 80055de:	2339      	movs	r3, #57	; 0x39
 80055e0:	7013      	strb	r3, [r2, #0]
 80055e2:	462b      	mov	r3, r5
 80055e4:	461d      	mov	r5, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80055ec:	2a39      	cmp	r2, #57	; 0x39
 80055ee:	d050      	beq.n	8005692 <_dtoa_r+0xb72>
 80055f0:	3201      	adds	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	e745      	b.n	8005482 <_dtoa_r+0x962>
 80055f6:	2a00      	cmp	r2, #0
 80055f8:	dd03      	ble.n	8005602 <_dtoa_r+0xae2>
 80055fa:	2b39      	cmp	r3, #57	; 0x39
 80055fc:	d0ee      	beq.n	80055dc <_dtoa_r+0xabc>
 80055fe:	3301      	adds	r3, #1
 8005600:	e7c7      	b.n	8005592 <_dtoa_r+0xa72>
 8005602:	9a01      	ldr	r2, [sp, #4]
 8005604:	9907      	ldr	r1, [sp, #28]
 8005606:	f802 3c01 	strb.w	r3, [r2, #-1]
 800560a:	428a      	cmp	r2, r1
 800560c:	d02a      	beq.n	8005664 <_dtoa_r+0xb44>
 800560e:	4659      	mov	r1, fp
 8005610:	2300      	movs	r3, #0
 8005612:	220a      	movs	r2, #10
 8005614:	4620      	mov	r0, r4
 8005616:	f000 f9e5 	bl	80059e4 <__multadd>
 800561a:	45b8      	cmp	r8, r7
 800561c:	4683      	mov	fp, r0
 800561e:	f04f 0300 	mov.w	r3, #0
 8005622:	f04f 020a 	mov.w	r2, #10
 8005626:	4641      	mov	r1, r8
 8005628:	4620      	mov	r0, r4
 800562a:	d107      	bne.n	800563c <_dtoa_r+0xb1c>
 800562c:	f000 f9da 	bl	80059e4 <__multadd>
 8005630:	4680      	mov	r8, r0
 8005632:	4607      	mov	r7, r0
 8005634:	9b01      	ldr	r3, [sp, #4]
 8005636:	3301      	adds	r3, #1
 8005638:	9301      	str	r3, [sp, #4]
 800563a:	e775      	b.n	8005528 <_dtoa_r+0xa08>
 800563c:	f000 f9d2 	bl	80059e4 <__multadd>
 8005640:	4639      	mov	r1, r7
 8005642:	4680      	mov	r8, r0
 8005644:	2300      	movs	r3, #0
 8005646:	220a      	movs	r2, #10
 8005648:	4620      	mov	r0, r4
 800564a:	f000 f9cb 	bl	80059e4 <__multadd>
 800564e:	4607      	mov	r7, r0
 8005650:	e7f0      	b.n	8005634 <_dtoa_r+0xb14>
 8005652:	f1b9 0f00 	cmp.w	r9, #0
 8005656:	9a00      	ldr	r2, [sp, #0]
 8005658:	bfcc      	ite	gt
 800565a:	464d      	movgt	r5, r9
 800565c:	2501      	movle	r5, #1
 800565e:	4415      	add	r5, r2
 8005660:	f04f 0800 	mov.w	r8, #0
 8005664:	4659      	mov	r1, fp
 8005666:	2201      	movs	r2, #1
 8005668:	4620      	mov	r0, r4
 800566a:	9301      	str	r3, [sp, #4]
 800566c:	f000 fb6a 	bl	8005d44 <__lshift>
 8005670:	4631      	mov	r1, r6
 8005672:	4683      	mov	fp, r0
 8005674:	f000 fbd2 	bl	8005e1c <__mcmp>
 8005678:	2800      	cmp	r0, #0
 800567a:	dcb2      	bgt.n	80055e2 <_dtoa_r+0xac2>
 800567c:	d102      	bne.n	8005684 <_dtoa_r+0xb64>
 800567e:	9b01      	ldr	r3, [sp, #4]
 8005680:	07db      	lsls	r3, r3, #31
 8005682:	d4ae      	bmi.n	80055e2 <_dtoa_r+0xac2>
 8005684:	462b      	mov	r3, r5
 8005686:	461d      	mov	r5, r3
 8005688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568c:	2a30      	cmp	r2, #48	; 0x30
 800568e:	d0fa      	beq.n	8005686 <_dtoa_r+0xb66>
 8005690:	e6f7      	b.n	8005482 <_dtoa_r+0x962>
 8005692:	9a00      	ldr	r2, [sp, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d1a5      	bne.n	80055e4 <_dtoa_r+0xac4>
 8005698:	f10a 0a01 	add.w	sl, sl, #1
 800569c:	2331      	movs	r3, #49	; 0x31
 800569e:	e779      	b.n	8005594 <_dtoa_r+0xa74>
 80056a0:	4b13      	ldr	r3, [pc, #76]	; (80056f0 <_dtoa_r+0xbd0>)
 80056a2:	f7ff baaf 	b.w	8004c04 <_dtoa_r+0xe4>
 80056a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f47f aa86 	bne.w	8004bba <_dtoa_r+0x9a>
 80056ae:	4b11      	ldr	r3, [pc, #68]	; (80056f4 <_dtoa_r+0xbd4>)
 80056b0:	f7ff baa8 	b.w	8004c04 <_dtoa_r+0xe4>
 80056b4:	f1b9 0f00 	cmp.w	r9, #0
 80056b8:	dc03      	bgt.n	80056c2 <_dtoa_r+0xba2>
 80056ba:	9b05      	ldr	r3, [sp, #20]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f73f aec9 	bgt.w	8005454 <_dtoa_r+0x934>
 80056c2:	9d00      	ldr	r5, [sp, #0]
 80056c4:	4631      	mov	r1, r6
 80056c6:	4658      	mov	r0, fp
 80056c8:	f7ff f99c 	bl	8004a04 <quorem>
 80056cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80056d0:	f805 3b01 	strb.w	r3, [r5], #1
 80056d4:	9a00      	ldr	r2, [sp, #0]
 80056d6:	1aaa      	subs	r2, r5, r2
 80056d8:	4591      	cmp	r9, r2
 80056da:	ddba      	ble.n	8005652 <_dtoa_r+0xb32>
 80056dc:	4659      	mov	r1, fp
 80056de:	2300      	movs	r3, #0
 80056e0:	220a      	movs	r2, #10
 80056e2:	4620      	mov	r0, r4
 80056e4:	f000 f97e 	bl	80059e4 <__multadd>
 80056e8:	4683      	mov	fp, r0
 80056ea:	e7eb      	b.n	80056c4 <_dtoa_r+0xba4>
 80056ec:	08006f9f 	.word	0x08006f9f
 80056f0:	08006ef8 	.word	0x08006ef8
 80056f4:	08006f1c 	.word	0x08006f1c

080056f8 <std>:
 80056f8:	2300      	movs	r3, #0
 80056fa:	b510      	push	{r4, lr}
 80056fc:	4604      	mov	r4, r0
 80056fe:	e9c0 3300 	strd	r3, r3, [r0]
 8005702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005706:	6083      	str	r3, [r0, #8]
 8005708:	8181      	strh	r1, [r0, #12]
 800570a:	6643      	str	r3, [r0, #100]	; 0x64
 800570c:	81c2      	strh	r2, [r0, #14]
 800570e:	6183      	str	r3, [r0, #24]
 8005710:	4619      	mov	r1, r3
 8005712:	2208      	movs	r2, #8
 8005714:	305c      	adds	r0, #92	; 0x5c
 8005716:	f7fe fccb 	bl	80040b0 <memset>
 800571a:	4b05      	ldr	r3, [pc, #20]	; (8005730 <std+0x38>)
 800571c:	6263      	str	r3, [r4, #36]	; 0x24
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <std+0x3c>)
 8005720:	62a3      	str	r3, [r4, #40]	; 0x28
 8005722:	4b05      	ldr	r3, [pc, #20]	; (8005738 <std+0x40>)
 8005724:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005726:	4b05      	ldr	r3, [pc, #20]	; (800573c <std+0x44>)
 8005728:	6224      	str	r4, [r4, #32]
 800572a:	6323      	str	r3, [r4, #48]	; 0x30
 800572c:	bd10      	pop	{r4, pc}
 800572e:	bf00      	nop
 8005730:	0800671d 	.word	0x0800671d
 8005734:	0800673f 	.word	0x0800673f
 8005738:	08006777 	.word	0x08006777
 800573c:	0800679b 	.word	0x0800679b

08005740 <_cleanup_r>:
 8005740:	4901      	ldr	r1, [pc, #4]	; (8005748 <_cleanup_r+0x8>)
 8005742:	f000 b8af 	b.w	80058a4 <_fwalk_reent>
 8005746:	bf00      	nop
 8005748:	08006ab1 	.word	0x08006ab1

0800574c <__sfmoreglue>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	1e4a      	subs	r2, r1, #1
 8005750:	2568      	movs	r5, #104	; 0x68
 8005752:	4355      	muls	r5, r2
 8005754:	460e      	mov	r6, r1
 8005756:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800575a:	f000 fcbf 	bl	80060dc <_malloc_r>
 800575e:	4604      	mov	r4, r0
 8005760:	b140      	cbz	r0, 8005774 <__sfmoreglue+0x28>
 8005762:	2100      	movs	r1, #0
 8005764:	e9c0 1600 	strd	r1, r6, [r0]
 8005768:	300c      	adds	r0, #12
 800576a:	60a0      	str	r0, [r4, #8]
 800576c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005770:	f7fe fc9e 	bl	80040b0 <memset>
 8005774:	4620      	mov	r0, r4
 8005776:	bd70      	pop	{r4, r5, r6, pc}

08005778 <__sfp_lock_acquire>:
 8005778:	4801      	ldr	r0, [pc, #4]	; (8005780 <__sfp_lock_acquire+0x8>)
 800577a:	f000 b8b8 	b.w	80058ee <__retarget_lock_acquire_recursive>
 800577e:	bf00      	nop
 8005780:	20000364 	.word	0x20000364

08005784 <__sfp_lock_release>:
 8005784:	4801      	ldr	r0, [pc, #4]	; (800578c <__sfp_lock_release+0x8>)
 8005786:	f000 b8b3 	b.w	80058f0 <__retarget_lock_release_recursive>
 800578a:	bf00      	nop
 800578c:	20000364 	.word	0x20000364

08005790 <__sinit_lock_acquire>:
 8005790:	4801      	ldr	r0, [pc, #4]	; (8005798 <__sinit_lock_acquire+0x8>)
 8005792:	f000 b8ac 	b.w	80058ee <__retarget_lock_acquire_recursive>
 8005796:	bf00      	nop
 8005798:	2000035f 	.word	0x2000035f

0800579c <__sinit_lock_release>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__sinit_lock_release+0x8>)
 800579e:	f000 b8a7 	b.w	80058f0 <__retarget_lock_release_recursive>
 80057a2:	bf00      	nop
 80057a4:	2000035f 	.word	0x2000035f

080057a8 <__sinit>:
 80057a8:	b510      	push	{r4, lr}
 80057aa:	4604      	mov	r4, r0
 80057ac:	f7ff fff0 	bl	8005790 <__sinit_lock_acquire>
 80057b0:	69a3      	ldr	r3, [r4, #24]
 80057b2:	b11b      	cbz	r3, 80057bc <__sinit+0x14>
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	f7ff bff0 	b.w	800579c <__sinit_lock_release>
 80057bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80057c0:	6523      	str	r3, [r4, #80]	; 0x50
 80057c2:	4b13      	ldr	r3, [pc, #76]	; (8005810 <__sinit+0x68>)
 80057c4:	4a13      	ldr	r2, [pc, #76]	; (8005814 <__sinit+0x6c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80057ca:	42a3      	cmp	r3, r4
 80057cc:	bf04      	itt	eq
 80057ce:	2301      	moveq	r3, #1
 80057d0:	61a3      	streq	r3, [r4, #24]
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 f820 	bl	8005818 <__sfp>
 80057d8:	6060      	str	r0, [r4, #4]
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 f81c 	bl	8005818 <__sfp>
 80057e0:	60a0      	str	r0, [r4, #8]
 80057e2:	4620      	mov	r0, r4
 80057e4:	f000 f818 	bl	8005818 <__sfp>
 80057e8:	2200      	movs	r2, #0
 80057ea:	60e0      	str	r0, [r4, #12]
 80057ec:	2104      	movs	r1, #4
 80057ee:	6860      	ldr	r0, [r4, #4]
 80057f0:	f7ff ff82 	bl	80056f8 <std>
 80057f4:	68a0      	ldr	r0, [r4, #8]
 80057f6:	2201      	movs	r2, #1
 80057f8:	2109      	movs	r1, #9
 80057fa:	f7ff ff7d 	bl	80056f8 <std>
 80057fe:	68e0      	ldr	r0, [r4, #12]
 8005800:	2202      	movs	r2, #2
 8005802:	2112      	movs	r1, #18
 8005804:	f7ff ff78 	bl	80056f8 <std>
 8005808:	2301      	movs	r3, #1
 800580a:	61a3      	str	r3, [r4, #24]
 800580c:	e7d2      	b.n	80057b4 <__sinit+0xc>
 800580e:	bf00      	nop
 8005810:	08006ee4 	.word	0x08006ee4
 8005814:	08005741 	.word	0x08005741

08005818 <__sfp>:
 8005818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581a:	4607      	mov	r7, r0
 800581c:	f7ff ffac 	bl	8005778 <__sfp_lock_acquire>
 8005820:	4b1e      	ldr	r3, [pc, #120]	; (800589c <__sfp+0x84>)
 8005822:	681e      	ldr	r6, [r3, #0]
 8005824:	69b3      	ldr	r3, [r6, #24]
 8005826:	b913      	cbnz	r3, 800582e <__sfp+0x16>
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ffbd 	bl	80057a8 <__sinit>
 800582e:	3648      	adds	r6, #72	; 0x48
 8005830:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	d503      	bpl.n	8005840 <__sfp+0x28>
 8005838:	6833      	ldr	r3, [r6, #0]
 800583a:	b30b      	cbz	r3, 8005880 <__sfp+0x68>
 800583c:	6836      	ldr	r6, [r6, #0]
 800583e:	e7f7      	b.n	8005830 <__sfp+0x18>
 8005840:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005844:	b9d5      	cbnz	r5, 800587c <__sfp+0x64>
 8005846:	4b16      	ldr	r3, [pc, #88]	; (80058a0 <__sfp+0x88>)
 8005848:	60e3      	str	r3, [r4, #12]
 800584a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800584e:	6665      	str	r5, [r4, #100]	; 0x64
 8005850:	f000 f84c 	bl	80058ec <__retarget_lock_init_recursive>
 8005854:	f7ff ff96 	bl	8005784 <__sfp_lock_release>
 8005858:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800585c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005860:	6025      	str	r5, [r4, #0]
 8005862:	61a5      	str	r5, [r4, #24]
 8005864:	2208      	movs	r2, #8
 8005866:	4629      	mov	r1, r5
 8005868:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800586c:	f7fe fc20 	bl	80040b0 <memset>
 8005870:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005874:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005878:	4620      	mov	r0, r4
 800587a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800587c:	3468      	adds	r4, #104	; 0x68
 800587e:	e7d9      	b.n	8005834 <__sfp+0x1c>
 8005880:	2104      	movs	r1, #4
 8005882:	4638      	mov	r0, r7
 8005884:	f7ff ff62 	bl	800574c <__sfmoreglue>
 8005888:	4604      	mov	r4, r0
 800588a:	6030      	str	r0, [r6, #0]
 800588c:	2800      	cmp	r0, #0
 800588e:	d1d5      	bne.n	800583c <__sfp+0x24>
 8005890:	f7ff ff78 	bl	8005784 <__sfp_lock_release>
 8005894:	230c      	movs	r3, #12
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	e7ee      	b.n	8005878 <__sfp+0x60>
 800589a:	bf00      	nop
 800589c:	08006ee4 	.word	0x08006ee4
 80058a0:	ffff0001 	.word	0xffff0001

080058a4 <_fwalk_reent>:
 80058a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058a8:	4606      	mov	r6, r0
 80058aa:	4688      	mov	r8, r1
 80058ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80058b0:	2700      	movs	r7, #0
 80058b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058b6:	f1b9 0901 	subs.w	r9, r9, #1
 80058ba:	d505      	bpl.n	80058c8 <_fwalk_reent+0x24>
 80058bc:	6824      	ldr	r4, [r4, #0]
 80058be:	2c00      	cmp	r4, #0
 80058c0:	d1f7      	bne.n	80058b2 <_fwalk_reent+0xe>
 80058c2:	4638      	mov	r0, r7
 80058c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058c8:	89ab      	ldrh	r3, [r5, #12]
 80058ca:	2b01      	cmp	r3, #1
 80058cc:	d907      	bls.n	80058de <_fwalk_reent+0x3a>
 80058ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d2:	3301      	adds	r3, #1
 80058d4:	d003      	beq.n	80058de <_fwalk_reent+0x3a>
 80058d6:	4629      	mov	r1, r5
 80058d8:	4630      	mov	r0, r6
 80058da:	47c0      	blx	r8
 80058dc:	4307      	orrs	r7, r0
 80058de:	3568      	adds	r5, #104	; 0x68
 80058e0:	e7e9      	b.n	80058b6 <_fwalk_reent+0x12>
	...

080058e4 <_localeconv_r>:
 80058e4:	4800      	ldr	r0, [pc, #0]	; (80058e8 <_localeconv_r+0x4>)
 80058e6:	4770      	bx	lr
 80058e8:	20000160 	.word	0x20000160

080058ec <__retarget_lock_init_recursive>:
 80058ec:	4770      	bx	lr

080058ee <__retarget_lock_acquire_recursive>:
 80058ee:	4770      	bx	lr

080058f0 <__retarget_lock_release_recursive>:
 80058f0:	4770      	bx	lr
	...

080058f4 <malloc>:
 80058f4:	4b02      	ldr	r3, [pc, #8]	; (8005900 <malloc+0xc>)
 80058f6:	4601      	mov	r1, r0
 80058f8:	6818      	ldr	r0, [r3, #0]
 80058fa:	f000 bbef 	b.w	80060dc <_malloc_r>
 80058fe:	bf00      	nop
 8005900:	2000000c 	.word	0x2000000c

08005904 <memcpy>:
 8005904:	440a      	add	r2, r1
 8005906:	4291      	cmp	r1, r2
 8005908:	f100 33ff 	add.w	r3, r0, #4294967295
 800590c:	d100      	bne.n	8005910 <memcpy+0xc>
 800590e:	4770      	bx	lr
 8005910:	b510      	push	{r4, lr}
 8005912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005916:	f803 4f01 	strb.w	r4, [r3, #1]!
 800591a:	4291      	cmp	r1, r2
 800591c:	d1f9      	bne.n	8005912 <memcpy+0xe>
 800591e:	bd10      	pop	{r4, pc}

08005920 <_Balloc>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005924:	4604      	mov	r4, r0
 8005926:	460d      	mov	r5, r1
 8005928:	b976      	cbnz	r6, 8005948 <_Balloc+0x28>
 800592a:	2010      	movs	r0, #16
 800592c:	f7ff ffe2 	bl	80058f4 <malloc>
 8005930:	4602      	mov	r2, r0
 8005932:	6260      	str	r0, [r4, #36]	; 0x24
 8005934:	b920      	cbnz	r0, 8005940 <_Balloc+0x20>
 8005936:	4b18      	ldr	r3, [pc, #96]	; (8005998 <_Balloc+0x78>)
 8005938:	4818      	ldr	r0, [pc, #96]	; (800599c <_Balloc+0x7c>)
 800593a:	2166      	movs	r1, #102	; 0x66
 800593c:	f001 f804 	bl	8006948 <__assert_func>
 8005940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005944:	6006      	str	r6, [r0, #0]
 8005946:	60c6      	str	r6, [r0, #12]
 8005948:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800594a:	68f3      	ldr	r3, [r6, #12]
 800594c:	b183      	cbz	r3, 8005970 <_Balloc+0x50>
 800594e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005956:	b9b8      	cbnz	r0, 8005988 <_Balloc+0x68>
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f605 	lsl.w	r6, r1, r5
 800595e:	1d72      	adds	r2, r6, #5
 8005960:	0092      	lsls	r2, r2, #2
 8005962:	4620      	mov	r0, r4
 8005964:	f000 fb5a 	bl	800601c <_calloc_r>
 8005968:	b160      	cbz	r0, 8005984 <_Balloc+0x64>
 800596a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800596e:	e00e      	b.n	800598e <_Balloc+0x6e>
 8005970:	2221      	movs	r2, #33	; 0x21
 8005972:	2104      	movs	r1, #4
 8005974:	4620      	mov	r0, r4
 8005976:	f000 fb51 	bl	800601c <_calloc_r>
 800597a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800597c:	60f0      	str	r0, [r6, #12]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e4      	bne.n	800594e <_Balloc+0x2e>
 8005984:	2000      	movs	r0, #0
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	6802      	ldr	r2, [r0, #0]
 800598a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800598e:	2300      	movs	r3, #0
 8005990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005994:	e7f7      	b.n	8005986 <_Balloc+0x66>
 8005996:	bf00      	nop
 8005998:	08006f29 	.word	0x08006f29
 800599c:	08007010 	.word	0x08007010

080059a0 <_Bfree>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059a4:	4605      	mov	r5, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	b976      	cbnz	r6, 80059c8 <_Bfree+0x28>
 80059aa:	2010      	movs	r0, #16
 80059ac:	f7ff ffa2 	bl	80058f4 <malloc>
 80059b0:	4602      	mov	r2, r0
 80059b2:	6268      	str	r0, [r5, #36]	; 0x24
 80059b4:	b920      	cbnz	r0, 80059c0 <_Bfree+0x20>
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <_Bfree+0x3c>)
 80059b8:	4809      	ldr	r0, [pc, #36]	; (80059e0 <_Bfree+0x40>)
 80059ba:	218a      	movs	r1, #138	; 0x8a
 80059bc:	f000 ffc4 	bl	8006948 <__assert_func>
 80059c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059c4:	6006      	str	r6, [r0, #0]
 80059c6:	60c6      	str	r6, [r0, #12]
 80059c8:	b13c      	cbz	r4, 80059da <_Bfree+0x3a>
 80059ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80059cc:	6862      	ldr	r2, [r4, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059d4:	6021      	str	r1, [r4, #0]
 80059d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	08006f29 	.word	0x08006f29
 80059e0:	08007010 	.word	0x08007010

080059e4 <__multadd>:
 80059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e8:	690e      	ldr	r6, [r1, #16]
 80059ea:	4607      	mov	r7, r0
 80059ec:	4698      	mov	r8, r3
 80059ee:	460c      	mov	r4, r1
 80059f0:	f101 0014 	add.w	r0, r1, #20
 80059f4:	2300      	movs	r3, #0
 80059f6:	6805      	ldr	r5, [r0, #0]
 80059f8:	b2a9      	uxth	r1, r5
 80059fa:	fb02 8101 	mla	r1, r2, r1, r8
 80059fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a02:	0c2d      	lsrs	r5, r5, #16
 8005a04:	fb02 c505 	mla	r5, r2, r5, ip
 8005a08:	b289      	uxth	r1, r1
 8005a0a:	3301      	adds	r3, #1
 8005a0c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a10:	429e      	cmp	r6, r3
 8005a12:	f840 1b04 	str.w	r1, [r0], #4
 8005a16:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a1a:	dcec      	bgt.n	80059f6 <__multadd+0x12>
 8005a1c:	f1b8 0f00 	cmp.w	r8, #0
 8005a20:	d022      	beq.n	8005a68 <__multadd+0x84>
 8005a22:	68a3      	ldr	r3, [r4, #8]
 8005a24:	42b3      	cmp	r3, r6
 8005a26:	dc19      	bgt.n	8005a5c <__multadd+0x78>
 8005a28:	6861      	ldr	r1, [r4, #4]
 8005a2a:	4638      	mov	r0, r7
 8005a2c:	3101      	adds	r1, #1
 8005a2e:	f7ff ff77 	bl	8005920 <_Balloc>
 8005a32:	4605      	mov	r5, r0
 8005a34:	b928      	cbnz	r0, 8005a42 <__multadd+0x5e>
 8005a36:	4602      	mov	r2, r0
 8005a38:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <__multadd+0x8c>)
 8005a3a:	480e      	ldr	r0, [pc, #56]	; (8005a74 <__multadd+0x90>)
 8005a3c:	21b5      	movs	r1, #181	; 0xb5
 8005a3e:	f000 ff83 	bl	8006948 <__assert_func>
 8005a42:	6922      	ldr	r2, [r4, #16]
 8005a44:	3202      	adds	r2, #2
 8005a46:	f104 010c 	add.w	r1, r4, #12
 8005a4a:	0092      	lsls	r2, r2, #2
 8005a4c:	300c      	adds	r0, #12
 8005a4e:	f7ff ff59 	bl	8005904 <memcpy>
 8005a52:	4621      	mov	r1, r4
 8005a54:	4638      	mov	r0, r7
 8005a56:	f7ff ffa3 	bl	80059a0 <_Bfree>
 8005a5a:	462c      	mov	r4, r5
 8005a5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005a60:	3601      	adds	r6, #1
 8005a62:	f8c3 8014 	str.w	r8, [r3, #20]
 8005a66:	6126      	str	r6, [r4, #16]
 8005a68:	4620      	mov	r0, r4
 8005a6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a6e:	bf00      	nop
 8005a70:	08006f9f 	.word	0x08006f9f
 8005a74:	08007010 	.word	0x08007010

08005a78 <__hi0bits>:
 8005a78:	0c03      	lsrs	r3, r0, #16
 8005a7a:	041b      	lsls	r3, r3, #16
 8005a7c:	b9d3      	cbnz	r3, 8005ab4 <__hi0bits+0x3c>
 8005a7e:	0400      	lsls	r0, r0, #16
 8005a80:	2310      	movs	r3, #16
 8005a82:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005a86:	bf04      	itt	eq
 8005a88:	0200      	lsleq	r0, r0, #8
 8005a8a:	3308      	addeq	r3, #8
 8005a8c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005a90:	bf04      	itt	eq
 8005a92:	0100      	lsleq	r0, r0, #4
 8005a94:	3304      	addeq	r3, #4
 8005a96:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005a9a:	bf04      	itt	eq
 8005a9c:	0080      	lsleq	r0, r0, #2
 8005a9e:	3302      	addeq	r3, #2
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	db05      	blt.n	8005ab0 <__hi0bits+0x38>
 8005aa4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005aa8:	f103 0301 	add.w	r3, r3, #1
 8005aac:	bf08      	it	eq
 8005aae:	2320      	moveq	r3, #32
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	4770      	bx	lr
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	e7e4      	b.n	8005a82 <__hi0bits+0xa>

08005ab8 <__lo0bits>:
 8005ab8:	6803      	ldr	r3, [r0, #0]
 8005aba:	f013 0207 	ands.w	r2, r3, #7
 8005abe:	4601      	mov	r1, r0
 8005ac0:	d00b      	beq.n	8005ada <__lo0bits+0x22>
 8005ac2:	07da      	lsls	r2, r3, #31
 8005ac4:	d424      	bmi.n	8005b10 <__lo0bits+0x58>
 8005ac6:	0798      	lsls	r0, r3, #30
 8005ac8:	bf49      	itett	mi
 8005aca:	085b      	lsrmi	r3, r3, #1
 8005acc:	089b      	lsrpl	r3, r3, #2
 8005ace:	2001      	movmi	r0, #1
 8005ad0:	600b      	strmi	r3, [r1, #0]
 8005ad2:	bf5c      	itt	pl
 8005ad4:	600b      	strpl	r3, [r1, #0]
 8005ad6:	2002      	movpl	r0, #2
 8005ad8:	4770      	bx	lr
 8005ada:	b298      	uxth	r0, r3
 8005adc:	b9b0      	cbnz	r0, 8005b0c <__lo0bits+0x54>
 8005ade:	0c1b      	lsrs	r3, r3, #16
 8005ae0:	2010      	movs	r0, #16
 8005ae2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005ae6:	bf04      	itt	eq
 8005ae8:	0a1b      	lsreq	r3, r3, #8
 8005aea:	3008      	addeq	r0, #8
 8005aec:	071a      	lsls	r2, r3, #28
 8005aee:	bf04      	itt	eq
 8005af0:	091b      	lsreq	r3, r3, #4
 8005af2:	3004      	addeq	r0, #4
 8005af4:	079a      	lsls	r2, r3, #30
 8005af6:	bf04      	itt	eq
 8005af8:	089b      	lsreq	r3, r3, #2
 8005afa:	3002      	addeq	r0, #2
 8005afc:	07da      	lsls	r2, r3, #31
 8005afe:	d403      	bmi.n	8005b08 <__lo0bits+0x50>
 8005b00:	085b      	lsrs	r3, r3, #1
 8005b02:	f100 0001 	add.w	r0, r0, #1
 8005b06:	d005      	beq.n	8005b14 <__lo0bits+0x5c>
 8005b08:	600b      	str	r3, [r1, #0]
 8005b0a:	4770      	bx	lr
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	e7e8      	b.n	8005ae2 <__lo0bits+0x2a>
 8005b10:	2000      	movs	r0, #0
 8005b12:	4770      	bx	lr
 8005b14:	2020      	movs	r0, #32
 8005b16:	4770      	bx	lr

08005b18 <__i2b>:
 8005b18:	b510      	push	{r4, lr}
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	f7ff feff 	bl	8005920 <_Balloc>
 8005b22:	4602      	mov	r2, r0
 8005b24:	b928      	cbnz	r0, 8005b32 <__i2b+0x1a>
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <__i2b+0x24>)
 8005b28:	4805      	ldr	r0, [pc, #20]	; (8005b40 <__i2b+0x28>)
 8005b2a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005b2e:	f000 ff0b 	bl	8006948 <__assert_func>
 8005b32:	2301      	movs	r3, #1
 8005b34:	6144      	str	r4, [r0, #20]
 8005b36:	6103      	str	r3, [r0, #16]
 8005b38:	bd10      	pop	{r4, pc}
 8005b3a:	bf00      	nop
 8005b3c:	08006f9f 	.word	0x08006f9f
 8005b40:	08007010 	.word	0x08007010

08005b44 <__multiply>:
 8005b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b48:	4614      	mov	r4, r2
 8005b4a:	690a      	ldr	r2, [r1, #16]
 8005b4c:	6923      	ldr	r3, [r4, #16]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	bfb8      	it	lt
 8005b52:	460b      	movlt	r3, r1
 8005b54:	460d      	mov	r5, r1
 8005b56:	bfbc      	itt	lt
 8005b58:	4625      	movlt	r5, r4
 8005b5a:	461c      	movlt	r4, r3
 8005b5c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005b60:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005b64:	68ab      	ldr	r3, [r5, #8]
 8005b66:	6869      	ldr	r1, [r5, #4]
 8005b68:	eb0a 0709 	add.w	r7, sl, r9
 8005b6c:	42bb      	cmp	r3, r7
 8005b6e:	b085      	sub	sp, #20
 8005b70:	bfb8      	it	lt
 8005b72:	3101      	addlt	r1, #1
 8005b74:	f7ff fed4 	bl	8005920 <_Balloc>
 8005b78:	b930      	cbnz	r0, 8005b88 <__multiply+0x44>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	4b42      	ldr	r3, [pc, #264]	; (8005c88 <__multiply+0x144>)
 8005b7e:	4843      	ldr	r0, [pc, #268]	; (8005c8c <__multiply+0x148>)
 8005b80:	f240 115d 	movw	r1, #349	; 0x15d
 8005b84:	f000 fee0 	bl	8006948 <__assert_func>
 8005b88:	f100 0614 	add.w	r6, r0, #20
 8005b8c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005b90:	4633      	mov	r3, r6
 8005b92:	2200      	movs	r2, #0
 8005b94:	4543      	cmp	r3, r8
 8005b96:	d31e      	bcc.n	8005bd6 <__multiply+0x92>
 8005b98:	f105 0c14 	add.w	ip, r5, #20
 8005b9c:	f104 0314 	add.w	r3, r4, #20
 8005ba0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005ba4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005ba8:	9202      	str	r2, [sp, #8]
 8005baa:	ebac 0205 	sub.w	r2, ip, r5
 8005bae:	3a15      	subs	r2, #21
 8005bb0:	f022 0203 	bic.w	r2, r2, #3
 8005bb4:	3204      	adds	r2, #4
 8005bb6:	f105 0115 	add.w	r1, r5, #21
 8005bba:	458c      	cmp	ip, r1
 8005bbc:	bf38      	it	cc
 8005bbe:	2204      	movcc	r2, #4
 8005bc0:	9201      	str	r2, [sp, #4]
 8005bc2:	9a02      	ldr	r2, [sp, #8]
 8005bc4:	9303      	str	r3, [sp, #12]
 8005bc6:	429a      	cmp	r2, r3
 8005bc8:	d808      	bhi.n	8005bdc <__multiply+0x98>
 8005bca:	2f00      	cmp	r7, #0
 8005bcc:	dc55      	bgt.n	8005c7a <__multiply+0x136>
 8005bce:	6107      	str	r7, [r0, #16]
 8005bd0:	b005      	add	sp, #20
 8005bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd6:	f843 2b04 	str.w	r2, [r3], #4
 8005bda:	e7db      	b.n	8005b94 <__multiply+0x50>
 8005bdc:	f8b3 a000 	ldrh.w	sl, [r3]
 8005be0:	f1ba 0f00 	cmp.w	sl, #0
 8005be4:	d020      	beq.n	8005c28 <__multiply+0xe4>
 8005be6:	f105 0e14 	add.w	lr, r5, #20
 8005bea:	46b1      	mov	r9, r6
 8005bec:	2200      	movs	r2, #0
 8005bee:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005bf2:	f8d9 b000 	ldr.w	fp, [r9]
 8005bf6:	b2a1      	uxth	r1, r4
 8005bf8:	fa1f fb8b 	uxth.w	fp, fp
 8005bfc:	fb0a b101 	mla	r1, sl, r1, fp
 8005c00:	4411      	add	r1, r2
 8005c02:	f8d9 2000 	ldr.w	r2, [r9]
 8005c06:	0c24      	lsrs	r4, r4, #16
 8005c08:	0c12      	lsrs	r2, r2, #16
 8005c0a:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c0e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c12:	b289      	uxth	r1, r1
 8005c14:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c18:	45f4      	cmp	ip, lr
 8005c1a:	f849 1b04 	str.w	r1, [r9], #4
 8005c1e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005c22:	d8e4      	bhi.n	8005bee <__multiply+0xaa>
 8005c24:	9901      	ldr	r1, [sp, #4]
 8005c26:	5072      	str	r2, [r6, r1]
 8005c28:	9a03      	ldr	r2, [sp, #12]
 8005c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	f1b9 0f00 	cmp.w	r9, #0
 8005c34:	d01f      	beq.n	8005c76 <__multiply+0x132>
 8005c36:	6834      	ldr	r4, [r6, #0]
 8005c38:	f105 0114 	add.w	r1, r5, #20
 8005c3c:	46b6      	mov	lr, r6
 8005c3e:	f04f 0a00 	mov.w	sl, #0
 8005c42:	880a      	ldrh	r2, [r1, #0]
 8005c44:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005c48:	fb09 b202 	mla	r2, r9, r2, fp
 8005c4c:	4492      	add	sl, r2
 8005c4e:	b2a4      	uxth	r4, r4
 8005c50:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005c54:	f84e 4b04 	str.w	r4, [lr], #4
 8005c58:	f851 4b04 	ldr.w	r4, [r1], #4
 8005c5c:	f8be 2000 	ldrh.w	r2, [lr]
 8005c60:	0c24      	lsrs	r4, r4, #16
 8005c62:	fb09 2404 	mla	r4, r9, r4, r2
 8005c66:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005c6a:	458c      	cmp	ip, r1
 8005c6c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005c70:	d8e7      	bhi.n	8005c42 <__multiply+0xfe>
 8005c72:	9a01      	ldr	r2, [sp, #4]
 8005c74:	50b4      	str	r4, [r6, r2]
 8005c76:	3604      	adds	r6, #4
 8005c78:	e7a3      	b.n	8005bc2 <__multiply+0x7e>
 8005c7a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1a5      	bne.n	8005bce <__multiply+0x8a>
 8005c82:	3f01      	subs	r7, #1
 8005c84:	e7a1      	b.n	8005bca <__multiply+0x86>
 8005c86:	bf00      	nop
 8005c88:	08006f9f 	.word	0x08006f9f
 8005c8c:	08007010 	.word	0x08007010

08005c90 <__pow5mult>:
 8005c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c94:	4615      	mov	r5, r2
 8005c96:	f012 0203 	ands.w	r2, r2, #3
 8005c9a:	4606      	mov	r6, r0
 8005c9c:	460f      	mov	r7, r1
 8005c9e:	d007      	beq.n	8005cb0 <__pow5mult+0x20>
 8005ca0:	4c25      	ldr	r4, [pc, #148]	; (8005d38 <__pow5mult+0xa8>)
 8005ca2:	3a01      	subs	r2, #1
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005caa:	f7ff fe9b 	bl	80059e4 <__multadd>
 8005cae:	4607      	mov	r7, r0
 8005cb0:	10ad      	asrs	r5, r5, #2
 8005cb2:	d03d      	beq.n	8005d30 <__pow5mult+0xa0>
 8005cb4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005cb6:	b97c      	cbnz	r4, 8005cd8 <__pow5mult+0x48>
 8005cb8:	2010      	movs	r0, #16
 8005cba:	f7ff fe1b 	bl	80058f4 <malloc>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	6270      	str	r0, [r6, #36]	; 0x24
 8005cc2:	b928      	cbnz	r0, 8005cd0 <__pow5mult+0x40>
 8005cc4:	4b1d      	ldr	r3, [pc, #116]	; (8005d3c <__pow5mult+0xac>)
 8005cc6:	481e      	ldr	r0, [pc, #120]	; (8005d40 <__pow5mult+0xb0>)
 8005cc8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005ccc:	f000 fe3c 	bl	8006948 <__assert_func>
 8005cd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cd4:	6004      	str	r4, [r0, #0]
 8005cd6:	60c4      	str	r4, [r0, #12]
 8005cd8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005cdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ce0:	b94c      	cbnz	r4, 8005cf6 <__pow5mult+0x66>
 8005ce2:	f240 2171 	movw	r1, #625	; 0x271
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7ff ff16 	bl	8005b18 <__i2b>
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	6003      	str	r3, [r0, #0]
 8005cf6:	f04f 0900 	mov.w	r9, #0
 8005cfa:	07eb      	lsls	r3, r5, #31
 8005cfc:	d50a      	bpl.n	8005d14 <__pow5mult+0x84>
 8005cfe:	4639      	mov	r1, r7
 8005d00:	4622      	mov	r2, r4
 8005d02:	4630      	mov	r0, r6
 8005d04:	f7ff ff1e 	bl	8005b44 <__multiply>
 8005d08:	4639      	mov	r1, r7
 8005d0a:	4680      	mov	r8, r0
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f7ff fe47 	bl	80059a0 <_Bfree>
 8005d12:	4647      	mov	r7, r8
 8005d14:	106d      	asrs	r5, r5, #1
 8005d16:	d00b      	beq.n	8005d30 <__pow5mult+0xa0>
 8005d18:	6820      	ldr	r0, [r4, #0]
 8005d1a:	b938      	cbnz	r0, 8005d2c <__pow5mult+0x9c>
 8005d1c:	4622      	mov	r2, r4
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4630      	mov	r0, r6
 8005d22:	f7ff ff0f 	bl	8005b44 <__multiply>
 8005d26:	6020      	str	r0, [r4, #0]
 8005d28:	f8c0 9000 	str.w	r9, [r0]
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	e7e4      	b.n	8005cfa <__pow5mult+0x6a>
 8005d30:	4638      	mov	r0, r7
 8005d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d36:	bf00      	nop
 8005d38:	08007160 	.word	0x08007160
 8005d3c:	08006f29 	.word	0x08006f29
 8005d40:	08007010 	.word	0x08007010

08005d44 <__lshift>:
 8005d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d48:	460c      	mov	r4, r1
 8005d4a:	6849      	ldr	r1, [r1, #4]
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d52:	68a3      	ldr	r3, [r4, #8]
 8005d54:	4607      	mov	r7, r0
 8005d56:	4691      	mov	r9, r2
 8005d58:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d5c:	f108 0601 	add.w	r6, r8, #1
 8005d60:	42b3      	cmp	r3, r6
 8005d62:	db0b      	blt.n	8005d7c <__lshift+0x38>
 8005d64:	4638      	mov	r0, r7
 8005d66:	f7ff fddb 	bl	8005920 <_Balloc>
 8005d6a:	4605      	mov	r5, r0
 8005d6c:	b948      	cbnz	r0, 8005d82 <__lshift+0x3e>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <__lshift+0xd0>)
 8005d72:	4829      	ldr	r0, [pc, #164]	; (8005e18 <__lshift+0xd4>)
 8005d74:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d78:	f000 fde6 	bl	8006948 <__assert_func>
 8005d7c:	3101      	adds	r1, #1
 8005d7e:	005b      	lsls	r3, r3, #1
 8005d80:	e7ee      	b.n	8005d60 <__lshift+0x1c>
 8005d82:	2300      	movs	r3, #0
 8005d84:	f100 0114 	add.w	r1, r0, #20
 8005d88:	f100 0210 	add.w	r2, r0, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	4553      	cmp	r3, sl
 8005d90:	db33      	blt.n	8005dfa <__lshift+0xb6>
 8005d92:	6920      	ldr	r0, [r4, #16]
 8005d94:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d98:	f104 0314 	add.w	r3, r4, #20
 8005d9c:	f019 091f 	ands.w	r9, r9, #31
 8005da0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005da4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005da8:	d02b      	beq.n	8005e02 <__lshift+0xbe>
 8005daa:	f1c9 0e20 	rsb	lr, r9, #32
 8005dae:	468a      	mov	sl, r1
 8005db0:	2200      	movs	r2, #0
 8005db2:	6818      	ldr	r0, [r3, #0]
 8005db4:	fa00 f009 	lsl.w	r0, r0, r9
 8005db8:	4302      	orrs	r2, r0
 8005dba:	f84a 2b04 	str.w	r2, [sl], #4
 8005dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dc2:	459c      	cmp	ip, r3
 8005dc4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005dc8:	d8f3      	bhi.n	8005db2 <__lshift+0x6e>
 8005dca:	ebac 0304 	sub.w	r3, ip, r4
 8005dce:	3b15      	subs	r3, #21
 8005dd0:	f023 0303 	bic.w	r3, r3, #3
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	f104 0015 	add.w	r0, r4, #21
 8005dda:	4584      	cmp	ip, r0
 8005ddc:	bf38      	it	cc
 8005dde:	2304      	movcc	r3, #4
 8005de0:	50ca      	str	r2, [r1, r3]
 8005de2:	b10a      	cbz	r2, 8005de8 <__lshift+0xa4>
 8005de4:	f108 0602 	add.w	r6, r8, #2
 8005de8:	3e01      	subs	r6, #1
 8005dea:	4638      	mov	r0, r7
 8005dec:	612e      	str	r6, [r5, #16]
 8005dee:	4621      	mov	r1, r4
 8005df0:	f7ff fdd6 	bl	80059a0 <_Bfree>
 8005df4:	4628      	mov	r0, r5
 8005df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfa:	f842 0f04 	str.w	r0, [r2, #4]!
 8005dfe:	3301      	adds	r3, #1
 8005e00:	e7c5      	b.n	8005d8e <__lshift+0x4a>
 8005e02:	3904      	subs	r1, #4
 8005e04:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e08:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e0c:	459c      	cmp	ip, r3
 8005e0e:	d8f9      	bhi.n	8005e04 <__lshift+0xc0>
 8005e10:	e7ea      	b.n	8005de8 <__lshift+0xa4>
 8005e12:	bf00      	nop
 8005e14:	08006f9f 	.word	0x08006f9f
 8005e18:	08007010 	.word	0x08007010

08005e1c <__mcmp>:
 8005e1c:	b530      	push	{r4, r5, lr}
 8005e1e:	6902      	ldr	r2, [r0, #16]
 8005e20:	690c      	ldr	r4, [r1, #16]
 8005e22:	1b12      	subs	r2, r2, r4
 8005e24:	d10e      	bne.n	8005e44 <__mcmp+0x28>
 8005e26:	f100 0314 	add.w	r3, r0, #20
 8005e2a:	3114      	adds	r1, #20
 8005e2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005e30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005e34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005e38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005e3c:	42a5      	cmp	r5, r4
 8005e3e:	d003      	beq.n	8005e48 <__mcmp+0x2c>
 8005e40:	d305      	bcc.n	8005e4e <__mcmp+0x32>
 8005e42:	2201      	movs	r2, #1
 8005e44:	4610      	mov	r0, r2
 8005e46:	bd30      	pop	{r4, r5, pc}
 8005e48:	4283      	cmp	r3, r0
 8005e4a:	d3f3      	bcc.n	8005e34 <__mcmp+0x18>
 8005e4c:	e7fa      	b.n	8005e44 <__mcmp+0x28>
 8005e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e52:	e7f7      	b.n	8005e44 <__mcmp+0x28>

08005e54 <__mdiff>:
 8005e54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e58:	460c      	mov	r4, r1
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	4611      	mov	r1, r2
 8005e5e:	4620      	mov	r0, r4
 8005e60:	4617      	mov	r7, r2
 8005e62:	f7ff ffdb 	bl	8005e1c <__mcmp>
 8005e66:	1e05      	subs	r5, r0, #0
 8005e68:	d110      	bne.n	8005e8c <__mdiff+0x38>
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4630      	mov	r0, r6
 8005e6e:	f7ff fd57 	bl	8005920 <_Balloc>
 8005e72:	b930      	cbnz	r0, 8005e82 <__mdiff+0x2e>
 8005e74:	4b39      	ldr	r3, [pc, #228]	; (8005f5c <__mdiff+0x108>)
 8005e76:	4602      	mov	r2, r0
 8005e78:	f240 2132 	movw	r1, #562	; 0x232
 8005e7c:	4838      	ldr	r0, [pc, #224]	; (8005f60 <__mdiff+0x10c>)
 8005e7e:	f000 fd63 	bl	8006948 <__assert_func>
 8005e82:	2301      	movs	r3, #1
 8005e84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8c:	bfa4      	itt	ge
 8005e8e:	463b      	movge	r3, r7
 8005e90:	4627      	movge	r7, r4
 8005e92:	4630      	mov	r0, r6
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	bfa6      	itte	ge
 8005e98:	461c      	movge	r4, r3
 8005e9a:	2500      	movge	r5, #0
 8005e9c:	2501      	movlt	r5, #1
 8005e9e:	f7ff fd3f 	bl	8005920 <_Balloc>
 8005ea2:	b920      	cbnz	r0, 8005eae <__mdiff+0x5a>
 8005ea4:	4b2d      	ldr	r3, [pc, #180]	; (8005f5c <__mdiff+0x108>)
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005eac:	e7e6      	b.n	8005e7c <__mdiff+0x28>
 8005eae:	693e      	ldr	r6, [r7, #16]
 8005eb0:	60c5      	str	r5, [r0, #12]
 8005eb2:	6925      	ldr	r5, [r4, #16]
 8005eb4:	f107 0114 	add.w	r1, r7, #20
 8005eb8:	f104 0914 	add.w	r9, r4, #20
 8005ebc:	f100 0e14 	add.w	lr, r0, #20
 8005ec0:	f107 0210 	add.w	r2, r7, #16
 8005ec4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8005ec8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8005ecc:	46f2      	mov	sl, lr
 8005ece:	2700      	movs	r7, #0
 8005ed0:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8005ed8:	fa1f f883 	uxth.w	r8, r3
 8005edc:	fa17 f78b 	uxtah	r7, r7, fp
 8005ee0:	0c1b      	lsrs	r3, r3, #16
 8005ee2:	eba7 0808 	sub.w	r8, r7, r8
 8005ee6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005eea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005eee:	fa1f f888 	uxth.w	r8, r8
 8005ef2:	141f      	asrs	r7, r3, #16
 8005ef4:	454d      	cmp	r5, r9
 8005ef6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8005efa:	f84a 3b04 	str.w	r3, [sl], #4
 8005efe:	d8e7      	bhi.n	8005ed0 <__mdiff+0x7c>
 8005f00:	1b2b      	subs	r3, r5, r4
 8005f02:	3b15      	subs	r3, #21
 8005f04:	f023 0303 	bic.w	r3, r3, #3
 8005f08:	3304      	adds	r3, #4
 8005f0a:	3415      	adds	r4, #21
 8005f0c:	42a5      	cmp	r5, r4
 8005f0e:	bf38      	it	cc
 8005f10:	2304      	movcc	r3, #4
 8005f12:	4419      	add	r1, r3
 8005f14:	4473      	add	r3, lr
 8005f16:	469e      	mov	lr, r3
 8005f18:	460d      	mov	r5, r1
 8005f1a:	4565      	cmp	r5, ip
 8005f1c:	d30e      	bcc.n	8005f3c <__mdiff+0xe8>
 8005f1e:	f10c 0203 	add.w	r2, ip, #3
 8005f22:	1a52      	subs	r2, r2, r1
 8005f24:	f022 0203 	bic.w	r2, r2, #3
 8005f28:	3903      	subs	r1, #3
 8005f2a:	458c      	cmp	ip, r1
 8005f2c:	bf38      	it	cc
 8005f2e:	2200      	movcc	r2, #0
 8005f30:	441a      	add	r2, r3
 8005f32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005f36:	b17b      	cbz	r3, 8005f58 <__mdiff+0x104>
 8005f38:	6106      	str	r6, [r0, #16]
 8005f3a:	e7a5      	b.n	8005e88 <__mdiff+0x34>
 8005f3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f40:	fa17 f488 	uxtah	r4, r7, r8
 8005f44:	1422      	asrs	r2, r4, #16
 8005f46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8005f4a:	b2a4      	uxth	r4, r4
 8005f4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8005f50:	f84e 4b04 	str.w	r4, [lr], #4
 8005f54:	1417      	asrs	r7, r2, #16
 8005f56:	e7e0      	b.n	8005f1a <__mdiff+0xc6>
 8005f58:	3e01      	subs	r6, #1
 8005f5a:	e7ea      	b.n	8005f32 <__mdiff+0xde>
 8005f5c:	08006f9f 	.word	0x08006f9f
 8005f60:	08007010 	.word	0x08007010

08005f64 <__d2b>:
 8005f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f68:	4689      	mov	r9, r1
 8005f6a:	2101      	movs	r1, #1
 8005f6c:	ec57 6b10 	vmov	r6, r7, d0
 8005f70:	4690      	mov	r8, r2
 8005f72:	f7ff fcd5 	bl	8005920 <_Balloc>
 8005f76:	4604      	mov	r4, r0
 8005f78:	b930      	cbnz	r0, 8005f88 <__d2b+0x24>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	4b25      	ldr	r3, [pc, #148]	; (8006014 <__d2b+0xb0>)
 8005f7e:	4826      	ldr	r0, [pc, #152]	; (8006018 <__d2b+0xb4>)
 8005f80:	f240 310a 	movw	r1, #778	; 0x30a
 8005f84:	f000 fce0 	bl	8006948 <__assert_func>
 8005f88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005f8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f90:	bb35      	cbnz	r5, 8005fe0 <__d2b+0x7c>
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	d028      	beq.n	8005fea <__d2b+0x86>
 8005f98:	4668      	mov	r0, sp
 8005f9a:	9600      	str	r6, [sp, #0]
 8005f9c:	f7ff fd8c 	bl	8005ab8 <__lo0bits>
 8005fa0:	9900      	ldr	r1, [sp, #0]
 8005fa2:	b300      	cbz	r0, 8005fe6 <__d2b+0x82>
 8005fa4:	9a01      	ldr	r2, [sp, #4]
 8005fa6:	f1c0 0320 	rsb	r3, r0, #32
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	430b      	orrs	r3, r1
 8005fb0:	40c2      	lsrs	r2, r0
 8005fb2:	6163      	str	r3, [r4, #20]
 8005fb4:	9201      	str	r2, [sp, #4]
 8005fb6:	9b01      	ldr	r3, [sp, #4]
 8005fb8:	61a3      	str	r3, [r4, #24]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	bf14      	ite	ne
 8005fbe:	2202      	movne	r2, #2
 8005fc0:	2201      	moveq	r2, #1
 8005fc2:	6122      	str	r2, [r4, #16]
 8005fc4:	b1d5      	cbz	r5, 8005ffc <__d2b+0x98>
 8005fc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005fca:	4405      	add	r5, r0
 8005fcc:	f8c9 5000 	str.w	r5, [r9]
 8005fd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fd4:	f8c8 0000 	str.w	r0, [r8]
 8005fd8:	4620      	mov	r0, r4
 8005fda:	b003      	add	sp, #12
 8005fdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fe4:	e7d5      	b.n	8005f92 <__d2b+0x2e>
 8005fe6:	6161      	str	r1, [r4, #20]
 8005fe8:	e7e5      	b.n	8005fb6 <__d2b+0x52>
 8005fea:	a801      	add	r0, sp, #4
 8005fec:	f7ff fd64 	bl	8005ab8 <__lo0bits>
 8005ff0:	9b01      	ldr	r3, [sp, #4]
 8005ff2:	6163      	str	r3, [r4, #20]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	6122      	str	r2, [r4, #16]
 8005ff8:	3020      	adds	r0, #32
 8005ffa:	e7e3      	b.n	8005fc4 <__d2b+0x60>
 8005ffc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006000:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006004:	f8c9 0000 	str.w	r0, [r9]
 8006008:	6918      	ldr	r0, [r3, #16]
 800600a:	f7ff fd35 	bl	8005a78 <__hi0bits>
 800600e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006012:	e7df      	b.n	8005fd4 <__d2b+0x70>
 8006014:	08006f9f 	.word	0x08006f9f
 8006018:	08007010 	.word	0x08007010

0800601c <_calloc_r>:
 800601c:	b513      	push	{r0, r1, r4, lr}
 800601e:	434a      	muls	r2, r1
 8006020:	4611      	mov	r1, r2
 8006022:	9201      	str	r2, [sp, #4]
 8006024:	f000 f85a 	bl	80060dc <_malloc_r>
 8006028:	4604      	mov	r4, r0
 800602a:	b118      	cbz	r0, 8006034 <_calloc_r+0x18>
 800602c:	9a01      	ldr	r2, [sp, #4]
 800602e:	2100      	movs	r1, #0
 8006030:	f7fe f83e 	bl	80040b0 <memset>
 8006034:	4620      	mov	r0, r4
 8006036:	b002      	add	sp, #8
 8006038:	bd10      	pop	{r4, pc}
	...

0800603c <_free_r>:
 800603c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800603e:	2900      	cmp	r1, #0
 8006040:	d048      	beq.n	80060d4 <_free_r+0x98>
 8006042:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006046:	9001      	str	r0, [sp, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	f1a1 0404 	sub.w	r4, r1, #4
 800604e:	bfb8      	it	lt
 8006050:	18e4      	addlt	r4, r4, r3
 8006052:	f000 fe1d 	bl	8006c90 <__malloc_lock>
 8006056:	4a20      	ldr	r2, [pc, #128]	; (80060d8 <_free_r+0x9c>)
 8006058:	9801      	ldr	r0, [sp, #4]
 800605a:	6813      	ldr	r3, [r2, #0]
 800605c:	4615      	mov	r5, r2
 800605e:	b933      	cbnz	r3, 800606e <_free_r+0x32>
 8006060:	6063      	str	r3, [r4, #4]
 8006062:	6014      	str	r4, [r2, #0]
 8006064:	b003      	add	sp, #12
 8006066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800606a:	f000 be17 	b.w	8006c9c <__malloc_unlock>
 800606e:	42a3      	cmp	r3, r4
 8006070:	d90b      	bls.n	800608a <_free_r+0x4e>
 8006072:	6821      	ldr	r1, [r4, #0]
 8006074:	1862      	adds	r2, r4, r1
 8006076:	4293      	cmp	r3, r2
 8006078:	bf04      	itt	eq
 800607a:	681a      	ldreq	r2, [r3, #0]
 800607c:	685b      	ldreq	r3, [r3, #4]
 800607e:	6063      	str	r3, [r4, #4]
 8006080:	bf04      	itt	eq
 8006082:	1852      	addeq	r2, r2, r1
 8006084:	6022      	streq	r2, [r4, #0]
 8006086:	602c      	str	r4, [r5, #0]
 8006088:	e7ec      	b.n	8006064 <_free_r+0x28>
 800608a:	461a      	mov	r2, r3
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	b10b      	cbz	r3, 8006094 <_free_r+0x58>
 8006090:	42a3      	cmp	r3, r4
 8006092:	d9fa      	bls.n	800608a <_free_r+0x4e>
 8006094:	6811      	ldr	r1, [r2, #0]
 8006096:	1855      	adds	r5, r2, r1
 8006098:	42a5      	cmp	r5, r4
 800609a:	d10b      	bne.n	80060b4 <_free_r+0x78>
 800609c:	6824      	ldr	r4, [r4, #0]
 800609e:	4421      	add	r1, r4
 80060a0:	1854      	adds	r4, r2, r1
 80060a2:	42a3      	cmp	r3, r4
 80060a4:	6011      	str	r1, [r2, #0]
 80060a6:	d1dd      	bne.n	8006064 <_free_r+0x28>
 80060a8:	681c      	ldr	r4, [r3, #0]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	6053      	str	r3, [r2, #4]
 80060ae:	4421      	add	r1, r4
 80060b0:	6011      	str	r1, [r2, #0]
 80060b2:	e7d7      	b.n	8006064 <_free_r+0x28>
 80060b4:	d902      	bls.n	80060bc <_free_r+0x80>
 80060b6:	230c      	movs	r3, #12
 80060b8:	6003      	str	r3, [r0, #0]
 80060ba:	e7d3      	b.n	8006064 <_free_r+0x28>
 80060bc:	6825      	ldr	r5, [r4, #0]
 80060be:	1961      	adds	r1, r4, r5
 80060c0:	428b      	cmp	r3, r1
 80060c2:	bf04      	itt	eq
 80060c4:	6819      	ldreq	r1, [r3, #0]
 80060c6:	685b      	ldreq	r3, [r3, #4]
 80060c8:	6063      	str	r3, [r4, #4]
 80060ca:	bf04      	itt	eq
 80060cc:	1949      	addeq	r1, r1, r5
 80060ce:	6021      	streq	r1, [r4, #0]
 80060d0:	6054      	str	r4, [r2, #4]
 80060d2:	e7c7      	b.n	8006064 <_free_r+0x28>
 80060d4:	b003      	add	sp, #12
 80060d6:	bd30      	pop	{r4, r5, pc}
 80060d8:	200001fc 	.word	0x200001fc

080060dc <_malloc_r>:
 80060dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060de:	1ccd      	adds	r5, r1, #3
 80060e0:	f025 0503 	bic.w	r5, r5, #3
 80060e4:	3508      	adds	r5, #8
 80060e6:	2d0c      	cmp	r5, #12
 80060e8:	bf38      	it	cc
 80060ea:	250c      	movcc	r5, #12
 80060ec:	2d00      	cmp	r5, #0
 80060ee:	4606      	mov	r6, r0
 80060f0:	db01      	blt.n	80060f6 <_malloc_r+0x1a>
 80060f2:	42a9      	cmp	r1, r5
 80060f4:	d903      	bls.n	80060fe <_malloc_r+0x22>
 80060f6:	230c      	movs	r3, #12
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	2000      	movs	r0, #0
 80060fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060fe:	f000 fdc7 	bl	8006c90 <__malloc_lock>
 8006102:	4921      	ldr	r1, [pc, #132]	; (8006188 <_malloc_r+0xac>)
 8006104:	680a      	ldr	r2, [r1, #0]
 8006106:	4614      	mov	r4, r2
 8006108:	b99c      	cbnz	r4, 8006132 <_malloc_r+0x56>
 800610a:	4f20      	ldr	r7, [pc, #128]	; (800618c <_malloc_r+0xb0>)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	b923      	cbnz	r3, 800611a <_malloc_r+0x3e>
 8006110:	4621      	mov	r1, r4
 8006112:	4630      	mov	r0, r6
 8006114:	f000 faf2 	bl	80066fc <_sbrk_r>
 8006118:	6038      	str	r0, [r7, #0]
 800611a:	4629      	mov	r1, r5
 800611c:	4630      	mov	r0, r6
 800611e:	f000 faed 	bl	80066fc <_sbrk_r>
 8006122:	1c43      	adds	r3, r0, #1
 8006124:	d123      	bne.n	800616e <_malloc_r+0x92>
 8006126:	230c      	movs	r3, #12
 8006128:	6033      	str	r3, [r6, #0]
 800612a:	4630      	mov	r0, r6
 800612c:	f000 fdb6 	bl	8006c9c <__malloc_unlock>
 8006130:	e7e3      	b.n	80060fa <_malloc_r+0x1e>
 8006132:	6823      	ldr	r3, [r4, #0]
 8006134:	1b5b      	subs	r3, r3, r5
 8006136:	d417      	bmi.n	8006168 <_malloc_r+0x8c>
 8006138:	2b0b      	cmp	r3, #11
 800613a:	d903      	bls.n	8006144 <_malloc_r+0x68>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	441c      	add	r4, r3
 8006140:	6025      	str	r5, [r4, #0]
 8006142:	e004      	b.n	800614e <_malloc_r+0x72>
 8006144:	6863      	ldr	r3, [r4, #4]
 8006146:	42a2      	cmp	r2, r4
 8006148:	bf0c      	ite	eq
 800614a:	600b      	streq	r3, [r1, #0]
 800614c:	6053      	strne	r3, [r2, #4]
 800614e:	4630      	mov	r0, r6
 8006150:	f000 fda4 	bl	8006c9c <__malloc_unlock>
 8006154:	f104 000b 	add.w	r0, r4, #11
 8006158:	1d23      	adds	r3, r4, #4
 800615a:	f020 0007 	bic.w	r0, r0, #7
 800615e:	1ac2      	subs	r2, r0, r3
 8006160:	d0cc      	beq.n	80060fc <_malloc_r+0x20>
 8006162:	1a1b      	subs	r3, r3, r0
 8006164:	50a3      	str	r3, [r4, r2]
 8006166:	e7c9      	b.n	80060fc <_malloc_r+0x20>
 8006168:	4622      	mov	r2, r4
 800616a:	6864      	ldr	r4, [r4, #4]
 800616c:	e7cc      	b.n	8006108 <_malloc_r+0x2c>
 800616e:	1cc4      	adds	r4, r0, #3
 8006170:	f024 0403 	bic.w	r4, r4, #3
 8006174:	42a0      	cmp	r0, r4
 8006176:	d0e3      	beq.n	8006140 <_malloc_r+0x64>
 8006178:	1a21      	subs	r1, r4, r0
 800617a:	4630      	mov	r0, r6
 800617c:	f000 fabe 	bl	80066fc <_sbrk_r>
 8006180:	3001      	adds	r0, #1
 8006182:	d1dd      	bne.n	8006140 <_malloc_r+0x64>
 8006184:	e7cf      	b.n	8006126 <_malloc_r+0x4a>
 8006186:	bf00      	nop
 8006188:	200001fc 	.word	0x200001fc
 800618c:	20000200 	.word	0x20000200

08006190 <__ssputs_r>:
 8006190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006194:	688e      	ldr	r6, [r1, #8]
 8006196:	429e      	cmp	r6, r3
 8006198:	4682      	mov	sl, r0
 800619a:	460c      	mov	r4, r1
 800619c:	4690      	mov	r8, r2
 800619e:	461f      	mov	r7, r3
 80061a0:	d838      	bhi.n	8006214 <__ssputs_r+0x84>
 80061a2:	898a      	ldrh	r2, [r1, #12]
 80061a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061a8:	d032      	beq.n	8006210 <__ssputs_r+0x80>
 80061aa:	6825      	ldr	r5, [r4, #0]
 80061ac:	6909      	ldr	r1, [r1, #16]
 80061ae:	eba5 0901 	sub.w	r9, r5, r1
 80061b2:	6965      	ldr	r5, [r4, #20]
 80061b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061bc:	3301      	adds	r3, #1
 80061be:	444b      	add	r3, r9
 80061c0:	106d      	asrs	r5, r5, #1
 80061c2:	429d      	cmp	r5, r3
 80061c4:	bf38      	it	cc
 80061c6:	461d      	movcc	r5, r3
 80061c8:	0553      	lsls	r3, r2, #21
 80061ca:	d531      	bpl.n	8006230 <__ssputs_r+0xa0>
 80061cc:	4629      	mov	r1, r5
 80061ce:	f7ff ff85 	bl	80060dc <_malloc_r>
 80061d2:	4606      	mov	r6, r0
 80061d4:	b950      	cbnz	r0, 80061ec <__ssputs_r+0x5c>
 80061d6:	230c      	movs	r3, #12
 80061d8:	f8ca 3000 	str.w	r3, [sl]
 80061dc:	89a3      	ldrh	r3, [r4, #12]
 80061de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	f04f 30ff 	mov.w	r0, #4294967295
 80061e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061ec:	6921      	ldr	r1, [r4, #16]
 80061ee:	464a      	mov	r2, r9
 80061f0:	f7ff fb88 	bl	8005904 <memcpy>
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061fe:	81a3      	strh	r3, [r4, #12]
 8006200:	6126      	str	r6, [r4, #16]
 8006202:	6165      	str	r5, [r4, #20]
 8006204:	444e      	add	r6, r9
 8006206:	eba5 0509 	sub.w	r5, r5, r9
 800620a:	6026      	str	r6, [r4, #0]
 800620c:	60a5      	str	r5, [r4, #8]
 800620e:	463e      	mov	r6, r7
 8006210:	42be      	cmp	r6, r7
 8006212:	d900      	bls.n	8006216 <__ssputs_r+0x86>
 8006214:	463e      	mov	r6, r7
 8006216:	4632      	mov	r2, r6
 8006218:	6820      	ldr	r0, [r4, #0]
 800621a:	4641      	mov	r1, r8
 800621c:	f000 fd1e 	bl	8006c5c <memmove>
 8006220:	68a3      	ldr	r3, [r4, #8]
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	1b9b      	subs	r3, r3, r6
 8006226:	4432      	add	r2, r6
 8006228:	60a3      	str	r3, [r4, #8]
 800622a:	6022      	str	r2, [r4, #0]
 800622c:	2000      	movs	r0, #0
 800622e:	e7db      	b.n	80061e8 <__ssputs_r+0x58>
 8006230:	462a      	mov	r2, r5
 8006232:	f000 fd39 	bl	8006ca8 <_realloc_r>
 8006236:	4606      	mov	r6, r0
 8006238:	2800      	cmp	r0, #0
 800623a:	d1e1      	bne.n	8006200 <__ssputs_r+0x70>
 800623c:	6921      	ldr	r1, [r4, #16]
 800623e:	4650      	mov	r0, sl
 8006240:	f7ff fefc 	bl	800603c <_free_r>
 8006244:	e7c7      	b.n	80061d6 <__ssputs_r+0x46>
	...

08006248 <_svfiprintf_r>:
 8006248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800624c:	4698      	mov	r8, r3
 800624e:	898b      	ldrh	r3, [r1, #12]
 8006250:	061b      	lsls	r3, r3, #24
 8006252:	b09d      	sub	sp, #116	; 0x74
 8006254:	4607      	mov	r7, r0
 8006256:	460d      	mov	r5, r1
 8006258:	4614      	mov	r4, r2
 800625a:	d50e      	bpl.n	800627a <_svfiprintf_r+0x32>
 800625c:	690b      	ldr	r3, [r1, #16]
 800625e:	b963      	cbnz	r3, 800627a <_svfiprintf_r+0x32>
 8006260:	2140      	movs	r1, #64	; 0x40
 8006262:	f7ff ff3b 	bl	80060dc <_malloc_r>
 8006266:	6028      	str	r0, [r5, #0]
 8006268:	6128      	str	r0, [r5, #16]
 800626a:	b920      	cbnz	r0, 8006276 <_svfiprintf_r+0x2e>
 800626c:	230c      	movs	r3, #12
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	e0d1      	b.n	800641a <_svfiprintf_r+0x1d2>
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	616b      	str	r3, [r5, #20]
 800627a:	2300      	movs	r3, #0
 800627c:	9309      	str	r3, [sp, #36]	; 0x24
 800627e:	2320      	movs	r3, #32
 8006280:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006284:	f8cd 800c 	str.w	r8, [sp, #12]
 8006288:	2330      	movs	r3, #48	; 0x30
 800628a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006434 <_svfiprintf_r+0x1ec>
 800628e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006292:	f04f 0901 	mov.w	r9, #1
 8006296:	4623      	mov	r3, r4
 8006298:	469a      	mov	sl, r3
 800629a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800629e:	b10a      	cbz	r2, 80062a4 <_svfiprintf_r+0x5c>
 80062a0:	2a25      	cmp	r2, #37	; 0x25
 80062a2:	d1f9      	bne.n	8006298 <_svfiprintf_r+0x50>
 80062a4:	ebba 0b04 	subs.w	fp, sl, r4
 80062a8:	d00b      	beq.n	80062c2 <_svfiprintf_r+0x7a>
 80062aa:	465b      	mov	r3, fp
 80062ac:	4622      	mov	r2, r4
 80062ae:	4629      	mov	r1, r5
 80062b0:	4638      	mov	r0, r7
 80062b2:	f7ff ff6d 	bl	8006190 <__ssputs_r>
 80062b6:	3001      	adds	r0, #1
 80062b8:	f000 80aa 	beq.w	8006410 <_svfiprintf_r+0x1c8>
 80062bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062be:	445a      	add	r2, fp
 80062c0:	9209      	str	r2, [sp, #36]	; 0x24
 80062c2:	f89a 3000 	ldrb.w	r3, [sl]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	f000 80a2 	beq.w	8006410 <_svfiprintf_r+0x1c8>
 80062cc:	2300      	movs	r3, #0
 80062ce:	f04f 32ff 	mov.w	r2, #4294967295
 80062d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d6:	f10a 0a01 	add.w	sl, sl, #1
 80062da:	9304      	str	r3, [sp, #16]
 80062dc:	9307      	str	r3, [sp, #28]
 80062de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062e2:	931a      	str	r3, [sp, #104]	; 0x68
 80062e4:	4654      	mov	r4, sl
 80062e6:	2205      	movs	r2, #5
 80062e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062ec:	4851      	ldr	r0, [pc, #324]	; (8006434 <_svfiprintf_r+0x1ec>)
 80062ee:	f7f9 ff7f 	bl	80001f0 <memchr>
 80062f2:	9a04      	ldr	r2, [sp, #16]
 80062f4:	b9d8      	cbnz	r0, 800632e <_svfiprintf_r+0xe6>
 80062f6:	06d0      	lsls	r0, r2, #27
 80062f8:	bf44      	itt	mi
 80062fa:	2320      	movmi	r3, #32
 80062fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006300:	0711      	lsls	r1, r2, #28
 8006302:	bf44      	itt	mi
 8006304:	232b      	movmi	r3, #43	; 0x2b
 8006306:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800630a:	f89a 3000 	ldrb.w	r3, [sl]
 800630e:	2b2a      	cmp	r3, #42	; 0x2a
 8006310:	d015      	beq.n	800633e <_svfiprintf_r+0xf6>
 8006312:	9a07      	ldr	r2, [sp, #28]
 8006314:	4654      	mov	r4, sl
 8006316:	2000      	movs	r0, #0
 8006318:	f04f 0c0a 	mov.w	ip, #10
 800631c:	4621      	mov	r1, r4
 800631e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006322:	3b30      	subs	r3, #48	; 0x30
 8006324:	2b09      	cmp	r3, #9
 8006326:	d94e      	bls.n	80063c6 <_svfiprintf_r+0x17e>
 8006328:	b1b0      	cbz	r0, 8006358 <_svfiprintf_r+0x110>
 800632a:	9207      	str	r2, [sp, #28]
 800632c:	e014      	b.n	8006358 <_svfiprintf_r+0x110>
 800632e:	eba0 0308 	sub.w	r3, r0, r8
 8006332:	fa09 f303 	lsl.w	r3, r9, r3
 8006336:	4313      	orrs	r3, r2
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	46a2      	mov	sl, r4
 800633c:	e7d2      	b.n	80062e4 <_svfiprintf_r+0x9c>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	1d19      	adds	r1, r3, #4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	9103      	str	r1, [sp, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	bfbb      	ittet	lt
 800634a:	425b      	neglt	r3, r3
 800634c:	f042 0202 	orrlt.w	r2, r2, #2
 8006350:	9307      	strge	r3, [sp, #28]
 8006352:	9307      	strlt	r3, [sp, #28]
 8006354:	bfb8      	it	lt
 8006356:	9204      	strlt	r2, [sp, #16]
 8006358:	7823      	ldrb	r3, [r4, #0]
 800635a:	2b2e      	cmp	r3, #46	; 0x2e
 800635c:	d10c      	bne.n	8006378 <_svfiprintf_r+0x130>
 800635e:	7863      	ldrb	r3, [r4, #1]
 8006360:	2b2a      	cmp	r3, #42	; 0x2a
 8006362:	d135      	bne.n	80063d0 <_svfiprintf_r+0x188>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	1d1a      	adds	r2, r3, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	9203      	str	r2, [sp, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	bfb8      	it	lt
 8006370:	f04f 33ff 	movlt.w	r3, #4294967295
 8006374:	3402      	adds	r4, #2
 8006376:	9305      	str	r3, [sp, #20]
 8006378:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006444 <_svfiprintf_r+0x1fc>
 800637c:	7821      	ldrb	r1, [r4, #0]
 800637e:	2203      	movs	r2, #3
 8006380:	4650      	mov	r0, sl
 8006382:	f7f9 ff35 	bl	80001f0 <memchr>
 8006386:	b140      	cbz	r0, 800639a <_svfiprintf_r+0x152>
 8006388:	2340      	movs	r3, #64	; 0x40
 800638a:	eba0 000a 	sub.w	r0, r0, sl
 800638e:	fa03 f000 	lsl.w	r0, r3, r0
 8006392:	9b04      	ldr	r3, [sp, #16]
 8006394:	4303      	orrs	r3, r0
 8006396:	3401      	adds	r4, #1
 8006398:	9304      	str	r3, [sp, #16]
 800639a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800639e:	4826      	ldr	r0, [pc, #152]	; (8006438 <_svfiprintf_r+0x1f0>)
 80063a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063a4:	2206      	movs	r2, #6
 80063a6:	f7f9 ff23 	bl	80001f0 <memchr>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	d038      	beq.n	8006420 <_svfiprintf_r+0x1d8>
 80063ae:	4b23      	ldr	r3, [pc, #140]	; (800643c <_svfiprintf_r+0x1f4>)
 80063b0:	bb1b      	cbnz	r3, 80063fa <_svfiprintf_r+0x1b2>
 80063b2:	9b03      	ldr	r3, [sp, #12]
 80063b4:	3307      	adds	r3, #7
 80063b6:	f023 0307 	bic.w	r3, r3, #7
 80063ba:	3308      	adds	r3, #8
 80063bc:	9303      	str	r3, [sp, #12]
 80063be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c0:	4433      	add	r3, r6
 80063c2:	9309      	str	r3, [sp, #36]	; 0x24
 80063c4:	e767      	b.n	8006296 <_svfiprintf_r+0x4e>
 80063c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ca:	460c      	mov	r4, r1
 80063cc:	2001      	movs	r0, #1
 80063ce:	e7a5      	b.n	800631c <_svfiprintf_r+0xd4>
 80063d0:	2300      	movs	r3, #0
 80063d2:	3401      	adds	r4, #1
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	4619      	mov	r1, r3
 80063d8:	f04f 0c0a 	mov.w	ip, #10
 80063dc:	4620      	mov	r0, r4
 80063de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063e2:	3a30      	subs	r2, #48	; 0x30
 80063e4:	2a09      	cmp	r2, #9
 80063e6:	d903      	bls.n	80063f0 <_svfiprintf_r+0x1a8>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d0c5      	beq.n	8006378 <_svfiprintf_r+0x130>
 80063ec:	9105      	str	r1, [sp, #20]
 80063ee:	e7c3      	b.n	8006378 <_svfiprintf_r+0x130>
 80063f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80063f4:	4604      	mov	r4, r0
 80063f6:	2301      	movs	r3, #1
 80063f8:	e7f0      	b.n	80063dc <_svfiprintf_r+0x194>
 80063fa:	ab03      	add	r3, sp, #12
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	462a      	mov	r2, r5
 8006400:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <_svfiprintf_r+0x1f8>)
 8006402:	a904      	add	r1, sp, #16
 8006404:	4638      	mov	r0, r7
 8006406:	f7fd fefb 	bl	8004200 <_printf_float>
 800640a:	1c42      	adds	r2, r0, #1
 800640c:	4606      	mov	r6, r0
 800640e:	d1d6      	bne.n	80063be <_svfiprintf_r+0x176>
 8006410:	89ab      	ldrh	r3, [r5, #12]
 8006412:	065b      	lsls	r3, r3, #25
 8006414:	f53f af2c 	bmi.w	8006270 <_svfiprintf_r+0x28>
 8006418:	9809      	ldr	r0, [sp, #36]	; 0x24
 800641a:	b01d      	add	sp, #116	; 0x74
 800641c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006420:	ab03      	add	r3, sp, #12
 8006422:	9300      	str	r3, [sp, #0]
 8006424:	462a      	mov	r2, r5
 8006426:	4b06      	ldr	r3, [pc, #24]	; (8006440 <_svfiprintf_r+0x1f8>)
 8006428:	a904      	add	r1, sp, #16
 800642a:	4638      	mov	r0, r7
 800642c:	f7fe f98c 	bl	8004748 <_printf_i>
 8006430:	e7eb      	b.n	800640a <_svfiprintf_r+0x1c2>
 8006432:	bf00      	nop
 8006434:	0800716c 	.word	0x0800716c
 8006438:	08007176 	.word	0x08007176
 800643c:	08004201 	.word	0x08004201
 8006440:	08006191 	.word	0x08006191
 8006444:	08007172 	.word	0x08007172

08006448 <__sfputc_r>:
 8006448:	6893      	ldr	r3, [r2, #8]
 800644a:	3b01      	subs	r3, #1
 800644c:	2b00      	cmp	r3, #0
 800644e:	b410      	push	{r4}
 8006450:	6093      	str	r3, [r2, #8]
 8006452:	da08      	bge.n	8006466 <__sfputc_r+0x1e>
 8006454:	6994      	ldr	r4, [r2, #24]
 8006456:	42a3      	cmp	r3, r4
 8006458:	db01      	blt.n	800645e <__sfputc_r+0x16>
 800645a:	290a      	cmp	r1, #10
 800645c:	d103      	bne.n	8006466 <__sfputc_r+0x1e>
 800645e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006462:	f000 b99f 	b.w	80067a4 <__swbuf_r>
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	1c58      	adds	r0, r3, #1
 800646a:	6010      	str	r0, [r2, #0]
 800646c:	7019      	strb	r1, [r3, #0]
 800646e:	4608      	mov	r0, r1
 8006470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006474:	4770      	bx	lr

08006476 <__sfputs_r>:
 8006476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006478:	4606      	mov	r6, r0
 800647a:	460f      	mov	r7, r1
 800647c:	4614      	mov	r4, r2
 800647e:	18d5      	adds	r5, r2, r3
 8006480:	42ac      	cmp	r4, r5
 8006482:	d101      	bne.n	8006488 <__sfputs_r+0x12>
 8006484:	2000      	movs	r0, #0
 8006486:	e007      	b.n	8006498 <__sfputs_r+0x22>
 8006488:	f814 1b01 	ldrb.w	r1, [r4], #1
 800648c:	463a      	mov	r2, r7
 800648e:	4630      	mov	r0, r6
 8006490:	f7ff ffda 	bl	8006448 <__sfputc_r>
 8006494:	1c43      	adds	r3, r0, #1
 8006496:	d1f3      	bne.n	8006480 <__sfputs_r+0xa>
 8006498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800649c <_vfiprintf_r>:
 800649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064a0:	460d      	mov	r5, r1
 80064a2:	b09d      	sub	sp, #116	; 0x74
 80064a4:	4614      	mov	r4, r2
 80064a6:	4698      	mov	r8, r3
 80064a8:	4606      	mov	r6, r0
 80064aa:	b118      	cbz	r0, 80064b4 <_vfiprintf_r+0x18>
 80064ac:	6983      	ldr	r3, [r0, #24]
 80064ae:	b90b      	cbnz	r3, 80064b4 <_vfiprintf_r+0x18>
 80064b0:	f7ff f97a 	bl	80057a8 <__sinit>
 80064b4:	4b89      	ldr	r3, [pc, #548]	; (80066dc <_vfiprintf_r+0x240>)
 80064b6:	429d      	cmp	r5, r3
 80064b8:	d11b      	bne.n	80064f2 <_vfiprintf_r+0x56>
 80064ba:	6875      	ldr	r5, [r6, #4]
 80064bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064be:	07d9      	lsls	r1, r3, #31
 80064c0:	d405      	bmi.n	80064ce <_vfiprintf_r+0x32>
 80064c2:	89ab      	ldrh	r3, [r5, #12]
 80064c4:	059a      	lsls	r2, r3, #22
 80064c6:	d402      	bmi.n	80064ce <_vfiprintf_r+0x32>
 80064c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ca:	f7ff fa10 	bl	80058ee <__retarget_lock_acquire_recursive>
 80064ce:	89ab      	ldrh	r3, [r5, #12]
 80064d0:	071b      	lsls	r3, r3, #28
 80064d2:	d501      	bpl.n	80064d8 <_vfiprintf_r+0x3c>
 80064d4:	692b      	ldr	r3, [r5, #16]
 80064d6:	b9eb      	cbnz	r3, 8006514 <_vfiprintf_r+0x78>
 80064d8:	4629      	mov	r1, r5
 80064da:	4630      	mov	r0, r6
 80064dc:	f000 f9c6 	bl	800686c <__swsetup_r>
 80064e0:	b1c0      	cbz	r0, 8006514 <_vfiprintf_r+0x78>
 80064e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80064e4:	07dc      	lsls	r4, r3, #31
 80064e6:	d50e      	bpl.n	8006506 <_vfiprintf_r+0x6a>
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	b01d      	add	sp, #116	; 0x74
 80064ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f2:	4b7b      	ldr	r3, [pc, #492]	; (80066e0 <_vfiprintf_r+0x244>)
 80064f4:	429d      	cmp	r5, r3
 80064f6:	d101      	bne.n	80064fc <_vfiprintf_r+0x60>
 80064f8:	68b5      	ldr	r5, [r6, #8]
 80064fa:	e7df      	b.n	80064bc <_vfiprintf_r+0x20>
 80064fc:	4b79      	ldr	r3, [pc, #484]	; (80066e4 <_vfiprintf_r+0x248>)
 80064fe:	429d      	cmp	r5, r3
 8006500:	bf08      	it	eq
 8006502:	68f5      	ldreq	r5, [r6, #12]
 8006504:	e7da      	b.n	80064bc <_vfiprintf_r+0x20>
 8006506:	89ab      	ldrh	r3, [r5, #12]
 8006508:	0598      	lsls	r0, r3, #22
 800650a:	d4ed      	bmi.n	80064e8 <_vfiprintf_r+0x4c>
 800650c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800650e:	f7ff f9ef 	bl	80058f0 <__retarget_lock_release_recursive>
 8006512:	e7e9      	b.n	80064e8 <_vfiprintf_r+0x4c>
 8006514:	2300      	movs	r3, #0
 8006516:	9309      	str	r3, [sp, #36]	; 0x24
 8006518:	2320      	movs	r3, #32
 800651a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800651e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006522:	2330      	movs	r3, #48	; 0x30
 8006524:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80066e8 <_vfiprintf_r+0x24c>
 8006528:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800652c:	f04f 0901 	mov.w	r9, #1
 8006530:	4623      	mov	r3, r4
 8006532:	469a      	mov	sl, r3
 8006534:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006538:	b10a      	cbz	r2, 800653e <_vfiprintf_r+0xa2>
 800653a:	2a25      	cmp	r2, #37	; 0x25
 800653c:	d1f9      	bne.n	8006532 <_vfiprintf_r+0x96>
 800653e:	ebba 0b04 	subs.w	fp, sl, r4
 8006542:	d00b      	beq.n	800655c <_vfiprintf_r+0xc0>
 8006544:	465b      	mov	r3, fp
 8006546:	4622      	mov	r2, r4
 8006548:	4629      	mov	r1, r5
 800654a:	4630      	mov	r0, r6
 800654c:	f7ff ff93 	bl	8006476 <__sfputs_r>
 8006550:	3001      	adds	r0, #1
 8006552:	f000 80aa 	beq.w	80066aa <_vfiprintf_r+0x20e>
 8006556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006558:	445a      	add	r2, fp
 800655a:	9209      	str	r2, [sp, #36]	; 0x24
 800655c:	f89a 3000 	ldrb.w	r3, [sl]
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 80a2 	beq.w	80066aa <_vfiprintf_r+0x20e>
 8006566:	2300      	movs	r3, #0
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006570:	f10a 0a01 	add.w	sl, sl, #1
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	9307      	str	r3, [sp, #28]
 8006578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800657c:	931a      	str	r3, [sp, #104]	; 0x68
 800657e:	4654      	mov	r4, sl
 8006580:	2205      	movs	r2, #5
 8006582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006586:	4858      	ldr	r0, [pc, #352]	; (80066e8 <_vfiprintf_r+0x24c>)
 8006588:	f7f9 fe32 	bl	80001f0 <memchr>
 800658c:	9a04      	ldr	r2, [sp, #16]
 800658e:	b9d8      	cbnz	r0, 80065c8 <_vfiprintf_r+0x12c>
 8006590:	06d1      	lsls	r1, r2, #27
 8006592:	bf44      	itt	mi
 8006594:	2320      	movmi	r3, #32
 8006596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659a:	0713      	lsls	r3, r2, #28
 800659c:	bf44      	itt	mi
 800659e:	232b      	movmi	r3, #43	; 0x2b
 80065a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065a4:	f89a 3000 	ldrb.w	r3, [sl]
 80065a8:	2b2a      	cmp	r3, #42	; 0x2a
 80065aa:	d015      	beq.n	80065d8 <_vfiprintf_r+0x13c>
 80065ac:	9a07      	ldr	r2, [sp, #28]
 80065ae:	4654      	mov	r4, sl
 80065b0:	2000      	movs	r0, #0
 80065b2:	f04f 0c0a 	mov.w	ip, #10
 80065b6:	4621      	mov	r1, r4
 80065b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065bc:	3b30      	subs	r3, #48	; 0x30
 80065be:	2b09      	cmp	r3, #9
 80065c0:	d94e      	bls.n	8006660 <_vfiprintf_r+0x1c4>
 80065c2:	b1b0      	cbz	r0, 80065f2 <_vfiprintf_r+0x156>
 80065c4:	9207      	str	r2, [sp, #28]
 80065c6:	e014      	b.n	80065f2 <_vfiprintf_r+0x156>
 80065c8:	eba0 0308 	sub.w	r3, r0, r8
 80065cc:	fa09 f303 	lsl.w	r3, r9, r3
 80065d0:	4313      	orrs	r3, r2
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	46a2      	mov	sl, r4
 80065d6:	e7d2      	b.n	800657e <_vfiprintf_r+0xe2>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	1d19      	adds	r1, r3, #4
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	9103      	str	r1, [sp, #12]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bfbb      	ittet	lt
 80065e4:	425b      	neglt	r3, r3
 80065e6:	f042 0202 	orrlt.w	r2, r2, #2
 80065ea:	9307      	strge	r3, [sp, #28]
 80065ec:	9307      	strlt	r3, [sp, #28]
 80065ee:	bfb8      	it	lt
 80065f0:	9204      	strlt	r2, [sp, #16]
 80065f2:	7823      	ldrb	r3, [r4, #0]
 80065f4:	2b2e      	cmp	r3, #46	; 0x2e
 80065f6:	d10c      	bne.n	8006612 <_vfiprintf_r+0x176>
 80065f8:	7863      	ldrb	r3, [r4, #1]
 80065fa:	2b2a      	cmp	r3, #42	; 0x2a
 80065fc:	d135      	bne.n	800666a <_vfiprintf_r+0x1ce>
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	1d1a      	adds	r2, r3, #4
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	9203      	str	r2, [sp, #12]
 8006606:	2b00      	cmp	r3, #0
 8006608:	bfb8      	it	lt
 800660a:	f04f 33ff 	movlt.w	r3, #4294967295
 800660e:	3402      	adds	r4, #2
 8006610:	9305      	str	r3, [sp, #20]
 8006612:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80066f8 <_vfiprintf_r+0x25c>
 8006616:	7821      	ldrb	r1, [r4, #0]
 8006618:	2203      	movs	r2, #3
 800661a:	4650      	mov	r0, sl
 800661c:	f7f9 fde8 	bl	80001f0 <memchr>
 8006620:	b140      	cbz	r0, 8006634 <_vfiprintf_r+0x198>
 8006622:	2340      	movs	r3, #64	; 0x40
 8006624:	eba0 000a 	sub.w	r0, r0, sl
 8006628:	fa03 f000 	lsl.w	r0, r3, r0
 800662c:	9b04      	ldr	r3, [sp, #16]
 800662e:	4303      	orrs	r3, r0
 8006630:	3401      	adds	r4, #1
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006638:	482c      	ldr	r0, [pc, #176]	; (80066ec <_vfiprintf_r+0x250>)
 800663a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800663e:	2206      	movs	r2, #6
 8006640:	f7f9 fdd6 	bl	80001f0 <memchr>
 8006644:	2800      	cmp	r0, #0
 8006646:	d03f      	beq.n	80066c8 <_vfiprintf_r+0x22c>
 8006648:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <_vfiprintf_r+0x254>)
 800664a:	bb1b      	cbnz	r3, 8006694 <_vfiprintf_r+0x1f8>
 800664c:	9b03      	ldr	r3, [sp, #12]
 800664e:	3307      	adds	r3, #7
 8006650:	f023 0307 	bic.w	r3, r3, #7
 8006654:	3308      	adds	r3, #8
 8006656:	9303      	str	r3, [sp, #12]
 8006658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665a:	443b      	add	r3, r7
 800665c:	9309      	str	r3, [sp, #36]	; 0x24
 800665e:	e767      	b.n	8006530 <_vfiprintf_r+0x94>
 8006660:	fb0c 3202 	mla	r2, ip, r2, r3
 8006664:	460c      	mov	r4, r1
 8006666:	2001      	movs	r0, #1
 8006668:	e7a5      	b.n	80065b6 <_vfiprintf_r+0x11a>
 800666a:	2300      	movs	r3, #0
 800666c:	3401      	adds	r4, #1
 800666e:	9305      	str	r3, [sp, #20]
 8006670:	4619      	mov	r1, r3
 8006672:	f04f 0c0a 	mov.w	ip, #10
 8006676:	4620      	mov	r0, r4
 8006678:	f810 2b01 	ldrb.w	r2, [r0], #1
 800667c:	3a30      	subs	r2, #48	; 0x30
 800667e:	2a09      	cmp	r2, #9
 8006680:	d903      	bls.n	800668a <_vfiprintf_r+0x1ee>
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0c5      	beq.n	8006612 <_vfiprintf_r+0x176>
 8006686:	9105      	str	r1, [sp, #20]
 8006688:	e7c3      	b.n	8006612 <_vfiprintf_r+0x176>
 800668a:	fb0c 2101 	mla	r1, ip, r1, r2
 800668e:	4604      	mov	r4, r0
 8006690:	2301      	movs	r3, #1
 8006692:	e7f0      	b.n	8006676 <_vfiprintf_r+0x1da>
 8006694:	ab03      	add	r3, sp, #12
 8006696:	9300      	str	r3, [sp, #0]
 8006698:	462a      	mov	r2, r5
 800669a:	4b16      	ldr	r3, [pc, #88]	; (80066f4 <_vfiprintf_r+0x258>)
 800669c:	a904      	add	r1, sp, #16
 800669e:	4630      	mov	r0, r6
 80066a0:	f7fd fdae 	bl	8004200 <_printf_float>
 80066a4:	4607      	mov	r7, r0
 80066a6:	1c78      	adds	r0, r7, #1
 80066a8:	d1d6      	bne.n	8006658 <_vfiprintf_r+0x1bc>
 80066aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066ac:	07d9      	lsls	r1, r3, #31
 80066ae:	d405      	bmi.n	80066bc <_vfiprintf_r+0x220>
 80066b0:	89ab      	ldrh	r3, [r5, #12]
 80066b2:	059a      	lsls	r2, r3, #22
 80066b4:	d402      	bmi.n	80066bc <_vfiprintf_r+0x220>
 80066b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066b8:	f7ff f91a 	bl	80058f0 <__retarget_lock_release_recursive>
 80066bc:	89ab      	ldrh	r3, [r5, #12]
 80066be:	065b      	lsls	r3, r3, #25
 80066c0:	f53f af12 	bmi.w	80064e8 <_vfiprintf_r+0x4c>
 80066c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066c6:	e711      	b.n	80064ec <_vfiprintf_r+0x50>
 80066c8:	ab03      	add	r3, sp, #12
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	462a      	mov	r2, r5
 80066ce:	4b09      	ldr	r3, [pc, #36]	; (80066f4 <_vfiprintf_r+0x258>)
 80066d0:	a904      	add	r1, sp, #16
 80066d2:	4630      	mov	r0, r6
 80066d4:	f7fe f838 	bl	8004748 <_printf_i>
 80066d8:	e7e4      	b.n	80066a4 <_vfiprintf_r+0x208>
 80066da:	bf00      	nop
 80066dc:	08006fd0 	.word	0x08006fd0
 80066e0:	08006ff0 	.word	0x08006ff0
 80066e4:	08006fb0 	.word	0x08006fb0
 80066e8:	0800716c 	.word	0x0800716c
 80066ec:	08007176 	.word	0x08007176
 80066f0:	08004201 	.word	0x08004201
 80066f4:	08006477 	.word	0x08006477
 80066f8:	08007172 	.word	0x08007172

080066fc <_sbrk_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d06      	ldr	r5, [pc, #24]	; (8006718 <_sbrk_r+0x1c>)
 8006700:	2300      	movs	r3, #0
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fa fdbc 	bl	8001284 <_sbrk>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_sbrk_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_sbrk_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	20000368 	.word	0x20000368

0800671c <__sread>:
 800671c:	b510      	push	{r4, lr}
 800671e:	460c      	mov	r4, r1
 8006720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006724:	f000 fae6 	bl	8006cf4 <_read_r>
 8006728:	2800      	cmp	r0, #0
 800672a:	bfab      	itete	ge
 800672c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800672e:	89a3      	ldrhlt	r3, [r4, #12]
 8006730:	181b      	addge	r3, r3, r0
 8006732:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006736:	bfac      	ite	ge
 8006738:	6563      	strge	r3, [r4, #84]	; 0x54
 800673a:	81a3      	strhlt	r3, [r4, #12]
 800673c:	bd10      	pop	{r4, pc}

0800673e <__swrite>:
 800673e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006742:	461f      	mov	r7, r3
 8006744:	898b      	ldrh	r3, [r1, #12]
 8006746:	05db      	lsls	r3, r3, #23
 8006748:	4605      	mov	r5, r0
 800674a:	460c      	mov	r4, r1
 800674c:	4616      	mov	r6, r2
 800674e:	d505      	bpl.n	800675c <__swrite+0x1e>
 8006750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006754:	2302      	movs	r3, #2
 8006756:	2200      	movs	r2, #0
 8006758:	f000 f9f8 	bl	8006b4c <_lseek_r>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006762:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	4632      	mov	r2, r6
 800676a:	463b      	mov	r3, r7
 800676c:	4628      	mov	r0, r5
 800676e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006772:	f000 b869 	b.w	8006848 <_write_r>

08006776 <__sseek>:
 8006776:	b510      	push	{r4, lr}
 8006778:	460c      	mov	r4, r1
 800677a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800677e:	f000 f9e5 	bl	8006b4c <_lseek_r>
 8006782:	1c43      	adds	r3, r0, #1
 8006784:	89a3      	ldrh	r3, [r4, #12]
 8006786:	bf15      	itete	ne
 8006788:	6560      	strne	r0, [r4, #84]	; 0x54
 800678a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800678e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006792:	81a3      	strheq	r3, [r4, #12]
 8006794:	bf18      	it	ne
 8006796:	81a3      	strhne	r3, [r4, #12]
 8006798:	bd10      	pop	{r4, pc}

0800679a <__sclose>:
 800679a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800679e:	f000 b8f1 	b.w	8006984 <_close_r>
	...

080067a4 <__swbuf_r>:
 80067a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a6:	460e      	mov	r6, r1
 80067a8:	4614      	mov	r4, r2
 80067aa:	4605      	mov	r5, r0
 80067ac:	b118      	cbz	r0, 80067b6 <__swbuf_r+0x12>
 80067ae:	6983      	ldr	r3, [r0, #24]
 80067b0:	b90b      	cbnz	r3, 80067b6 <__swbuf_r+0x12>
 80067b2:	f7fe fff9 	bl	80057a8 <__sinit>
 80067b6:	4b21      	ldr	r3, [pc, #132]	; (800683c <__swbuf_r+0x98>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	d12b      	bne.n	8006814 <__swbuf_r+0x70>
 80067bc:	686c      	ldr	r4, [r5, #4]
 80067be:	69a3      	ldr	r3, [r4, #24]
 80067c0:	60a3      	str	r3, [r4, #8]
 80067c2:	89a3      	ldrh	r3, [r4, #12]
 80067c4:	071a      	lsls	r2, r3, #28
 80067c6:	d52f      	bpl.n	8006828 <__swbuf_r+0x84>
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	b36b      	cbz	r3, 8006828 <__swbuf_r+0x84>
 80067cc:	6923      	ldr	r3, [r4, #16]
 80067ce:	6820      	ldr	r0, [r4, #0]
 80067d0:	1ac0      	subs	r0, r0, r3
 80067d2:	6963      	ldr	r3, [r4, #20]
 80067d4:	b2f6      	uxtb	r6, r6
 80067d6:	4283      	cmp	r3, r0
 80067d8:	4637      	mov	r7, r6
 80067da:	dc04      	bgt.n	80067e6 <__swbuf_r+0x42>
 80067dc:	4621      	mov	r1, r4
 80067de:	4628      	mov	r0, r5
 80067e0:	f000 f966 	bl	8006ab0 <_fflush_r>
 80067e4:	bb30      	cbnz	r0, 8006834 <__swbuf_r+0x90>
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	3b01      	subs	r3, #1
 80067ea:	60a3      	str	r3, [r4, #8]
 80067ec:	6823      	ldr	r3, [r4, #0]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	6022      	str	r2, [r4, #0]
 80067f2:	701e      	strb	r6, [r3, #0]
 80067f4:	6963      	ldr	r3, [r4, #20]
 80067f6:	3001      	adds	r0, #1
 80067f8:	4283      	cmp	r3, r0
 80067fa:	d004      	beq.n	8006806 <__swbuf_r+0x62>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	07db      	lsls	r3, r3, #31
 8006800:	d506      	bpl.n	8006810 <__swbuf_r+0x6c>
 8006802:	2e0a      	cmp	r6, #10
 8006804:	d104      	bne.n	8006810 <__swbuf_r+0x6c>
 8006806:	4621      	mov	r1, r4
 8006808:	4628      	mov	r0, r5
 800680a:	f000 f951 	bl	8006ab0 <_fflush_r>
 800680e:	b988      	cbnz	r0, 8006834 <__swbuf_r+0x90>
 8006810:	4638      	mov	r0, r7
 8006812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006814:	4b0a      	ldr	r3, [pc, #40]	; (8006840 <__swbuf_r+0x9c>)
 8006816:	429c      	cmp	r4, r3
 8006818:	d101      	bne.n	800681e <__swbuf_r+0x7a>
 800681a:	68ac      	ldr	r4, [r5, #8]
 800681c:	e7cf      	b.n	80067be <__swbuf_r+0x1a>
 800681e:	4b09      	ldr	r3, [pc, #36]	; (8006844 <__swbuf_r+0xa0>)
 8006820:	429c      	cmp	r4, r3
 8006822:	bf08      	it	eq
 8006824:	68ec      	ldreq	r4, [r5, #12]
 8006826:	e7ca      	b.n	80067be <__swbuf_r+0x1a>
 8006828:	4621      	mov	r1, r4
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f81e 	bl	800686c <__swsetup_r>
 8006830:	2800      	cmp	r0, #0
 8006832:	d0cb      	beq.n	80067cc <__swbuf_r+0x28>
 8006834:	f04f 37ff 	mov.w	r7, #4294967295
 8006838:	e7ea      	b.n	8006810 <__swbuf_r+0x6c>
 800683a:	bf00      	nop
 800683c:	08006fd0 	.word	0x08006fd0
 8006840:	08006ff0 	.word	0x08006ff0
 8006844:	08006fb0 	.word	0x08006fb0

08006848 <_write_r>:
 8006848:	b538      	push	{r3, r4, r5, lr}
 800684a:	4d07      	ldr	r5, [pc, #28]	; (8006868 <_write_r+0x20>)
 800684c:	4604      	mov	r4, r0
 800684e:	4608      	mov	r0, r1
 8006850:	4611      	mov	r1, r2
 8006852:	2200      	movs	r2, #0
 8006854:	602a      	str	r2, [r5, #0]
 8006856:	461a      	mov	r2, r3
 8006858:	f7fa fcc3 	bl	80011e2 <_write>
 800685c:	1c43      	adds	r3, r0, #1
 800685e:	d102      	bne.n	8006866 <_write_r+0x1e>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	b103      	cbz	r3, 8006866 <_write_r+0x1e>
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	bd38      	pop	{r3, r4, r5, pc}
 8006868:	20000368 	.word	0x20000368

0800686c <__swsetup_r>:
 800686c:	4b32      	ldr	r3, [pc, #200]	; (8006938 <__swsetup_r+0xcc>)
 800686e:	b570      	push	{r4, r5, r6, lr}
 8006870:	681d      	ldr	r5, [r3, #0]
 8006872:	4606      	mov	r6, r0
 8006874:	460c      	mov	r4, r1
 8006876:	b125      	cbz	r5, 8006882 <__swsetup_r+0x16>
 8006878:	69ab      	ldr	r3, [r5, #24]
 800687a:	b913      	cbnz	r3, 8006882 <__swsetup_r+0x16>
 800687c:	4628      	mov	r0, r5
 800687e:	f7fe ff93 	bl	80057a8 <__sinit>
 8006882:	4b2e      	ldr	r3, [pc, #184]	; (800693c <__swsetup_r+0xd0>)
 8006884:	429c      	cmp	r4, r3
 8006886:	d10f      	bne.n	80068a8 <__swsetup_r+0x3c>
 8006888:	686c      	ldr	r4, [r5, #4]
 800688a:	89a3      	ldrh	r3, [r4, #12]
 800688c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006890:	0719      	lsls	r1, r3, #28
 8006892:	d42c      	bmi.n	80068ee <__swsetup_r+0x82>
 8006894:	06dd      	lsls	r5, r3, #27
 8006896:	d411      	bmi.n	80068bc <__swsetup_r+0x50>
 8006898:	2309      	movs	r3, #9
 800689a:	6033      	str	r3, [r6, #0]
 800689c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068a0:	81a3      	strh	r3, [r4, #12]
 80068a2:	f04f 30ff 	mov.w	r0, #4294967295
 80068a6:	e03e      	b.n	8006926 <__swsetup_r+0xba>
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <__swsetup_r+0xd4>)
 80068aa:	429c      	cmp	r4, r3
 80068ac:	d101      	bne.n	80068b2 <__swsetup_r+0x46>
 80068ae:	68ac      	ldr	r4, [r5, #8]
 80068b0:	e7eb      	b.n	800688a <__swsetup_r+0x1e>
 80068b2:	4b24      	ldr	r3, [pc, #144]	; (8006944 <__swsetup_r+0xd8>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	bf08      	it	eq
 80068b8:	68ec      	ldreq	r4, [r5, #12]
 80068ba:	e7e6      	b.n	800688a <__swsetup_r+0x1e>
 80068bc:	0758      	lsls	r0, r3, #29
 80068be:	d512      	bpl.n	80068e6 <__swsetup_r+0x7a>
 80068c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068c2:	b141      	cbz	r1, 80068d6 <__swsetup_r+0x6a>
 80068c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068c8:	4299      	cmp	r1, r3
 80068ca:	d002      	beq.n	80068d2 <__swsetup_r+0x66>
 80068cc:	4630      	mov	r0, r6
 80068ce:	f7ff fbb5 	bl	800603c <_free_r>
 80068d2:	2300      	movs	r3, #0
 80068d4:	6363      	str	r3, [r4, #52]	; 0x34
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068dc:	81a3      	strh	r3, [r4, #12]
 80068de:	2300      	movs	r3, #0
 80068e0:	6063      	str	r3, [r4, #4]
 80068e2:	6923      	ldr	r3, [r4, #16]
 80068e4:	6023      	str	r3, [r4, #0]
 80068e6:	89a3      	ldrh	r3, [r4, #12]
 80068e8:	f043 0308 	orr.w	r3, r3, #8
 80068ec:	81a3      	strh	r3, [r4, #12]
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	b94b      	cbnz	r3, 8006906 <__swsetup_r+0x9a>
 80068f2:	89a3      	ldrh	r3, [r4, #12]
 80068f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068fc:	d003      	beq.n	8006906 <__swsetup_r+0x9a>
 80068fe:	4621      	mov	r1, r4
 8006900:	4630      	mov	r0, r6
 8006902:	f000 f959 	bl	8006bb8 <__smakebuf_r>
 8006906:	89a0      	ldrh	r0, [r4, #12]
 8006908:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800690c:	f010 0301 	ands.w	r3, r0, #1
 8006910:	d00a      	beq.n	8006928 <__swsetup_r+0xbc>
 8006912:	2300      	movs	r3, #0
 8006914:	60a3      	str	r3, [r4, #8]
 8006916:	6963      	ldr	r3, [r4, #20]
 8006918:	425b      	negs	r3, r3
 800691a:	61a3      	str	r3, [r4, #24]
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	b943      	cbnz	r3, 8006932 <__swsetup_r+0xc6>
 8006920:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006924:	d1ba      	bne.n	800689c <__swsetup_r+0x30>
 8006926:	bd70      	pop	{r4, r5, r6, pc}
 8006928:	0781      	lsls	r1, r0, #30
 800692a:	bf58      	it	pl
 800692c:	6963      	ldrpl	r3, [r4, #20]
 800692e:	60a3      	str	r3, [r4, #8]
 8006930:	e7f4      	b.n	800691c <__swsetup_r+0xb0>
 8006932:	2000      	movs	r0, #0
 8006934:	e7f7      	b.n	8006926 <__swsetup_r+0xba>
 8006936:	bf00      	nop
 8006938:	2000000c 	.word	0x2000000c
 800693c:	08006fd0 	.word	0x08006fd0
 8006940:	08006ff0 	.word	0x08006ff0
 8006944:	08006fb0 	.word	0x08006fb0

08006948 <__assert_func>:
 8006948:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800694a:	4614      	mov	r4, r2
 800694c:	461a      	mov	r2, r3
 800694e:	4b09      	ldr	r3, [pc, #36]	; (8006974 <__assert_func+0x2c>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4605      	mov	r5, r0
 8006954:	68d8      	ldr	r0, [r3, #12]
 8006956:	b14c      	cbz	r4, 800696c <__assert_func+0x24>
 8006958:	4b07      	ldr	r3, [pc, #28]	; (8006978 <__assert_func+0x30>)
 800695a:	9100      	str	r1, [sp, #0]
 800695c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006960:	4906      	ldr	r1, [pc, #24]	; (800697c <__assert_func+0x34>)
 8006962:	462b      	mov	r3, r5
 8006964:	f000 f8e0 	bl	8006b28 <fiprintf>
 8006968:	f000 f9e3 	bl	8006d32 <abort>
 800696c:	4b04      	ldr	r3, [pc, #16]	; (8006980 <__assert_func+0x38>)
 800696e:	461c      	mov	r4, r3
 8006970:	e7f3      	b.n	800695a <__assert_func+0x12>
 8006972:	bf00      	nop
 8006974:	2000000c 	.word	0x2000000c
 8006978:	0800717d 	.word	0x0800717d
 800697c:	0800718a 	.word	0x0800718a
 8006980:	080071b8 	.word	0x080071b8

08006984 <_close_r>:
 8006984:	b538      	push	{r3, r4, r5, lr}
 8006986:	4d06      	ldr	r5, [pc, #24]	; (80069a0 <_close_r+0x1c>)
 8006988:	2300      	movs	r3, #0
 800698a:	4604      	mov	r4, r0
 800698c:	4608      	mov	r0, r1
 800698e:	602b      	str	r3, [r5, #0]
 8006990:	f7fa fc43 	bl	800121a <_close>
 8006994:	1c43      	adds	r3, r0, #1
 8006996:	d102      	bne.n	800699e <_close_r+0x1a>
 8006998:	682b      	ldr	r3, [r5, #0]
 800699a:	b103      	cbz	r3, 800699e <_close_r+0x1a>
 800699c:	6023      	str	r3, [r4, #0]
 800699e:	bd38      	pop	{r3, r4, r5, pc}
 80069a0:	20000368 	.word	0x20000368

080069a4 <__sflush_r>:
 80069a4:	898a      	ldrh	r2, [r1, #12]
 80069a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069aa:	4605      	mov	r5, r0
 80069ac:	0710      	lsls	r0, r2, #28
 80069ae:	460c      	mov	r4, r1
 80069b0:	d458      	bmi.n	8006a64 <__sflush_r+0xc0>
 80069b2:	684b      	ldr	r3, [r1, #4]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc05      	bgt.n	80069c4 <__sflush_r+0x20>
 80069b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dc02      	bgt.n	80069c4 <__sflush_r+0x20>
 80069be:	2000      	movs	r0, #0
 80069c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	d0f9      	beq.n	80069be <__sflush_r+0x1a>
 80069ca:	2300      	movs	r3, #0
 80069cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069d0:	682f      	ldr	r7, [r5, #0]
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	d032      	beq.n	8006a3c <__sflush_r+0x98>
 80069d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	075a      	lsls	r2, r3, #29
 80069dc:	d505      	bpl.n	80069ea <__sflush_r+0x46>
 80069de:	6863      	ldr	r3, [r4, #4]
 80069e0:	1ac0      	subs	r0, r0, r3
 80069e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069e4:	b10b      	cbz	r3, 80069ea <__sflush_r+0x46>
 80069e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069e8:	1ac0      	subs	r0, r0, r3
 80069ea:	2300      	movs	r3, #0
 80069ec:	4602      	mov	r2, r0
 80069ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069f0:	6a21      	ldr	r1, [r4, #32]
 80069f2:	4628      	mov	r0, r5
 80069f4:	47b0      	blx	r6
 80069f6:	1c43      	adds	r3, r0, #1
 80069f8:	89a3      	ldrh	r3, [r4, #12]
 80069fa:	d106      	bne.n	8006a0a <__sflush_r+0x66>
 80069fc:	6829      	ldr	r1, [r5, #0]
 80069fe:	291d      	cmp	r1, #29
 8006a00:	d82c      	bhi.n	8006a5c <__sflush_r+0xb8>
 8006a02:	4a2a      	ldr	r2, [pc, #168]	; (8006aac <__sflush_r+0x108>)
 8006a04:	40ca      	lsrs	r2, r1
 8006a06:	07d6      	lsls	r6, r2, #31
 8006a08:	d528      	bpl.n	8006a5c <__sflush_r+0xb8>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	6062      	str	r2, [r4, #4]
 8006a0e:	04d9      	lsls	r1, r3, #19
 8006a10:	6922      	ldr	r2, [r4, #16]
 8006a12:	6022      	str	r2, [r4, #0]
 8006a14:	d504      	bpl.n	8006a20 <__sflush_r+0x7c>
 8006a16:	1c42      	adds	r2, r0, #1
 8006a18:	d101      	bne.n	8006a1e <__sflush_r+0x7a>
 8006a1a:	682b      	ldr	r3, [r5, #0]
 8006a1c:	b903      	cbnz	r3, 8006a20 <__sflush_r+0x7c>
 8006a1e:	6560      	str	r0, [r4, #84]	; 0x54
 8006a20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a22:	602f      	str	r7, [r5, #0]
 8006a24:	2900      	cmp	r1, #0
 8006a26:	d0ca      	beq.n	80069be <__sflush_r+0x1a>
 8006a28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a2c:	4299      	cmp	r1, r3
 8006a2e:	d002      	beq.n	8006a36 <__sflush_r+0x92>
 8006a30:	4628      	mov	r0, r5
 8006a32:	f7ff fb03 	bl	800603c <_free_r>
 8006a36:	2000      	movs	r0, #0
 8006a38:	6360      	str	r0, [r4, #52]	; 0x34
 8006a3a:	e7c1      	b.n	80069c0 <__sflush_r+0x1c>
 8006a3c:	6a21      	ldr	r1, [r4, #32]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	4628      	mov	r0, r5
 8006a42:	47b0      	blx	r6
 8006a44:	1c41      	adds	r1, r0, #1
 8006a46:	d1c7      	bne.n	80069d8 <__sflush_r+0x34>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d0c4      	beq.n	80069d8 <__sflush_r+0x34>
 8006a4e:	2b1d      	cmp	r3, #29
 8006a50:	d001      	beq.n	8006a56 <__sflush_r+0xb2>
 8006a52:	2b16      	cmp	r3, #22
 8006a54:	d101      	bne.n	8006a5a <__sflush_r+0xb6>
 8006a56:	602f      	str	r7, [r5, #0]
 8006a58:	e7b1      	b.n	80069be <__sflush_r+0x1a>
 8006a5a:	89a3      	ldrh	r3, [r4, #12]
 8006a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a60:	81a3      	strh	r3, [r4, #12]
 8006a62:	e7ad      	b.n	80069c0 <__sflush_r+0x1c>
 8006a64:	690f      	ldr	r7, [r1, #16]
 8006a66:	2f00      	cmp	r7, #0
 8006a68:	d0a9      	beq.n	80069be <__sflush_r+0x1a>
 8006a6a:	0793      	lsls	r3, r2, #30
 8006a6c:	680e      	ldr	r6, [r1, #0]
 8006a6e:	bf08      	it	eq
 8006a70:	694b      	ldreq	r3, [r1, #20]
 8006a72:	600f      	str	r7, [r1, #0]
 8006a74:	bf18      	it	ne
 8006a76:	2300      	movne	r3, #0
 8006a78:	eba6 0807 	sub.w	r8, r6, r7
 8006a7c:	608b      	str	r3, [r1, #8]
 8006a7e:	f1b8 0f00 	cmp.w	r8, #0
 8006a82:	dd9c      	ble.n	80069be <__sflush_r+0x1a>
 8006a84:	6a21      	ldr	r1, [r4, #32]
 8006a86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a88:	4643      	mov	r3, r8
 8006a8a:	463a      	mov	r2, r7
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	47b0      	blx	r6
 8006a90:	2800      	cmp	r0, #0
 8006a92:	dc06      	bgt.n	8006aa2 <__sflush_r+0xfe>
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a9a:	81a3      	strh	r3, [r4, #12]
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	e78e      	b.n	80069c0 <__sflush_r+0x1c>
 8006aa2:	4407      	add	r7, r0
 8006aa4:	eba8 0800 	sub.w	r8, r8, r0
 8006aa8:	e7e9      	b.n	8006a7e <__sflush_r+0xda>
 8006aaa:	bf00      	nop
 8006aac:	20400001 	.word	0x20400001

08006ab0 <_fflush_r>:
 8006ab0:	b538      	push	{r3, r4, r5, lr}
 8006ab2:	690b      	ldr	r3, [r1, #16]
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	b913      	cbnz	r3, 8006ac0 <_fflush_r+0x10>
 8006aba:	2500      	movs	r5, #0
 8006abc:	4628      	mov	r0, r5
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	b118      	cbz	r0, 8006aca <_fflush_r+0x1a>
 8006ac2:	6983      	ldr	r3, [r0, #24]
 8006ac4:	b90b      	cbnz	r3, 8006aca <_fflush_r+0x1a>
 8006ac6:	f7fe fe6f 	bl	80057a8 <__sinit>
 8006aca:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <_fflush_r+0x6c>)
 8006acc:	429c      	cmp	r4, r3
 8006ace:	d11b      	bne.n	8006b08 <_fflush_r+0x58>
 8006ad0:	686c      	ldr	r4, [r5, #4]
 8006ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0ef      	beq.n	8006aba <_fflush_r+0xa>
 8006ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006adc:	07d0      	lsls	r0, r2, #31
 8006ade:	d404      	bmi.n	8006aea <_fflush_r+0x3a>
 8006ae0:	0599      	lsls	r1, r3, #22
 8006ae2:	d402      	bmi.n	8006aea <_fflush_r+0x3a>
 8006ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae6:	f7fe ff02 	bl	80058ee <__retarget_lock_acquire_recursive>
 8006aea:	4628      	mov	r0, r5
 8006aec:	4621      	mov	r1, r4
 8006aee:	f7ff ff59 	bl	80069a4 <__sflush_r>
 8006af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006af4:	07da      	lsls	r2, r3, #31
 8006af6:	4605      	mov	r5, r0
 8006af8:	d4e0      	bmi.n	8006abc <_fflush_r+0xc>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	059b      	lsls	r3, r3, #22
 8006afe:	d4dd      	bmi.n	8006abc <_fflush_r+0xc>
 8006b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b02:	f7fe fef5 	bl	80058f0 <__retarget_lock_release_recursive>
 8006b06:	e7d9      	b.n	8006abc <_fflush_r+0xc>
 8006b08:	4b05      	ldr	r3, [pc, #20]	; (8006b20 <_fflush_r+0x70>)
 8006b0a:	429c      	cmp	r4, r3
 8006b0c:	d101      	bne.n	8006b12 <_fflush_r+0x62>
 8006b0e:	68ac      	ldr	r4, [r5, #8]
 8006b10:	e7df      	b.n	8006ad2 <_fflush_r+0x22>
 8006b12:	4b04      	ldr	r3, [pc, #16]	; (8006b24 <_fflush_r+0x74>)
 8006b14:	429c      	cmp	r4, r3
 8006b16:	bf08      	it	eq
 8006b18:	68ec      	ldreq	r4, [r5, #12]
 8006b1a:	e7da      	b.n	8006ad2 <_fflush_r+0x22>
 8006b1c:	08006fd0 	.word	0x08006fd0
 8006b20:	08006ff0 	.word	0x08006ff0
 8006b24:	08006fb0 	.word	0x08006fb0

08006b28 <fiprintf>:
 8006b28:	b40e      	push	{r1, r2, r3}
 8006b2a:	b503      	push	{r0, r1, lr}
 8006b2c:	4601      	mov	r1, r0
 8006b2e:	ab03      	add	r3, sp, #12
 8006b30:	4805      	ldr	r0, [pc, #20]	; (8006b48 <fiprintf+0x20>)
 8006b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b36:	6800      	ldr	r0, [r0, #0]
 8006b38:	9301      	str	r3, [sp, #4]
 8006b3a:	f7ff fcaf 	bl	800649c <_vfiprintf_r>
 8006b3e:	b002      	add	sp, #8
 8006b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b44:	b003      	add	sp, #12
 8006b46:	4770      	bx	lr
 8006b48:	2000000c 	.word	0x2000000c

08006b4c <_lseek_r>:
 8006b4c:	b538      	push	{r3, r4, r5, lr}
 8006b4e:	4d07      	ldr	r5, [pc, #28]	; (8006b6c <_lseek_r+0x20>)
 8006b50:	4604      	mov	r4, r0
 8006b52:	4608      	mov	r0, r1
 8006b54:	4611      	mov	r1, r2
 8006b56:	2200      	movs	r2, #0
 8006b58:	602a      	str	r2, [r5, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	f7fa fb84 	bl	8001268 <_lseek>
 8006b60:	1c43      	adds	r3, r0, #1
 8006b62:	d102      	bne.n	8006b6a <_lseek_r+0x1e>
 8006b64:	682b      	ldr	r3, [r5, #0]
 8006b66:	b103      	cbz	r3, 8006b6a <_lseek_r+0x1e>
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	bd38      	pop	{r3, r4, r5, pc}
 8006b6c:	20000368 	.word	0x20000368

08006b70 <__swhatbuf_r>:
 8006b70:	b570      	push	{r4, r5, r6, lr}
 8006b72:	460e      	mov	r6, r1
 8006b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	b096      	sub	sp, #88	; 0x58
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	461d      	mov	r5, r3
 8006b80:	da07      	bge.n	8006b92 <__swhatbuf_r+0x22>
 8006b82:	2300      	movs	r3, #0
 8006b84:	602b      	str	r3, [r5, #0]
 8006b86:	89b3      	ldrh	r3, [r6, #12]
 8006b88:	061a      	lsls	r2, r3, #24
 8006b8a:	d410      	bmi.n	8006bae <__swhatbuf_r+0x3e>
 8006b8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b90:	e00e      	b.n	8006bb0 <__swhatbuf_r+0x40>
 8006b92:	466a      	mov	r2, sp
 8006b94:	f000 f8d4 	bl	8006d40 <_fstat_r>
 8006b98:	2800      	cmp	r0, #0
 8006b9a:	dbf2      	blt.n	8006b82 <__swhatbuf_r+0x12>
 8006b9c:	9a01      	ldr	r2, [sp, #4]
 8006b9e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ba2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ba6:	425a      	negs	r2, r3
 8006ba8:	415a      	adcs	r2, r3
 8006baa:	602a      	str	r2, [r5, #0]
 8006bac:	e7ee      	b.n	8006b8c <__swhatbuf_r+0x1c>
 8006bae:	2340      	movs	r3, #64	; 0x40
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	b016      	add	sp, #88	; 0x58
 8006bb6:	bd70      	pop	{r4, r5, r6, pc}

08006bb8 <__smakebuf_r>:
 8006bb8:	898b      	ldrh	r3, [r1, #12]
 8006bba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006bbc:	079d      	lsls	r5, r3, #30
 8006bbe:	4606      	mov	r6, r0
 8006bc0:	460c      	mov	r4, r1
 8006bc2:	d507      	bpl.n	8006bd4 <__smakebuf_r+0x1c>
 8006bc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bc8:	6023      	str	r3, [r4, #0]
 8006bca:	6123      	str	r3, [r4, #16]
 8006bcc:	2301      	movs	r3, #1
 8006bce:	6163      	str	r3, [r4, #20]
 8006bd0:	b002      	add	sp, #8
 8006bd2:	bd70      	pop	{r4, r5, r6, pc}
 8006bd4:	ab01      	add	r3, sp, #4
 8006bd6:	466a      	mov	r2, sp
 8006bd8:	f7ff ffca 	bl	8006b70 <__swhatbuf_r>
 8006bdc:	9900      	ldr	r1, [sp, #0]
 8006bde:	4605      	mov	r5, r0
 8006be0:	4630      	mov	r0, r6
 8006be2:	f7ff fa7b 	bl	80060dc <_malloc_r>
 8006be6:	b948      	cbnz	r0, 8006bfc <__smakebuf_r+0x44>
 8006be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bec:	059a      	lsls	r2, r3, #22
 8006bee:	d4ef      	bmi.n	8006bd0 <__smakebuf_r+0x18>
 8006bf0:	f023 0303 	bic.w	r3, r3, #3
 8006bf4:	f043 0302 	orr.w	r3, r3, #2
 8006bf8:	81a3      	strh	r3, [r4, #12]
 8006bfa:	e7e3      	b.n	8006bc4 <__smakebuf_r+0xc>
 8006bfc:	4b0d      	ldr	r3, [pc, #52]	; (8006c34 <__smakebuf_r+0x7c>)
 8006bfe:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c00:	89a3      	ldrh	r3, [r4, #12]
 8006c02:	6020      	str	r0, [r4, #0]
 8006c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c08:	81a3      	strh	r3, [r4, #12]
 8006c0a:	9b00      	ldr	r3, [sp, #0]
 8006c0c:	6163      	str	r3, [r4, #20]
 8006c0e:	9b01      	ldr	r3, [sp, #4]
 8006c10:	6120      	str	r0, [r4, #16]
 8006c12:	b15b      	cbz	r3, 8006c2c <__smakebuf_r+0x74>
 8006c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c18:	4630      	mov	r0, r6
 8006c1a:	f000 f8a3 	bl	8006d64 <_isatty_r>
 8006c1e:	b128      	cbz	r0, 8006c2c <__smakebuf_r+0x74>
 8006c20:	89a3      	ldrh	r3, [r4, #12]
 8006c22:	f023 0303 	bic.w	r3, r3, #3
 8006c26:	f043 0301 	orr.w	r3, r3, #1
 8006c2a:	81a3      	strh	r3, [r4, #12]
 8006c2c:	89a0      	ldrh	r0, [r4, #12]
 8006c2e:	4305      	orrs	r5, r0
 8006c30:	81a5      	strh	r5, [r4, #12]
 8006c32:	e7cd      	b.n	8006bd0 <__smakebuf_r+0x18>
 8006c34:	08005741 	.word	0x08005741

08006c38 <__ascii_mbtowc>:
 8006c38:	b082      	sub	sp, #8
 8006c3a:	b901      	cbnz	r1, 8006c3e <__ascii_mbtowc+0x6>
 8006c3c:	a901      	add	r1, sp, #4
 8006c3e:	b142      	cbz	r2, 8006c52 <__ascii_mbtowc+0x1a>
 8006c40:	b14b      	cbz	r3, 8006c56 <__ascii_mbtowc+0x1e>
 8006c42:	7813      	ldrb	r3, [r2, #0]
 8006c44:	600b      	str	r3, [r1, #0]
 8006c46:	7812      	ldrb	r2, [r2, #0]
 8006c48:	1e10      	subs	r0, r2, #0
 8006c4a:	bf18      	it	ne
 8006c4c:	2001      	movne	r0, #1
 8006c4e:	b002      	add	sp, #8
 8006c50:	4770      	bx	lr
 8006c52:	4610      	mov	r0, r2
 8006c54:	e7fb      	b.n	8006c4e <__ascii_mbtowc+0x16>
 8006c56:	f06f 0001 	mvn.w	r0, #1
 8006c5a:	e7f8      	b.n	8006c4e <__ascii_mbtowc+0x16>

08006c5c <memmove>:
 8006c5c:	4288      	cmp	r0, r1
 8006c5e:	b510      	push	{r4, lr}
 8006c60:	eb01 0402 	add.w	r4, r1, r2
 8006c64:	d902      	bls.n	8006c6c <memmove+0x10>
 8006c66:	4284      	cmp	r4, r0
 8006c68:	4623      	mov	r3, r4
 8006c6a:	d807      	bhi.n	8006c7c <memmove+0x20>
 8006c6c:	1e43      	subs	r3, r0, #1
 8006c6e:	42a1      	cmp	r1, r4
 8006c70:	d008      	beq.n	8006c84 <memmove+0x28>
 8006c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c7a:	e7f8      	b.n	8006c6e <memmove+0x12>
 8006c7c:	4402      	add	r2, r0
 8006c7e:	4601      	mov	r1, r0
 8006c80:	428a      	cmp	r2, r1
 8006c82:	d100      	bne.n	8006c86 <memmove+0x2a>
 8006c84:	bd10      	pop	{r4, pc}
 8006c86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c8e:	e7f7      	b.n	8006c80 <memmove+0x24>

08006c90 <__malloc_lock>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__malloc_lock+0x8>)
 8006c92:	f7fe be2c 	b.w	80058ee <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	20000360 	.word	0x20000360

08006c9c <__malloc_unlock>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__malloc_unlock+0x8>)
 8006c9e:	f7fe be27 	b.w	80058f0 <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	20000360 	.word	0x20000360

08006ca8 <_realloc_r>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	4607      	mov	r7, r0
 8006cac:	4614      	mov	r4, r2
 8006cae:	460e      	mov	r6, r1
 8006cb0:	b921      	cbnz	r1, 8006cbc <_realloc_r+0x14>
 8006cb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006cb6:	4611      	mov	r1, r2
 8006cb8:	f7ff ba10 	b.w	80060dc <_malloc_r>
 8006cbc:	b922      	cbnz	r2, 8006cc8 <_realloc_r+0x20>
 8006cbe:	f7ff f9bd 	bl	800603c <_free_r>
 8006cc2:	4625      	mov	r5, r4
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cc8:	f000 f85c 	bl	8006d84 <_malloc_usable_size_r>
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	d20f      	bcs.n	8006cf0 <_realloc_r+0x48>
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	f7ff fa02 	bl	80060dc <_malloc_r>
 8006cd8:	4605      	mov	r5, r0
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0f2      	beq.n	8006cc4 <_realloc_r+0x1c>
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	f7fe fe0f 	bl	8005904 <memcpy>
 8006ce6:	4631      	mov	r1, r6
 8006ce8:	4638      	mov	r0, r7
 8006cea:	f7ff f9a7 	bl	800603c <_free_r>
 8006cee:	e7e9      	b.n	8006cc4 <_realloc_r+0x1c>
 8006cf0:	4635      	mov	r5, r6
 8006cf2:	e7e7      	b.n	8006cc4 <_realloc_r+0x1c>

08006cf4 <_read_r>:
 8006cf4:	b538      	push	{r3, r4, r5, lr}
 8006cf6:	4d07      	ldr	r5, [pc, #28]	; (8006d14 <_read_r+0x20>)
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	4608      	mov	r0, r1
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	2200      	movs	r2, #0
 8006d00:	602a      	str	r2, [r5, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	f7fa fa50 	bl	80011a8 <_read>
 8006d08:	1c43      	adds	r3, r0, #1
 8006d0a:	d102      	bne.n	8006d12 <_read_r+0x1e>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	b103      	cbz	r3, 8006d12 <_read_r+0x1e>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	bd38      	pop	{r3, r4, r5, pc}
 8006d14:	20000368 	.word	0x20000368

08006d18 <__ascii_wctomb>:
 8006d18:	b149      	cbz	r1, 8006d2e <__ascii_wctomb+0x16>
 8006d1a:	2aff      	cmp	r2, #255	; 0xff
 8006d1c:	bf85      	ittet	hi
 8006d1e:	238a      	movhi	r3, #138	; 0x8a
 8006d20:	6003      	strhi	r3, [r0, #0]
 8006d22:	700a      	strbls	r2, [r1, #0]
 8006d24:	f04f 30ff 	movhi.w	r0, #4294967295
 8006d28:	bf98      	it	ls
 8006d2a:	2001      	movls	r0, #1
 8006d2c:	4770      	bx	lr
 8006d2e:	4608      	mov	r0, r1
 8006d30:	4770      	bx	lr

08006d32 <abort>:
 8006d32:	b508      	push	{r3, lr}
 8006d34:	2006      	movs	r0, #6
 8006d36:	f000 f855 	bl	8006de4 <raise>
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	f7fa fa2a 	bl	8001194 <_exit>

08006d40 <_fstat_r>:
 8006d40:	b538      	push	{r3, r4, r5, lr}
 8006d42:	4d07      	ldr	r5, [pc, #28]	; (8006d60 <_fstat_r+0x20>)
 8006d44:	2300      	movs	r3, #0
 8006d46:	4604      	mov	r4, r0
 8006d48:	4608      	mov	r0, r1
 8006d4a:	4611      	mov	r1, r2
 8006d4c:	602b      	str	r3, [r5, #0]
 8006d4e:	f7fa fa70 	bl	8001232 <_fstat>
 8006d52:	1c43      	adds	r3, r0, #1
 8006d54:	d102      	bne.n	8006d5c <_fstat_r+0x1c>
 8006d56:	682b      	ldr	r3, [r5, #0]
 8006d58:	b103      	cbz	r3, 8006d5c <_fstat_r+0x1c>
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	bd38      	pop	{r3, r4, r5, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000368 	.word	0x20000368

08006d64 <_isatty_r>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4d06      	ldr	r5, [pc, #24]	; (8006d80 <_isatty_r+0x1c>)
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	602b      	str	r3, [r5, #0]
 8006d70:	f7fa fa6f 	bl	8001252 <_isatty>
 8006d74:	1c43      	adds	r3, r0, #1
 8006d76:	d102      	bne.n	8006d7e <_isatty_r+0x1a>
 8006d78:	682b      	ldr	r3, [r5, #0]
 8006d7a:	b103      	cbz	r3, 8006d7e <_isatty_r+0x1a>
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	bd38      	pop	{r3, r4, r5, pc}
 8006d80:	20000368 	.word	0x20000368

08006d84 <_malloc_usable_size_r>:
 8006d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d88:	1f18      	subs	r0, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	bfbc      	itt	lt
 8006d8e:	580b      	ldrlt	r3, [r1, r0]
 8006d90:	18c0      	addlt	r0, r0, r3
 8006d92:	4770      	bx	lr

08006d94 <_raise_r>:
 8006d94:	291f      	cmp	r1, #31
 8006d96:	b538      	push	{r3, r4, r5, lr}
 8006d98:	4604      	mov	r4, r0
 8006d9a:	460d      	mov	r5, r1
 8006d9c:	d904      	bls.n	8006da8 <_raise_r+0x14>
 8006d9e:	2316      	movs	r3, #22
 8006da0:	6003      	str	r3, [r0, #0]
 8006da2:	f04f 30ff 	mov.w	r0, #4294967295
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006daa:	b112      	cbz	r2, 8006db2 <_raise_r+0x1e>
 8006dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006db0:	b94b      	cbnz	r3, 8006dc6 <_raise_r+0x32>
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 f830 	bl	8006e18 <_getpid_r>
 8006db8:	462a      	mov	r2, r5
 8006dba:	4601      	mov	r1, r0
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006dc2:	f000 b817 	b.w	8006df4 <_kill_r>
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d00a      	beq.n	8006de0 <_raise_r+0x4c>
 8006dca:	1c59      	adds	r1, r3, #1
 8006dcc:	d103      	bne.n	8006dd6 <_raise_r+0x42>
 8006dce:	2316      	movs	r3, #22
 8006dd0:	6003      	str	r3, [r0, #0]
 8006dd2:	2001      	movs	r0, #1
 8006dd4:	e7e7      	b.n	8006da6 <_raise_r+0x12>
 8006dd6:	2400      	movs	r4, #0
 8006dd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006ddc:	4628      	mov	r0, r5
 8006dde:	4798      	blx	r3
 8006de0:	2000      	movs	r0, #0
 8006de2:	e7e0      	b.n	8006da6 <_raise_r+0x12>

08006de4 <raise>:
 8006de4:	4b02      	ldr	r3, [pc, #8]	; (8006df0 <raise+0xc>)
 8006de6:	4601      	mov	r1, r0
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	f7ff bfd3 	b.w	8006d94 <_raise_r>
 8006dee:	bf00      	nop
 8006df0:	2000000c 	.word	0x2000000c

08006df4 <_kill_r>:
 8006df4:	b538      	push	{r3, r4, r5, lr}
 8006df6:	4d07      	ldr	r5, [pc, #28]	; (8006e14 <_kill_r+0x20>)
 8006df8:	2300      	movs	r3, #0
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	4608      	mov	r0, r1
 8006dfe:	4611      	mov	r1, r2
 8006e00:	602b      	str	r3, [r5, #0]
 8006e02:	f7fa f9b7 	bl	8001174 <_kill>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d102      	bne.n	8006e10 <_kill_r+0x1c>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	b103      	cbz	r3, 8006e10 <_kill_r+0x1c>
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	bd38      	pop	{r3, r4, r5, pc}
 8006e12:	bf00      	nop
 8006e14:	20000368 	.word	0x20000368

08006e18 <_getpid_r>:
 8006e18:	f7fa b9a4 	b.w	8001164 <_getpid>

08006e1c <_init>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr

08006e28 <_fini>:
 8006e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2a:	bf00      	nop
 8006e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e2e:	bc08      	pop	{r3}
 8006e30:	469e      	mov	lr, r3
 8006e32:	4770      	bx	lr
